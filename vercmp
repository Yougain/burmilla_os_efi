# bash source


versplit(){ # v2.0.0-rc1-btrfs-1.2 => (v2.0.0-rc1 btrfs 1.2)
	dbv "$@"
	local tmpa
	split tmpa "$2" -
	dbv "${tmpa[@]}"
	local i
	eval "$1=()"
	for i in "${tmpa[@]}"; do
		if [[ $i =~ ^(rc|beta|Rc|Beta|RC|BETA)([^A-Za-z]|$) ]];then
			eval "$1[\$((\${#$1[@]} - 1))]=\"\${$1[\$((\${#$1[@]} - 1))]}\"-\"\$i\""
		else
			eval "$1+=(\"\$i\")"
		fi
	done
}

versplit_non_digit(){ # v2.0.0 => (v 2.0.0)
	local left="$2"
	local last
	local ver
	local vers
	dbv $2
	while true; do
		if [[ $left =~ (^|.*[^0])(([1-9][0-9]*|0)(\.[1-9][0-9]*|0)*)(.*)$ ]];then
			dbv ${#BASH_REMATCH}
			if [ ${#BASH_REMATCH} -ge 6 ];then
				last=${BASH_REMATCH[${#BASH_REMATCH}]}
			else
				last=
			fi
			ver=${BASH_REMATCH[2]}
			left=${BASH_REMATCH[1]}
			if [ -n "$last" ];then
				vers=($ver "$last" $vers)
			else
				vers=($ver $vers)
			fi
			dbv $last
			dbv $ver
			dbv $left
		else
			break
		fi
	done
	if [ -n "$left" ];then
		vers=($left $vers)
	fi
	eval "$1=()"
	local i
	for i in "${vers[@]}"; do
		eval "$1+=(\"\$i\")"
	done
}


word_class(){
	case "$1" in
	BETA|beta|Beta)
		return 0
		;;
	RC|rc|Rc)
		return 1
		;;
	"")
		return 2
		;;
	*)
		if [ "$1" = 0 ];then
			return 4
		elif [[ $1 =~ ^[1-9][0-9]*$ ]]; then
			return 4
		else
			return 3
		fi
		;;
	esac
}


dict_cmp(){
	if [ "$1" = "$2" ];then
		return 2
	elif [[ "$1" > "$2" ]];then
		return 0
	else
		return 1
	fi
}


vercmp_word(){
	dbv $1 $2
	local a
	local b
	word_class "$1"
	a=$?
	word_class "$2"
	b=$?
	dbv $1 is class $a
	dbv $2 is class $b
	if [ $a -gt $b ]; then
		dbv
		return 0
	elif [ $a -lt $b ]; then
		dbv
		return 1
	else
		case $a in
		3)
			dbv
			dict_cmp $1 $2
			return $?
			;;
		4)
			if [ $1 -gt $2 ];then
				return 0
			elif [ $1 -lt $2 ];then
				return 1
			else
				return 2
			fi
			;;
		*)
			return 2
			;;
		esac
	fi
}



vercmp_atom(){
	local a
	local b
	dbv $1 $2
	split a "$1" . # 2.3 -> (2 3)
	split b "$2" .
	dbv $1 "${a[@]}"
	dbv $2 "${b[@]}"
	local i=0
	for e in ${a[@]}; do
		dbv $e
		vercmp_word $e ${b[$i]}
		local tmp=$?
		if [ $tmp != 2 ]; then
			dbv $tmp
			return $tmp
		fi
		i=$((i + 1))
	done
	vercmp_word "" ${b[$i]}
}


vercmp_unit(){
	local a
	local b
	versplit_non_digit a "$1" # v2.3 -> (v 2.3)
	versplit_non_digit b "$2"
	dbv $1 ${a[@]}
	dbv $2 ${b[@]}
	local i=0
	for e in ${a[@]}; do
		dbv $e
		dbv ${b[$i]}
		vercmp_atom $e ${b[$i]}
		local tmp=$?
		if [ $tmp != 2 ]; then
			dbv $tmp
			return $tmp
		fi
		i=$((i + 1))
	done
	dbv
	vercmp_atom "" ${b[$i]}
}


vercmp_elem(){
	local a
	local b
	split a "$1" -
	split b "$2" -
	vercmp_unit ${a[0]} ${b[0]}
	local tmp=$?
	if [ $tmp != 2 ]; then
		return $tmp
	fi
	vercmp_unit ${a[1]} ${b[1]}
}


vercmp(){
	local a
	local b
	versplit a "$1"
	versplit b "$2"
	dbv ${a[@]}
	dbv ${b[@]}
	local i=0
	for e in ${a[@]}; do
		dbv $e
		vercmp_elem $e ${b[$i]}
		local tmp=$?
		if [ $tmp != 2 ]; then
			return $tmp
		fi
		i=$((i + 1))
	done
	vercmp_elem "" ${b[$i]}
}


