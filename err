error="\033[41m\033[33mERROR    :\033[m \033[31m"
warning="\033[43m\033[31mWARNING:\033[m \033[33m"
info="\033[46m\033[34mINFO     :\033[m \033[36m "
plain="\033[m"
normal="\033[m"

black="0"
red="1"
green="2"
yellow="3"
blue="4"
purple="5"
magenta="5"
cyan="6"
white="7"


allColors="black red green yellow blue purple magenta cyan white"

function capitalize(){
	local B
	local F
	B=`echo -n "${1:0:1}" | tr "[:lower:]" "[:upper:]"`
	F="${B}${1:1}"
	shift
	echo -n $F $@
}

function errmsg(){
	if [ -z "$ERRMSG" ]; then
		ERRMSG="$error`capitalize $@`$plain"
	else
		ERRMSG="$ERRMSG
$error""`capitalize $@`"$plain
	fi
}


alias err=errmsg
alias error=errmsg


function info_n(){
	echo -ne $info`capitalize $@`$plain
}
function info(){
	info_n $@"\n"
}


function warning_n(){
	echo -ne "$warning""$@"
}
function warning(){
	warning_n "$@""\n"
}

function warn(){
	warning_n "$@""\n"
}
alias warn_n=warning_n


for col in `echo $allColors`; do
	eval '
		'`capitalize $col`'="\033[3$'$col'""m"
		'_`capitalize $col`'="\\033[3$'$col'""m"
		function '$col'_n(){
			echo -ne "\033[3$'$col'""m''$@''$plain"
		}
		function '$col'(){
			'$col'_n $@"\n"
		}
		function bg'`capitalize $col`'_n(){
			echo -ne "\033[4$'$col'""m''$@''$plain"
		}
		function bg'`capitalize $col`'(){
			bg'`capitalize $col`'_n $@"\n"
		}
	'
	for bgCol in $allColors; do
		eval '
			function '$col'Bg'`capitalize $bgCol`'_n(){
				echo -ne "\033[3$'$col'""m\033[4$'$bgCol'""m''$@''$plain"
			}
			function '$col'Bg'`capitalize $bgCol`'(){
				'$col'Bg'`capitalize $bgCol`'_n $@
			}
		'
	done
done


function exit_if_err(){
	if [ -n "$1" ]; then
		errmsg $@
	fi
	if [ -n "$ERRMSG" ];then
		echo -en $ERRMSG
		exit 1
	fi
}

function die(){
	if [ -n "$1" ]; then
		errmsg $@
	fi
	if [ -n "$ERRMSG" ];then
		echo -en $ERRMSG
	fi
	exit 1
}


function ssh_param(){
	if [ $# = "0" ];then
		die "ssh server argument missing."
	fi
	ssh -v -o "ConnectTimeout=5" $1 echo -n > /tmp/test_ssh 2>&1 
	if [ "$?" = "0" ];then
		local SSH_CON_LINE=`egrep -o 'debug1: Connecting to .* port [0-9]+' /tmp/test_ssh`
		SSH_PORT=`echo $SSH_CON_LINE| egrep -o '[0-9]+$'`
		SSH_HOST_IP=`echo $SSH_CON_LINE| egrep -o '\[[0-9/A-Fa-f\.:]+\]'| egrep -o [0-9/A-Fa-f\.:]+`
		SSH_HOST=$1
		if [ -n "$SSH_PORT" ];then
			return 0
		fi
	fi
	return 1
}


function wait_sshd_start(){
	if [ -z "$SSH_PORT" -o -z "$SSH_HOST" ];then
		die "missing ssh paramter variables. Please execute 'ssh_param SERVER_NAME' first."
	fi
	local SSH_CON_
	info_n connecting SSH...
	for i in $(seq 1 120); do
		sleep 1
		blue_n "."
		SSH_CON_=`echo | nc $SSH_HOST_IP $SSH_PORT 2>&1`
		if [ "${SSH_CON_:0:3}" = "SSH" ];then
			cyanBgBlue connected
			return
		fi
	done
	echo
	die Tried 120 times. Still cannot connect SSH port "($SSH_PORT)". Exited.
}


THIS_FILE="$(realpath -s "$0")"


function transfer_arguments(){
	local i
	local j=-1
	while IFS= read -r -d $'\0' i; do
	    if [ $j != "-1" ];then
	    	TRANSFER_ARGUMENTS="$TRANSFER_ARGUMENTS$1$j='$i'"$'\n'
	    fi
	    j=$(( j + 1 ))
	done < <(cat /proc/$$/cmdline)
}

transfer_arguments A

SCRIPT_ID=`rand 100000000`

function ssh_do(){
	local sudoing
	if [ "$1" = "sudo" ];then
		sudoing=sudo
		shift
	fi
	if [ -z "$SSH_PORT" -o -z "$SSH_HOST" ];then
		die "missing ssh paramter variables. Please execute 'ssh_param SERVER_NAME' first."
	fi
	if [ "$#" = "0" ];then
		local set_env_lines="set | awk '!/^(BASHOPTS|BASH_VERSINFO|EUID|PPID|SHELLOPTS|UID)=/ {print \$0}'"
		(
			# preserve host environment
			echo "$set_env_lines > /tmp/err.$SCRIPT_ID";
			echo "
				# set client environment
				if [ ! -e /tmp/err.cont.$SCRIPT_ID ];then # missing previous host environment 
					# set client command line argument
					$TRANSFER_ARGUMENTS
					`$set_env_lines`
				else # found previous host environment 
					source /tmp/err.cont.$SCRIPT_ID; 
					rm /tmp/err.cont.$SCRIPT_ID;
				fi
			";
			# restore host environment
			echo "source /tmp/err.$SCRIPT_ID; rm /tmp/err.$SCRIPT_ID";
			# execute script from standard input
			cat -; 
			# preserve environment after script execution
			echo "$set_env_lines > /tmp/err.cont.$SCRIPT_ID;exit 0"
		) | ssh -x $SSH_HOST $sudoing bash
		if [ "$?" = "1" ];then
			exit 1
		fi
	else
		ssh $SSH_HOST $sudoing $@
	fi
}

function ssh_sudo(){
	ssh_do sudo $@
}




function ssh_reboot(){
	ssh_sudo <<'END'
		efi_dev=$(readlink -f /dev/disk/by-uuid/`cat /proc/cmdline|egrep -o "efi=UUID=[0-9a-fA-F-]+"|egrep -o "[0-9a-fA-F-]+$"`|awk 'match($1,/[0-9]+$/){print substr($1,0,length($1)-RLENGTH);}'|awk 'match($1,/^\/dev\//){print substr($1,6,length($1)-5);}')2
		if [ -z "$efi_dev" ]; then die "boot efi device not found."; fi
		mkdir -p /tmp/efi_dev
		mount /dev/$efi_dev /tmp/efi_dev
		touch /tmp/efi_dev/.reboot
		reboot
END
	wait_sshd_start
	echo try ssh connect
	ssh_sudo <<'END'
		efi_dev=$(readlink -f /dev/disk/by-uuid/`cat /proc/cmdline|egrep -o "efi=UUID=[0-9a-fA-F-]+"|egrep -o "[0-9a-fA-F-]+$"`|awk 'match($1,/[0-9]+$/){print substr($1,0,length($1)-RLENGTH);}'|awk 'match($1,/^\/dev\//){print substr($1,6,length($1)-5);}')2
		if [ -z "$efi_dev" ]; then die "boot efi device not found."; fi
		mkdir -p /tmp/efi_dev
		mount /dev/$efi_dev /tmp/efi_dev
		rm /tmp/efi_dev/.reboot
		umount /tmp/efi_dev
		rm -rf /tmp/efi_dev
END
}



