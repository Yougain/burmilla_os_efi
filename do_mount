# bash source


require args


function do_mount(){
	. args
	function _info(){
		if [ -n $verbose ];then
			echo $@
		fi
		info $@
	}
	function _die(){
		if [ -n $verbose ];then
			echo $@
		fi
		die $@
	}
	function _err(){
		if [ -n $verbose ];then
			echo $@
		fi
		err $@
	}
	function _mount(){
		local msg="`mount $@ 2>&1`"
		local ret=$?
		if echo $msg|grep "already mounted" > /dev/null;then
			_die $msg
			ret=1
		else
			if echo $msg|grep "wrong fs" > /dev/null;then
				if [ "$type" = "btrfs" ]; then
					_info mount failed / mount $@
					return 1
				fi
				_die $msg
				ret=1
			fi
		fi
		if [ "$ret" = "0" ];then
			_info mount successful / mount $@
		else
			_err mount failed / mount $@
		fi
		return $ret
	}
	require -f blkid2
	declare -A opts
	local args=()
	local moptShift
	local forceDegraded
	local verbose
	declare -A mopts
	declare -A moptsNoDeg
	declare -A moptsWithDeg
	local tmopts=()
	local i
	
	if opt --fake -f; then
		opts[-f]=1
	fi
	if opt --verbose -v; then
		opts[-v]=1
		verbose=1
	fi
	if opt --rw  --read-write -w; then
		if [ -n "${mopts[ro]}" ];then
			_die "both 'rw' and 'ro' mount option specified"
		fi
		mopts[rw]=1
	fi
	if opt --read-only -r; then
		if [ -n "${mopts[rw]}" ];then
			_die "both 'rw' and 'ro' mount option specified"
		fi
		mopts[ro]=1
	fi
	if opt --force-degraded; then
		forceDegraded=1
	fi
	if opt --options -o op_arg; then
		split tmopts "$op_arg" ,
		for i in "${tmopts[@]}"; do
			if [ "$i" = "rw" -a "${mopts[ro]}" = 1 ]; then
				_die "both 'rw' and 'ro' mount option specified"
			fi
			if [ "$i" = "ro" -a "${mopts[rw]}" = 1 ]; then
				_die "both 'rw' and 'ro' mount option specified"
			fi
			mopts[$i]=1
		done
	fi
	i=${#all_args[@]}
	if ((i > 2)); then
		_die "extra arguments specified"
	fi
	local opts="${!opts[@]}"
	for i in "${!mopts[@]}"; do
		if [ "$i" != "degraded" ];then
			moptsNoDeg[$i]=${mopts[$i]}
		fi
	done
	for i in "${!mopts[@]}"; do
		moptsWithDeg[$i]=${mopts[$i]}
	done
	if [ "${moptsWithDeg[ro]}" != 1 ];then
		moptsWithDeg[rw]=1
	fi
	moptsWithDeg[degraded]=1
	mopts=$(joinopt "-o " , "${!mopts[@]}")
	moptsNoDeg=$(joinopt "-o " , "${!moptsNoDeg[@]}")
	moptsWithDeg=$(joinopt "-o " , "${!moptsWithDeg[@]}")
	local src=${all_args[0]}
	local dst=${all_args[1]}
	declare -A to_mount_cand
	local to_mount
	require partNum2Dev
	src=$(partNum2Dev $src)
	if [ -b "$src" ];then
		to_mount_cand[$src]=1
	else
		to_mount=`blkid2 "$src"`
		if [ -b "$to_mount" ];then
			to_mount_cand[$to_mount]=1
		fi
	fi
	if [ -d "$src" ];then
		opts[-B]=1
	fi
	if [ -e "$src" ];then
		to_mount_cand[$(readlink -f "$src")]=1
	fi
	i=${#to_mount_cand[@]}
	if [ "$i" = 0 ];then
		_die "'$src' is not mountable source."
	fi
	if ((i > 1)); then
		i=$(joinq ', ' "'" "${!to_mount_cand[@]}")
		_die "'$src' is ambiguous. Candidates are $i"
	fi
	to_mount=${!to_mount_cand[@]}
	local type=`blkid $to_mount|sed -r 's/.*TYPE="([^"]+)".*/\1/g'`
	if [ -z "$type" ];then
		_die "cannot detect filesystem of '$to_mount'."
	fi
	if [ "$type" = "swap" ];then
		if [ -n "$dst" ];then
			_err "cannot mount swap partition"
		fi
		if [ -n "$opts" -o -n "$mopts" ];then
			_err "cannot use option for swap partition"
		fi
		exit_if_err
		swapon $to_mount
	else
		if [ -z "$dst" ];then
			_die "mount point is not specified."
		fi
		if [ ! -d "$dst" ];then
			if [ -e "$dst" ];then
				_die "'$dst' is not a directory."
			fi
			mkdir -p "$dst"
		fi
		local res
		if [ "$type" = "btrfs" ];then
			if [ ! -e /dev/btrfs-control ];then
				if [ "`id -u`" = 0 ];then
					mknod /dev/btrfs-control c 10 234
				fi
			fi
			if [ "`id -u`" = 0 ];then
				if [ -x /usr/bin/btrfs -o -x /bin/btrfs ];then
					btrfs device scan > /dev/null 2>/dev/null
				else
					warn "'btrfs', not found"
				fi
			fi

			local devices=("`blkid2 --get-siblings $to_mount`")
			dbv "$?"
			if [ "$?" != 0 -o "${#devices[@]}" = 0 ];then
				dbv "${#devices[@]}"
				_die "'blkid2 --get-siblings $to_mount' failed"
			fi
			local dev
			local devOptArgs
			for dev in ${devices[@]};do
				if [ -z "$devOptArgs" ];then
					devOptArgs="device=$dev"
				else
					devOptArgs="$devOptArgs,device=$dev"
				fi
			done
			if [ -z "$moptsNoDeg" ];then
				moptsNoDeg="-o "$devOptArgs
			else
				moptsNoDeg="$moptsNoDeg,$devOptArgs"
			fi
			if [ -z "$moptsWithDeg" ];then
				moptsWithDeg="-o "$devOptArgs
			else
				moptsWithDeg="$moptsWithDeg,$devOptArgs"
			fi
			if [ -z "$forceDegraded" ];then
				local i=0
				while ! _mount $opts $moptsNoDeg $to_mount $dst;do
					if [ $i = 0 ];then
						info_n retrying .
					else
						echo -n .
					fi
					i=$((i + 1))
					if [ $i = 5 ];then
						echo
						_mount $opts $moptsWithDeg $to_mount $dst
						res=$?
						if [ "$res" = 0 ];then
							_warn "Mounted degraded drive."
						fi
						break
					fi
					sleep 2
				done
				res=$?
			else
				_mount $opts $moptsWithDeg $to_mount $dst
				res=$?
			fi
		else
			_mount $opts $mopts $to_mount $dst
			res=$?
		fi
		if [ "$res" != "0" ];then
			_die "cannot mount $to_mount on $dst"
		fi
	fi
}



