# bash source


require args


function do_mount(){
	info do_mount $@
	dbv $@
	rm -f $SCRIPT_VAR_DIR/degraded
	. args
	function _info(){
		if [ -n "$verbose" ];then
			echo $@
			info $@
		fi
	}
	function _die(){
			echo $@
		dbv dying $@
		die $@
	}
	function _err(){
			echo $@
		err $@
	}
	function _warn(){
			echo $@
		if [ -n "$verbose" ];then
			warn $@
		fi
	}
	function _mount(){
		local msg="`mount $@ 2>&1`"
		local ret=$?
		dbv $ret
		if echo $msg|grep "already mounted" > /dev/null;then
			err $msg
			ret=1
		else
			if echo $msg|grep "wrong fs" > /dev/null;then
				if [ "$type" = "btrfs" ]; then
					err mount failed : mount $@
				fi
				err $msg
				ret=1
			fi
		fi
		if [ "$ret" = "0" ];then
			info mount successful : mount $@
			echo $src
		else
			err mount failed : mount $@
		fi
		return $ret
	}
	require -f blkid2
	declare -A opts
	local args=()
	local moptShift
	local forceDegraded
	local verbose
	local ro_degraded_best
	local salvageBtrfs
	local echoMounted
	declare -A mopts
	declare -A moptsNoDeg
	declare -A moptsWithDeg
	local tmopts=()
	local i
	
	if opt --fake -f; then
		dbv
		opts[-f]=1
	fi
	if opt --verbose -v; then
		opts[-v]=1
		verbose=1
	fi
	if opt --rw  --read-write -w; then
		if [ -n "${mopts[ro]}" ];then
			_die "both 'rw' and 'ro' mount option specified"
		fi
		mopts[rw]=1
	fi
	if opt --read-only -r; then
		if [ -n "${mopts[rw]}" ];then
			_die "both 'rw' and 'ro' mount option specified"
		fi
		mopts[ro]=1
	fi
	if opt --echo-mounted; then
		echoMounted=1
	fi
	if opt --force-degraded; then
		forceDegraded=1
	fi
	if opt --salvage-btrfs;then
		salvageBtrfs=1
	fi
	if opt --options -o op_arg; then
		dbv
		split tmopts "$op_arg" ,
		for i in "${tmopts[@]}"; do
			if [ "$i" = "rw" -a "${mopts[ro]}" = 1 ]; then
				_die "both 'rw' and 'ro' mount option specified"
			fi
			if [ "$i" = "ro" -a "${mopts[rw]}" = 1 ]; then
				_die "both 'rw' and 'ro' mount option specified"
			fi
			dbv $i
			mopts[$i]=1
		done
	fi
	dbv
	local ag
	local src
	local dst
	local src_attrs
	for ag in ${all_args[@]}; do
		dbv $ag
		if [[ $ag =~ = ]];then
			dbv
			if [ -n "$src" ];then
				_die "extra arguments specified"
			fi
			src_attrs+=($ag)
		elif ((${#src_attrs[@]} > 0)) || [ -n "$src" ]; then
			dbv
			if [ -n "$dst" ];then
				_die "extra arguments specified"
			fi
			dst="$ag"
		else
			dbv
			src="$ag"
		fi
	done
	local opts="${!opts[@]}"
	for i in "${!mopts[@]}"; do
		dbv $i
		if [ "$i" != "degraded" ];then
			moptsNoDeg[$i]=${mopts[$i]}
		fi
	done
	for i in "${!mopts[@]}"; do
		moptsWithDeg[$i]=${mopts[$i]}
	done
	if [ "${moptsWithDeg[ro]}" != 1 ];then
		moptsWithDeg[rw]=1
	fi
	moptsWithDeg[degraded]=1
	if [ -n "$salvageBtrfs" ]; then
		mopts[degraded]=1
		mopts[ro]=1
	fi
	mopts=$(joinopt "-o " , "${!mopts[@]}")
	moptsNoDeg=$(joinopt "-o " , "${!moptsNoDeg[@]}")
	moptsWithDeg=$(joinopt "-o " , "${!moptsWithDeg[@]}")
	declare -A to_mount_cand
	local srcs
	if [[ $src =~ ^[0-9]+$ ]];then
		require partNum2Dev
		dbv $src
		srcs=($(partNum2Dev $src))
		dbv ${srcs[@]}
		case ${#srcs[@]} in
			0)
				_die "No disk detected."
				;;
			1)
				_info "found disk(s), ${srcs[@]}."
				;;
			*)
				_info "Multiple disks, $(pqlist srcs) detected."
				;;
		esac
	elif [ -n "$src_attrs" ]; then
		dbv
		local attr
		local cline="blkid2"
		for attr in ${src_attrs[@]}; do
			dbv $attr
			if [[ $attr =~ ^([^=]+)=(.*)$ ]];then
				cline="$cline ${BASH_REMATCH[1]}=\"${BASH_REMATCH[2]}\""
				dbv "$cline"
			fi
		done
		dbv "$cline"
		eval "srcs=(\`$cline\`)"
		case ${#srcs[@]} in
			0)
				dbv
				_die "No disk detected for $(pqlist src_attrs)"
				;;
			1)
				dbv
				_info "found disk, '${srcs[0]}' for $(pqlist src_attrs)."
				;;
			*)
				local d
				local u
				local dp
				local cu
				local b2
				for d in ${srcs[@]}; do
					b2="`blkid2 $d`"
					if [[ $b2 =~ \ UUID=\"([^\"]+) ]]; then
						cu="${BASH_REMATCH[2]}"
					else
						err "Multiple disks, $(pqlist srcs) detected for $(pqlist src_attrs)."
						_die "UUID of '$d' is missing."
					fi
					if [ -z "$u" ];then
						u="$cu"
						dp="$d"
					elif [ "$u" != "$cu" ];then
						err "Multiple disks, $(pqlist srcs) detected for $(pqlist src_attrs)."
						_die "UUIDs of '$dp' ($u) and '$d' ($cu) is different."
					fi
				done
				;;
		esac
	elif [ ! -b "$src" -a ! -d "$src" ];then
		dbv $src
		_die "$src is not mountable."
	else
		dbv
		srcs=($src)
	fi
	local multi=
	for src in ${srcs[@]}; do
		dbv $src
		if ((${#srcs[@]} > 1));then
			_info "Trying mount '${srcs[0]}' ..."
		fi
		if [ -d "$src" ];then
			opts[-B]=1
		fi
		local type=`/sbin/blkid $src|sed -r 's/.*TYPE="([^"]+)".*/\1/g'`
		if [ -z "$type" ];then
			_err "cannot detect filesystem of '$src'."
			continue
		fi
		local hasErr
		if [ "$type" = "swap" ];then
			if [ -n "$dst" ];then
				hasErr=1
				_err "cannot mount swap partition"
			fi
			if [ -n "$opts" -o -n "$mopts" ];then
				hasErr=1
				_err "cannot use option for swap partition"
			fi
			if [ -z "$hasErr" ];then
				swapon $src
				return $?
			fi
		else
			if [ -z "$dst" ];then
				_die "mount point is not specified."
			fi
			if [ ! -d "$dst" ];then
				if [ -e "$dst" ];then
					_die "'$dst' is not a directory."
				fi
				dbv $dst
				mkdir -p "$dst"
				dbv
			fi
			local res
			if [ "$type" = "btrfs" ];then
				if [ ! -e /dev/btrfs-control ];then
					if [ "`id -u`" = 0 ];then
						mknod /dev/btrfs-control c 10 234
					fi
				fi
				if [ "`id -u`" = 0 ];then
					btrfs device scan > /dev/null 2>/dev/null
					if [ $? = 127 ];then
						warn "do_mount: 'btrfs', not found"
					fi
				fi
				local devices
				devices=("`blkid2 --get-siblings $src`")
				if [ -z "$salvageBtrfs" ];then
					if [ "$?" != 0 -o "${#devices[@]}" = 0 ];then
						dbv "${#devices[@]}"
						_die "'blkid2 --get-siblings $src' failed"
					fi
					dbv $devices
					local dev
					local devOptArgs
					for dev in ${devices[@]};do
						if [ -z "$devOptArgs" ];then
							devOptArgs="device=$dev"
						else
							devOptArgs="$devOptArgs,device=$dev"
						fi
					done
					if [ -z "$moptsNoDeg" ];then
						moptsNoDeg="-o "$devOptArgs
					else
						moptsNoDeg="$moptsNoDeg,$devOptArgs"
					fi
					if [ -z "$moptsWithDeg" ];then
						moptsWithDeg="-o "$devOptArgs
					else
						moptsWithDeg="$moptsWithDeg,$devOptArgs"
					fi
					if [ -z "$forceDegraded" ];then
						local i=0
						while ! _mount $opts $moptsNoDeg $src $dst;do
							if [ $i = 0 ];then
								info_n retrying .
							else
								echo -n .
							fi
							i=$((i + 1))
							if [ $i = 5 ];then
								echo
								_mount $opts $moptsWithDeg $src $dst
								res=$?
								if [ "$res" = 0 ];then
									_warn "Mounted degraded drive."
									echo "Mounted degraded drive." > $SCRIPT_VAR_DIR/degraded
								fi
								break
							fi
							sleep 2
						done
						res=$?
					else
						_mount $opts $moptsWithDeg $src $dst
						res=$?
					fi
				else
					for dev in ${devices[@]}; do
						_mount $opts $mopts $dev $dst
						res=$?
						if [ $res = 0 ];then
							break
						fi
						dbv $res
					done
				fi
			else
				_mount $opts $mopts $src $dst
				res=$?
				dbv $res
			fi
			if [ "$res" == "0" ];then
				dbv $?
				return $res
			fi
		fi
	done
	return 1
}



