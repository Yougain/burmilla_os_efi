# bash like grub script

regexp --set 1:this_hd '^\(hd([0-9]+)' "$cmdpath"

if [ -e (hd$this_hd,msdos1)/boot ];then
	grub_path=(hd$this_hd,msdos1)/boot
elif [ -e (hd$this_hd,gpt4) ];then
	grub_path=(hd$this_hd,gpt4)
fi
mod_path=$grub_path/grub/x86_64-efi

insmod $mod_path/terminfo.mod
insmod $mod_path/serial.mod
insmod $mod_path/eval.mod

timeout=
default=

function debug{
	if [ -n "$DEBUG" ];then
		echo $@
	fi
}

function next{
	__theme=""
	eval "__theme0=\$$1"
	regexp --set 1:__theme '^([0-9][0-9]*)$' "$__theme0"
	if [ -z "$__theme" ];then
		eval "$1=1"
	else
		__lastR="."
		__lastRP=""
		__lastM="9"
		__zeros=""
		while true; do
			regexp --set 1:__digitC '('$__lastR')$' "$__theme"
			if [ "$__digitC" != "$__lastM" ]; then
				regexp --set 1:__digitP '(.)('$__lastRP')$' "$__theme"
				regexp --set 1:__digitL '^(.*)'$__lastR'$' "$__theme"
				break
			elif [ "$__theme" = "$__lastM" ]; then
				eval "$1=1$__zeros""0"
				return
			else
				__lastR=$__lastR"."
				__lastRP=$__lastRP"."
				__lastM=$__lastM"9"
				__zeros=$__zeros"0"
			fi
		done
		if [ "$__digitP" = 0 ];then
			__digitP=1
		elif [ "$__digitP" = 1 ];then
			__digitP=2
		elif [ "$__digitP" = 2 ];then
			__digitP=3
		elif [ "$__digitP" = 3 ];then
			__digitP=4
		elif [ "$__digitP" = 4 ];then
			__digitP=5
		elif [ "$__digitP" = 5 ];then
			__digitP=6
		elif [ "$__digitP" = 6 ];then
			__digitP=7
		elif [ "$__digitP" = 7 ];then
			__digitP=8
		elif [ "$__digitP" = 8 ];then
			__digitP=9
		else
			echo -n
		fi
		eval "$1=$__digitL$__digitP$__zeros"
	fi
}


function nexs{
	if eval "[ -z \"\$$1\" ]"; then
		eval "__nexs__$1="
	fi
	next __nexs__$1
	eval "$1=-\$__nexs__$1"
}


i=0
while [ $i != 20 ];do
	if serial --unit=$i --speed=115200 --word=8 --parity=no --stop=1; then
		serial_port=$i
		break
	fi
	next i
done
if [ -n "$serial_port" ]; then
	terminal_input console serial_com$serial_port
	terminal_output console serial_com$serial_port
	console="console=ttyS$serial_port,115200n8"
	console_autologin="rancher.autologin=ttyS$serial_port"
fi

set gfxmode=$VGA_SIZE
set gfxpayload=keep

function set_val{
	if [ "$1" = "-n" ];then
		shift
		eval "__cur=\"\$$2\""
	else
		__cur="$2"
	fi
	__all=
	while true; do
		if regexp --set 1:__pre '^([^'"'"']*)'"'"'(.*)$' "$__cur"; then
			regexp --set 2:__post '^([^'"'"']*)'"'"'(.*)$' "$__cur";
			__all="$__all'$__pre'\"'\""
			__cur="$__post"
		else
			break
		fi
	done
	__all="$__all""'""$__cur'"
	eval "$1=$__all"
}
function push{
	eval "tmp=\$$1""_size"
	if [ -z "$tmp" ];then
		eval "$1""_size=1"
		set_val "$1"_0 "$2"
	else
		eval "next $1""_size"
		set_val "$1"_"$tmp" "$2"
	fi
}
function each{
	eval "cur=\$$1""_it"
	if regexp --set 1:__aname '^(.*)_[0-9]+$' "$cur";then
		regexp --set 1:__index '^.*_([0-9]+)$' "$cur"
		if eval "[ -z \"\$$__aname""_size\" ]"; then
			debug "Error: array, '$__aname' is not initialized"
			return 1
		fi
	else
		debug "Error: iterator, '$1_it' is not initialized"
		return 1
	fi
	if [ -n "$2" ];then
		eval "$2=$__index"
	fi
	if eval "[ $__index -lt \"\$$__aname""_size\" ]" ; then
		eval "$1=\"\$$__aname""_$__index\""
		next __index
		eval "$1_it=$__aname""_$__index"
	else
		eval "$1="
		return 1
	fi
}
function order{
	eval "$2=0"
	__item_it=$1_0
	while each __item $2; do
		if eval "[ \"\$__item\" = \"\$$1\" ]"; then
			return 0
		fi
	done
	if eval "[ -n \"\$$1_size\" ]";then
		eval "$2=\$$1_size"
	else
		eval "$2=0"
	fi
	eval "push $1 \"\$$1\""
	return 1
}
function source_env{
	debug source_env $@
	if [ "$1" = "-s" ];then
		skip_load=1
		shift
	else
		skip_load=
	fi
	if ! [ -e "$1" ];then
		return 1
	fi
	if ! regexp --set 1:__evn '^.*/([A-Za-z_][A-Za-z0-9_]*)' "$1";then
		debug "Error: '$1' not contains '/'"
		return 1
	fi
	set_val -n __save $__evn
	eval "$__evn=_gpirpphpirpoijpjofdgipigfd__"
	if [ -z "$skip_load" ];then
		load_env --file "$1";
	fi
	if eval "[ \"\$$__evn\" = _gpirpphpirpoijpjofdgipigfd__ ]";then
		source $1
		if eval "[ \"\$$__evn\" = _gpirpphpirpoijpjofdgipigfd__ ]";then
			debug failed
			set_val -n $__evn __save
			return 1
		fi
	fi
	return 0
}
function store_env{
	if ! regexp --set 1:__evn '^.*/(.*)$' "$1";then
		debug "Error: '$1' not contains '/'"
		return 1
	fi
	set_val -n __save $__evn
	if [ $# -ge 2 ];then
		set_val $__evn "$2"
	fi
	if save_env $__evn --file $1; then
		__ret=0
	else
		debug "Error: [store_env] save_env failed."
		__ret=1
	fi
	if [ $# -ge 2 ];then
		set_val -n $__evn __save
	fi
	return $__ret
}
function boot_it{
	efi=$1
	shift
	boot=$1
	shift
	VERSION=""
	source_env -s $efi/VERSION
	if [ -n "$VERSION" ];then
		v=-$VERSION
	fi
	while true; do
		if ! source_env -s $efi/LINUX; then
			if ! source_env -s $efi/LINUX$v; then
				break
			fi
		fi
		if ! source_env -s $efi/INITRD; then
			if ! source_env -s $efi/INITRD$v; then
				break
			fi
		fi
		if ! linux $boot/$LINUX $@; then
			break
		fi
		if ! initrd $boot/$INITRD; then
			break
		fi
		boot
		break
	done
	debug "Error: boot failed. Please reset."
	#sleep 100000
}
i=0
while true ;do
	if [ -d "(hd$i,msdos1)/" ];then
		echo -n
	elif [ -d "(hd$i,gpt2)/" ];then
		if [ -f "(hd$i,gpt2)/DEBUG" ];then
			DEBUG=1
		fi
	elif [ "$i" -gt 100 ];then
		break
	fi
	next i
done
i=0
while true ;do
	if [ -d "(hd$i,msdos1)/" ];then
		debug "(hd$i) exists"
		hds="$hds $i"
	elif [ -d "(hd$i,gpt2)/" ];then
		debug "(hd$i) exists"
		hds="$hds $i"
	elif [ "$i" -gt 100 ];then
		break
	fi
	next i
done
# create installer list
for i in $hds; do
	if source_env -s (hd$i,msdos1)/boot/grub/VERSION; then
		if ! order VERSION j; then
			set_val version_for_vid_$j "$VERSION"
		fi
		push installers_for_vid_$j $i
		push installer $i
		eval "installer_$i""_vid=$j"
	fi
done
# add version of installed hd
for i in $hds; do
	s=
	while [ -e (hd$i,gpt2)/VERSION$s ]; do
		if source_env -s (hd$i,gpt2)/VERSION$s; then
			if ! order VERSION j; then
				set_val version_for_vid_$j "$VERSION"
			fi
			set_val version_order_of_vid_"$j"_for_hd_$i $s
		fi
		nexs s
	done
done
# create user settings list for installer
#for i in $hds; do
#	if source_env (hd$i,gpt7)/oem_root/opt/rancher/conf/grub/USER_SETTINGS; then
#		order USER_SETTINGS j
#	fi
#done

for i in $hds; do
	f=(hd$i,gpt2)/TOPIC
	if source_env $f; then # maybe load $VERSION if reinstalling
		debug "TOPIC found on $f"
		if [ "$TOPIC" != "USED" ];then
			debug "TOPIC of $f is not used"
			if [ -z "$tf" -o "$tf" -ot $f ];then
				debug "$f is set to topic_hd"
				tf=$f
				topic_hd=$i
			fi
		else
			debug "TOPIC of $f is already used"
		fi
	else
		debug "TOPIC not found on $f"
	fi
	f=(hd$i,gpt2)/LAST_BOOTED_VER
	if source_env -s $f; then
		if [ -z "$lf" -o "$lf" -ot $f ];then
			lf=$f
			last_booted_hd=$i
			last_booted_ver=$LAST_BOOTED_VER
		fi
	fi

	debug i=$i	
	if source_env -s (hd$i,gpt2)/BOOT_UUID; then
		debug BOOT_UUID=$BOOT_UUID
		install_id="$BOOT_UUID"
		order install_id j
		push "install_$j"_member $i
		eval "install_$j"_boot_uuid=$install_id
		s=
		while source_env -s (hd$i,gpt2)/VERSION$s; do
			order VERSION k
			eval "install_$j""_vids=$k"
			order "install_$j""_vids" x
			nexs s
		done
		if source_env -s (hd$i,gpt7)/oem_root/opt/rancher/conf/grub/USER_SETTINGS; then
			order USER_SETTINGS k # k :  setting_id
			eval "install_$j""_settings=$k"
			order "install_$j""_settings" x
		fi
	fi
done

function boot_relevant_installer{
	if source_env -s (hd$1,gpt2)/BOOT_UUID; then
		if source_env -s (hd$1,gpt2)/VERSION;then
			installing="$VERSION"
			for i in $hds; do
				p=(hd$i,msdos1)/boot/grub # grub path
				if source_env -s $p/VERSION; then
					if [ -n "$VERSION" = "$installing" ];then
						boot_it $p (hd$i,msdos1)/boot ref_boot_uuid=$BOOT_UUID $console $console_autologin
					fi
				fi
			done
			debug "Error: cannot find installer disk for version '$VERSION'. Please reset."
			#sleep 100000000
		else
			debug "Error: cannot determine version. Please reset."
			#sleep 100000000
		fi
	else
		debug "Error: cannot determine boot uuid. Please reset."
	fi
}


if [ -n "$topic_hd" ];then
	efi=hd$topic_hd,gpt2
	source_env ($efi)/TOPIC
	if [ "$TOPIC" = "REINSTALL" ]; then
		debug TOPIC=$TOPIC
		boot_relevant_installer $topic_hd
	fi
fi
if [ -n "$last_booted_hd" ];then
	default_hd=$last_booted_hd
else
	default_hd=$this_hd
fi
for i in $hds; do
	f=(hd$i,gpt2)/TOPIC
	if source_env $f; then
		if [ "$TOPIC" = "USED" ];then
			boot_failed_drives="$boot_failed_drives"" $i"
		fi
	fi
done



debug 1

function get_main_install{
	iid_it=install_id_0
	while each iid j; do
		hd_member_it="install_$j""_member_0"
		while each hd_member; do
			if [ "$hd_member" = "$default_hd" ];then
				main_install=$j
				return
			fi
		done
	done
	if [ "$install_id_size" -ge 1 ];then
		main_install=0
	fi
}
debug 2

get_main_install

debug 3

function open_submenu {
	menu="$menu
submenu \"$1\" {
"
}
debug 4
function close_submenu {
	menu="$menu
}
"
}
debug 5

function display_entry {
	# vidx hdnum idx debug (outer variable ver)
	if [ -n "$4" ];then
		dbg=" debug"
		DEB="_DEBUG"
	else
		dbg=
		DEB=
	fi
	TZ=
	source (hd$2,gpt7)/oem_root/etc/profile.d/timezone.sh
	source (hd$2,gpt4)/LINUX$DEB-$ver
	source (hd$2,gpt4)/LINUX_EXTRA
	source (hd$2,gpt2)/LINUX$DEB-$ver
	eval "linux=\"\$LINUX$DEB\""
	if [ -z "$default" -a "$2" = "$default_hd" ]; then
		default=$3
		if [ -n "$last_booted_hd" ]; then
			timeout=10
		fi
	fi
	failed=
	for bft in $boot_failed_drives; do
		if [ "$bft" = "$2" ]; then
			failed=" (boot failed)"
			break
		fi
	done
	if [ "$last_booted_hd" = "$2" -a "$ver" = "$last_booted_ver" ]; then
		lbt=" (last booted)"
	else
		lbt=
	fi
	menu="$menu
menuentry \"hd$2: $ver$dbg$lbt$failed\" {
linux (hd$2,gpt4)/$linux TZ=$TZ $console $LINUX_EXTRA

initrd (hd$2,gpt4)/initrd-$ver-mod

store_env (hd$2,gpt2)/TOPIC USED

boot
}
"
	if source_env -s (hd$2,gpt7)/oem_root/opt/rancher/conf/grub/USER_SETTINGS; then
		settings_detected="$USER_SETTINGS"
	else
		settings_detected=
	fi
}
debug 6
function display_installer{ # $2 -> $USER_SETTINGS
	eval "u=\"\$USER_SETTINGS_$2\""
	debug "user_settings='$u'"
	eval "vid=\$installer_$1""_vid"
	eval "ver=\$version_for_vid_$vid"
	if [ -n "$3" ];then
		eval "ref_boot_uuid=\" ref_boot_uuid=$3\""
	else
		eval "ref_boot_uuid="
	fi
	TZ=
	if [ -n "$5" ];then
		source (hd$5,gpt7)/oem_root/etc/profile.d/timezone.sh
		source (hd$5,gpt4)/LINUX_EXTRA
	fi
	if [ -n "$6" ];then
		dbg=" debug"
		DEB="_DEBUG"
	else
		dbg=
		DEB=
	fi
	if [ -n "$4" ];then
		eval "disp_ord=\", Installation #$install_disp_num_from_idx_$4\""
	else
		disp_ord=
	fi
	source_env -s (hd$1,msdos1)/boot/grub/LINUX$DEB # grub path
	eval "linux=\"\$LINUX$DEB\""
	linux="$linux$ref_boot_uuid"
	if ! regexp --set 1:ip 'rancher\.network\.interfaces\.[A-Za-z][A-Za-z0-9]*\.address=([^ ]+) ' "$u";then
		ip="dhcp"
	fi
	menu="$menu
menuentry \"Installer (hd$1): $ver$dbg ($ip$disp_ord)\" {
linux (hd$1,msdos1)/boot/$linux TZ=$TZ $console $console_autologin $6 $LINUX_EXTRA

initrd (hd$1,msdos1)/boot/initrd-$ver-mod
}
"
}
debug 7
function display_install_v{
	# args: vidx install# debug
	debug "display_install_v $@"
	eval "vid=\$install_$2_vids_$1"
	eval "installer_displayed=\$installers_for_vid_$vid""_0"
	eval "m_it=install_$2_member""_0"
	eval "m_sz=\$install_$2_member""_size"
	eval "ver=\$version_for_vid_$vid"
	eval "ref_boot_uuid=\$install_$2"
	if [ "$1" != 0 -a -z "$3" ]; then
		open_submenu "Version $ver ..."
	fi
	first_m=
	while each m dc; do
		if [ -z "$first_m" ];then
			first_m=$m
		fi
		display_entry $1 $m $dc $3
	done
	if [ -n "$installer_displayed" ];then
		eval "sid=\$install_$j""_settings_0"
		display_installer $installer_displayed "$sid" "$ref_boot_uuid" "$2" "$first_m" $3
		next dc
	fi
	if [ -z "$3" ];then
		if [ "$dc" -gt 1 ];then
			open_submenu "Debug ..."
		fi
		display_install_v $1 $2 debug
		if [ "$dc" -gt 1 ];then
			close_submenu
		fi
	fi
	if [ "$1" != 0 -a -z "$3" ]; then
		close_submenu
	fi
}
debug 8
function display_install{
	eval "vsz=\$install_$1_vids_size"
	eval "vid_it=\$install_$1_vids_0"
	vhit=0
	while each vid vidx; do
		eval "ver=\$version_for_vid_$vid"
		debug "ver=\$version_for_vid_$vid vidx=$vidx"
		debug "ver=$ver last_booted_ver=$last_booted_ver"
		if [ "$ver" = "$last_booted_ver" ];then
			debug "hit"
			vhit=$vidx
			break
		fi
	done
	debug vhit=$vhit
	display_install_v $vhit $@
	if [ "$vsz" = 2 ];then
		if [ "$vhit" = "0" ];then
			display_install_v 1 $@
		else
			display_install_v 0 $@
		fi
	elif [ "$vsz" != 1 ]; then
		open_submenu "Other versions ..."
		s=0
		while [ "$s" -lt "$vsz" ]; do
			if [ "$s" != "$vhit" ]; then
				display_install_v $s $@
			fi
			next s
		done
		close_submenu
	fi
}
debug 9
menu=
if [ -n "$main_install" ];then
	eval "install_disp_num_from_idx_$main_install=0"
	display_install $main_install
	main_installer_displayed=$installer_displayed
	Other="Other "
fi

install_id_it=install_id_0
k=1

while each install_id j; do
	if [ "$j" != "$main_install" ];then
		eval "install_disp_num_from_idx_$j=$k"
		open_submenu "$Other""Installation ""#$k"
		display_install $j
		close_submenu
		next k
	fi
done

function display_installers{
	installer_it=installer_0
	while each installer; do
		install_id_it=install_id_0
		while each install_id j; do
			eval "sid_it=install_$j""_settings_0"
			while each sid; do
				eval "u=\"\$USER_SETTINGS_$sid\""
				debug "u=$u"
				eval "m=\$install_"$j"_member_0"
				eval "ekparams=\$ekparams_$j"
				display_installer $installer "$sid" "$install_id" $j $m $1
			done
		done
		display_installer $installer "" "" "" "" $1
	done
	if [ -z "$1" ];then
		open_submenu "Debug ..."
		display_installers DEBUG
		close_submenu
	fi
}

if [ "$install_id_size" != 0 ];then
	open_submenu "Installers ..."
	display_installers
	close_submenu
else
	display_installers
fi


menu="$menu
menuentry \"BIOS/UEFI Firmware Settings\" {
fwsetup
}
menuentry \"Reboot\" {
reboot
}
"



eval "$menu"


