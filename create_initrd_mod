# bash source


function create_initrd_mod(){
	if [ ! -x /usr/bin/system-docker ];then
		die "/usr/bin/system-docker not found"
	fi
	if [ "`id -u`" != 0 ];then
		die "not super user"
	fi
	function find(){
		/usr/bin/find $@ 2> >(egrep -v '/proc.*: Invalid argument')
	}


	function sfind(){
		system-docker exec udev find $@ 2> >(egrep -v '/proc.*: Invalid argument')
	}

	local tmpd=`pwd`
	ls -la $tmpd/$INITRD_FILE-mod

	if [ -d $SCRIPT_TMP_DIR/initrd ];then
		for i in `ls $SCRIPT_TMP_DIR/initrd`;do
			umount $SCRIPT_TMP_DIR/$i
		done
	fi
	rm -rf --one-file-system $SCRIPT_TMP_DIR/initrd
	mkdir -p /installing/boot_dev
	umount /installing/boot_dev
	if [ -z "$INITRD_FILE" ];then
		local stand_alone
		if [ "$1" = for_installer ];then
			require blkid2
			require do_mount
			stand_alone=for_installer
			mkdir -p /installing/installer
			if ! mount LABEL=RANCHEROS /installing/installer;then
				die "installer disk not found"
			fi
			mount --bind /installing/installer/boot /installing/boot_dev
		else
			stand_alone=1
			require do_mount
			do_mount 4 /installing/boot_dev
		fi
	else
		if [ -n "$TARGET_DEV4" ];then
			mount $TARGET_DEV4 /installing/boot_dev
			mkdir -p /installing/state_root
			umount /installing/state_root
			mount $TARGET_DEV5 /installing/state_root
			local for_state=/installing/state_root
		else
			die boot drive not found
		fi
	fi
	mkdir -p $SCRIPT_TMP_DIR/initrd
	cd $SCRIPT_TMP_DIR/initrd
	apt-get -y update
	apt-get -y install cpio btrfs-progs strace

	if [ -z "$INITRD_FILE" ];then
		if [ -n "$1" -a "$1" != for_installer ];then
			if [ ! -e /installing/boot_dev/initrd-$1 ];then
				die "'initrd-$1' not found"
			else
				INITRD_FILE=initrd-$1
			fi
		else
			INITRD_FILE=`cd /installing/boot_dev;ls -d initrd-*|egrep -v '\-mod$'`
			local INITRD_FILE_COUNT=`echo "$INITRD_FILE" | wc | awk '{print $1}'`
			if [ "$INITRD_FILE_COUNT" != "1" ];then
			    die cannot detect initrd in iso image, or multiple initrd detected.
			fi
		fi
	fi

	zcat /installing/boot_dev/$INITRD_FILE | cpio -idmv

	local d
	for d in . $for_state; do
		ln -s usr/lib $d/lib
		ln -s lib $d/lib64
		if [ -d $d/bin ];then
			ln -s ../usr/bin/bash $d/bin/bash
		fi
	done
	
	if [ -n "$for_state" ];then
		if [ ! -d $for_state/bin ];then
			ln -s usr/bin $for_state/bin
		fi
	fi

	function cp_lib(){
		item=$1
		shift
		local l=`sfind / -name $item|head -1`
		local cmd
		if [ -z "$l" ];then
			l=`find / -name $item|head -1`
			if [ -z "$l" ];then
				die cannot find $item docker, udev nor local.
			else
				cmd="cp "
			fi
		else
			cmd="system-docker cp udev:"
		fi
		local d=./usr/lib
		for i in $@; do
			if [ -d "$i" ];then
				echo $cmd$l $i/$d
				$cmd$l $i/$d
			fi
		done
		if [ -L $1/$d/$item ];then
			local f=`readlink $1/$d/$item`
			local e=`dirname $l`
			for i in $@; do
				if [ -d "$i" ];then
					echo $cmd$e/$f $i/$d
					$cmd$e/$f $i/$d
				fi
			done
		fi
	}

	function cp_lib_back(){
		while read item; do
			local l=`find / -name $item|head -1`
			if [ -z "$l" ];then
				die cannot find $item
			fi
			local d=/usr/lib
			system-docker cp $l udev:$d
			if [ -L $l ];then
				local f=`readlink $l`
				local e=`dirname $l`
				system-docker cp $e/$f udev:$d
			fi
		done
	}
	
	function check_cp_udev_out(){
		local i="$1"
		local item="$2"
		local ln
		while read ln; do
			if [ "${ln:0:16}" = "invalid symlink " -a  "${ln##*-> }" = "\"../../bin/busybox\""  ]; then
				ln -s busybox $i/usr/bin/$item
			else
				echo $ln >&2
			fi
		done
	}
	
	function cp_bin(){
		local libs=""
		local i
		local d
		while read item; do
			local l=`sfind / -name $item|grep bin/|head -1`
			local cmd
			if [ -z "$l" ];then
				l=`find / -name $item|grep bin/|head -1`
				if [ -z "$l" ];then
					die cannot find $item in docker, udev nor in local.
				else
					cmd="cp "
				fi
			else
				cmd="system-docker cp udev:"
			fi
			for i in $@; do
				if [ -d "$i" ];then
					d=$i
					echo $cmd$l $i/usr/bin
					$cmd$l $i/usr/bin 2> >(check_cp_udev_out "$i" "$item")
				fi
			done
			if [ -n "$d" ];then
				if [ -L $d/usr/bin/$item ];then
					local lk=`readlink $d/usr/bin/$item`
					if [ "${lk:0:1}" = "/" ];then # absolute
						for i in $@; do
							if [ -d "$i" ];then
								echo $cmd$lk $i/$(dirname $lk)
								mkdir -p $i/$(dirname $lk)
								$cmd$lk $i/$(dirname $lk)
							fi
						done
					else
						for i in $@; do
							if [ -d "$i" ];then
								echo $cmd$(dirname $l)/$lk $i/$(dirname $l)/$lk
								mkdir -p $i/$(dirname $l)/$(dirname $lk)
								$cmd$(dirname $l)/$lk $i/$(dirname $l)/$lk
							fi
						done
					fi
				else
					local ldd_res_nf="`ldd $d/usr/bin/$item|grep 'not found (required'|awk '{print $2}'|sort|uniq`"
					ldd_res="$ldd_res_nf 
	""`ldd $1/usr/bin/$item|grep -v 'not found (required'|awk '{print $item}'`"
					while read f; do
						f=${f##*/}
						f=${f%%:*}
						f=${f%% (*)}
						f=`echo $f|awk '{print$1}'`
						if [ "$f" != "linux-vdso.so.1" ];then
							libs="$f
$libs"
						fi
					done < <(echo "$ldd_res")
				fi
			fi
		done
		for i in `echo "$libs"|sort|uniq`; do
			cp_lib $i $@
		done
	}
	
	
	system-docker cp /usr/bin/find udev:/bin

	cp_lib_back <<"	END"
		libselinux.so.1
		libpcre2-8.so.0
	END

	cp_lib libatomic.so.1 . $for_state
	
	cp_bin . $for_state <<"	END"
		bash
		busybox
		grep
		ls
		id
		mount
		mknod
		mkdir
		rmdir
		touch
		sleep
		udevadm
		umount
		chown
		chmod
		btrfs
		btrfsck
		strace
		killall
		readlink
		awk
		sed
		blkid
		udevd
		rm
		ln
		cat
		stat
		tr
		sort
		uniq
		egrep
		ldd
		date
		find
		mknod
		diff
	END
	
	local PATH="$tmpd:$PATH"
	require initrd_support
	require do_install
	require chain_bak
	
	for d in . $for_state; do
		system-docker cp udev:/lib/udev $d/lib
#		ln -sf /dev/null $d/lib/udev/rules.d/75-net-description.rules
#		ln -sf /dev/null $d/lib/udev/rules.d/80-net-name-slot.rules
		local f
		for f in $tmpd/blkid2                      \
				$tmpd/do_mount                     \
				after_save_cmd_line                \
				__paste_init_log_at_exit_magic_num \
				before_sysinit                     \
				paste_init_log_at_exit             \
				before_switch_root; do
			dbv $f $d
			do_install $f $d
		done
	done
	
	find | cpio -o -H newc  | gzip -c > ../$INITRD_FILE-mod.new
	if [ -z "$stand_alone" ];then
		chain_bak -d ../$INITRD_FILE-mod.new /installing/boot_dev/$INITRD_FILE-mod
	else
		ls -la ../$INITRD_FILE-mod.new
		ls -la $tmpd/$INITRD_FILE-mod
		chain_bak -d ../$INITRD_FILE-mod.new $tmpd/$INITRD_FILE-mod
	fi
	cd $tmpd

}

