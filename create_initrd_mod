# bash source


function create_initrd_mod(){
	apt-get -y update
	apt-get -y install cpio btrfs-progs strace nginx

	local tmpd=`pwd`
	local PATH="$tmpd:$PATH"
	local TMPD="$SCRIPT_TMP_DIR/create_initrd_mod"
	local IMGD="$TMPD/initrd"
	local EXTD="$TMPD/extd"
	local IMGD_INIT="$TMPD/initrd_init"
	local GITD="$TMPD/gitd"
	require -s initrd_support
	require do_install
	require chain_bak
	require do_mount

	if [ ! -x /usr/bin/system-docker ];then
		die "/usr/bin/system-docker not found"
	fi
	if [ "`id -u`" != 0 ];then
		die "not super user"
	fi
	function find(){
		/usr/bin/find $@ 2> >(egrep -v '/proc.*: Invalid argument')
	}


	function sfind(){
		system-docker exec udev find $@ 2> >(egrep -v '/proc.*: Invalid argument')
	}

	if [ -e "$TMPD" ];then
		rm_all $TMPD
	fi
	if [ -z "$INITRD_FILE" ];then
		local stand_alone
		if [ -n "$1" ];then
			stand_alone=for_installer
			mkdir -p $EXTD/{installer,boot_dev}
			if ! mount /home/$SUDO_USER/burmilla_os_iso/burmillaos-$1.iso $EXTD/installer;then
				die "installer disk not found"
			fi
			mount --bind $EXTD/installer/boot $EXTD/boot_dev
		else
			stand_alone=1
			do_mount 4 $EXTD/boot_dev
		fi
	else
		if [ -n "$TARGET_DEV4" ];then
			do_mount 4 $EXTD/boot_dev
			do_mount 5 $EXTD/state_root
			local for_state=$EXTD/state_root
		else
			die boot drive not found
		fi
	fi

	if [ -z "$INITRD_FILE" ];then
		if [ -n "$1" -a "$1" != for_installer ];then
			if [ ! -e $EXTD/boot_dev/initrd-$1 ];then
				die "'initrd-$1' not found"
			else
				INITRD_FILE=initrd-$1
			fi
		else
			INITRD_FILE=`cd $EXTD/boot_dev;ls -d initrd-*|egrep -v '\-mod$'`
			local INITRD_FILE_COUNT=`echo "$INITRD_FILE" | wc | awk '{print $1}'`
			if [ "$INITRD_FILE_COUNT" != "1" ];then
			    die cannot detect initrd in iso image, or multiple initrd detected.
			fi
		fi
	fi


	mkdir -p $IMGD
	cd $IMGD

	if [ -n "$INITRD_FILE" -a "${1:0:7}" = "initrd-" ];then
		echo extracting $1
		zcat $EXTD/boot_dev/$1 | cpio -idm
		mkdir -p $IMGD_INIT
		cd $IMGD_INIT
		echo extracting $INITRD_FILE # init is modified
		zcat $EXTD/boot_dev/$INITRD_FILE | cpio -idm
		cd $IMGD
		mv -v ./usr/bin/ros{,.org}
		cp -av $IMGD_INIT/usr/bin/ros ./usr/bin
		ls -la ./usr/bin/ros*
	else
		zcat $EXTD/boot_dev/$INITRD_FILE | cpio -idm
	fi

	local d
	for d in . $for_state; do
		ln -s usr/lib $d/lib
		ln -s lib $d/lib64
		if [ -d $d/bin ];then
			ln -s ../usr/bin/bash $d/bin/bash
		fi
	done
	
	if [ -n "$for_state" ];then
		if [ ! -d $for_state/bin ];then
			ln -s usr/bin $for_state/bin
		fi
	fi

	function cp_lib(){
		item=$1
		shift
		local l=`sfind / -name $item|grep -v /home/|grep -v /root/|head -1`
		local cmd
		if [ -z "$l" ];then
			l=`find / -name $item|grep -v /home/|grep -v /root/|head -1`
			if [ -z "$l" ];then
				die cannot find $item docker, udev nor local.
			else
				cmd="cp "
			fi
		else
			cmd="system-docker cp udev:"
		fi
		local d=./usr/lib
		for i in $@; do
			if [ -d "$i" ];then
				echo $cmd$l $i/$d
				$cmd$l $i/$d
			fi
		done
		if [ -L $1/$d/$item ];then
			local f=`readlink $1/$d/$item`
			local e=`dirname $l`
			for i in $@; do
				if [ -d "$i" ];then
					echo $cmd$e/$f $i/$d
					$cmd$e/$f $i/$d
				fi
			done
		fi
	}

	function cp_lib_back(){
		while read item; do
			local l=`find / -name $item|head -1`
			if [ -z "$l" ];then
				die cannot find $item
			fi
			local d=/usr/lib
			system-docker cp $l udev:$d
			if [ -L $l ];then
				local f=`readlink $l`
				local e=`dirname $l`
				system-docker cp $e/$f udev:$d
			fi
		done
	}
	
	function check_cp_udev_out(){
		local i="$1"
		local item="$2"
		local ln
		while read ln; do
			if [ "${ln:0:16}" = "invalid symlink " -a  "${ln##*-> }" = "\"../../bin/busybox\""  ]; then
				ln -s busybox $i/usr/bin/$item
			else
				echo $ln >&2
			fi
		done
	}

	function setup_nginx_files(){
		local v="${INITRD_FILE##*-}"
		local ln
		local first
		local commit
		mkdir -p $GITD
		pushd $GITD
		git clone https://github.com/Yougain/burmilla_os_efi
		while read ln; do
			if [[ "$ln" =~ ^commit\ ([0-9a-f]+)$ ]];then
				commit=${BASH_REMATCH[1]}
				dbv $commit
				if [ -z "$first" ];then
					first=$commit
				fi
			elif [[ "$ln" =~ ^\ *(([0-9]+)(\.[0-9]+)*) ]];then
				lv=${BASH_REMATCH[1]}
				dbv $lv
				if [ "$lv" =  "$v" ]; then
					dbv
					git checkout $commit
					break
				fi
			fi
		done < $<(git log)
		rm -rf .git
		mv burmilla_os_efi burmilla_os_efi-$v
		tar cvfz burmilla_os_efi-$v.tar.gz burmilla_os_efi-$v/
		rm -rf burmilla_os_efi-$v
		cat <<"END" > install.sh.tmpl
#!/bin/bash

wget %IP%/burmilla_os_efi-$v.tar.gz
tar zxf burmilla_os_efi-$v.tar.gz
cd burmilla_os_efi-$v
./install_burmillaos_on_btrfs %IP% "$@"

END
		popd
		mkdir -p ./var/www/html
		mv $GITD/* ./var/www/html
		mkdir -p ./etc
		cp -a /etc/nginx ./etc
		cp -a /usr/lib/nginx ./usr/lib
		mkdir -p ./usr/share
		cp -a /usr/share/nginx ./usr/share
		cat <<'END' > ./opt/rancher/bin/start.sh
#!/bin/bash

IP=$(/sbin/ifconfig | grep -B1 "inet" |awk '{ if ( $1 == "inet" ) { print $2 } else if ( $3 == "mtu" ) { printf "%s:" ,$1 } }' |awk -F: '{ print $1 ": " $3}' | egrep -o ': [0-9a-f:\.]+' | head -1 | egrep -o '[0-9a-fA-F][0-9a-fA-F:\.]+')
sed s/%IP%/$IP/g /opt/initrd/var/www/html/install.sh.tmpl > /opt/initrd/var/www/html/install.sh
chroot /opt/initrd nginx &

END
		chmod +x ./opt/rancher/bin/start.sh
	}
	
	function cp_bin(){
		local libs=""
		local i
		local d
		while read item; do
			local l=`sfind / -name $item|grep bin/|grep -v /home/|grep -v /root/|head -1`
			local cmd
			if [ -z "$l" ];then
				l=`find / -name $item|grep bin/|grep -v /home/|grep -v /root/|head -1`
				if [ -z "$l" ];then
					die cannot find $item in docker, udev nor in local.
				else
					cmd="cp "
				fi
			else
				cmd="system-docker cp udev:"
			fi
			for i in $@; do
				if [ -d "$i" ];then
					d=$i
					echo $cmd$l $i/usr/bin
					$cmd$l $i/usr/bin 2> >(check_cp_udev_out "$i" "$item")
				fi
			done
			if [ -n "$d" ];then
				if [ -L $d/usr/bin/$item ];then
					local lk=`readlink $d/usr/bin/$item`
					if [ "${lk:0:1}" = "/" ];then # absolute
						for i in $@; do
							if [ -d "$i" ];then
								echo $cmd$lk $i/$(dirname $lk)
								mkdir -p $i/$(dirname $lk)
								$cmd$lk $i/$(dirname $lk)
							fi
						done
					else
						for i in $@; do
							if [ -d "$i" ];then
								echo $cmd$(dirname $l)/$lk $i/$(dirname $l)/$lk
								mkdir -p $i/$(dirname $l)/$(dirname $lk)
								$cmd$(dirname $l)/$lk $i/$(dirname $l)/$lk
							fi
						done
					fi
				else
					local ldd_res_nf="`ldd $d/usr/bin/$item|grep 'not found (required'|awk '{print $2}'|sort|uniq`"
					ldd_res="$ldd_res_nf 
	""`ldd $1/usr/bin/$item|grep -v 'not found (required'|awk '{print $item}'`"
					while read f; do
						f=${f##*/}
						f=${f%%:*}
						f=${f%% (*)}
						f=`echo $f|awk '{print$1}'`
						if [ "$f" != "linux-vdso.so.1" ];then
							libs="$f
$libs"
						fi
					done < <(echo "$ldd_res")
				fi
			fi
		done
		for i in `echo "$libs"|sort|uniq`; do
			cp_lib $i $@
		done
	}
	
	
	system-docker cp /usr/bin/find udev:/bin

	cp_lib_back <<"	END"
		libselinux.so.1
		libpcre2-8.so.0
	END

	cp_lib libatomic.so.1 . $for_state
	cp_lib libpcre.so.3 . $for_state
	
	cp_bin . $for_state <<"	END"
		bash
		busybox
		id
		mknod
		rmdir
		touch
		sleep
		udevadm
		umount
		chmod
		btrfs
		btrfsck
		strace
		killall
		awk
		sed
		blkid
		udevd
		ln
		cat
		stat
		tr
		ldd
		find
		mknod
		diff
		tail
		dmesg
		nginx
	END
	mkdir -p ./idev # for logger
	mknod ./idev/null c 1 3
	for f in date chown rm readlink mount mkdir ls grep egrep;do
		rm -fv ./usr/bin/$f
		cp -av /bin/$f ./usr/bin
		if [ -d "$for_state" ];then
			rm -fv $for_state/usr/bin/$f
			cp -av /bin/$f $for_state/usr/bin
		fi
	done
	for f in sort realpath uniq;do
		rm -fv ./usr/bin/$f
		cp -av /usr/bin/$f ./usr/bin
		if [ -d "$for_state" ];then
			rm -fv $for_state/usr/bin/$f
			cp -av /usr/bin/$f $for_state/usr/bin
		fi
	done
	cp -a /usr/lib/locale ./usr/lib
	cp -a /usr/share/zoneinfo ./usr/share
	if [ -d "$for_state" ];then
		cp -a /usr/lib/locale $for_state/usr/lib
		cp -a /usr/share/zoneinfo $for_state/usr/share
	fi
	
	for d in . $for_state; do
		if [ -d "$d" ];then
			system-docker cp udev:/lib/udev $d/lib
			ln -sf /dev/null $d/lib/udev/rules.d/75-net-description.rules
			ln -sf /dev/null $d/lib/udev/rules.d/80-net-name-slot.rules
			local f
			for f in blkid2                      \
					do_mount                     \
					chain_bak					\
					partNum2Dev					\
					after_save_cmd_line                \
					before_sysinit; do
				dbv $f $d
				do_install $f $d
			done
		fi
	done
	ln -svf bash ./bin/sh
	if [ -d "$for_state" ];then
		ln -svf bash $for_state/bin/sh
	fi
	chown root:root usr/bin/busybox
	ls -la init
	
	setup_nginx_files
	
	find | cpio -o -H newc  | gzip -c > ../$INITRD_FILE-mod.new
	if [ -z "$stand_alone" ];then
		chain_bak -d ../$INITRD_FILE-mod.new $EXTD/boot_dev/$INITRD_FILE-mod
	else
		chain_bak -d ../$INITRD_FILE-mod.new $tmpd/$INITRD_FILE-mod
	fi
	cd $tmpd
	rm_all $TMPD
}

