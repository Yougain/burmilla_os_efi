#!/bin/bash

function env_var(){
	local ln
	local tmp
	declare -p |egrep '^declare -[A-Za-z-]* [A-Za-z_][A-Za-z0-9_]*'| while read ln; do
		ln=${ln#declare -* }
		ln=${ln%%=*}
		tmp="`declare -p $ln 2>/dev/null`"
		if [ "$?" = "0" ];then
			echo $ln
		fi
	done|sort|uniq
}


__ORG_EVAR__="`env_var`"


error="\033[41m\033[33mERROR    :\033[m \033[31m"
warning="\033[43m\033[31mWARNING:\033[m \033[33m"
info="\033[46m\033[34mINFO     :\033[m \033[36m"
debug="\033[42m\033[34mDEBUG     :\033[m \033[32m"
plain="\033[m"
normal="\033[m"


__FILE__() {
	local sn
	if [ -n "$1" ];then
		sn=$((1 + $1))
	else
		sn=1
	fi
	local f="`readlink -f "${BASH_SOURCE[$sn]}"`"
	if [[ "${f##*/}" =~ [^\-\./A-Za-z0-9_] ]]; then
		echo -e "$error"Cannot use path name, $f"$normal". >&2
		echo -e "$info"Alphabitical/numeric characters and '/', '.', '⧵' are usable for path name when using bashlib_y"$normal" >&2
		return
	fi
	echo "$f"
}

__FILE_PATH__() {
	__FILE__
}


__FILE_NAME__(){
	local f="`__FILE__ 1`"
	echo "${f##*/}"
}


__FILE_DIR__(){
	local f="`__FILE__ 1`"
	echo "${f%/*}"
}


__SOURCE_PATH__(){ # path of link if symbolic linked to __FILE__
	local f="`realpath "${BASH_SOURCE[1]}"`"
	if [[ "$f" =~ [^\-\./A-Za-z0-9_] ]]; then
		echo -e "$error"Cannot use path name, $f"$normal". >&2
		echo -e "$info"Alphabitical/numeric characters and '/', '.', '⧵' are usable for path name when using bashlib_y"$normal" >&2
		return
	fi
	echo "$f"
}


__SOURCE_NAME__(){
	local f="`__SOURCE_PATH__`"
	echo "${f##*/}"
}


PATH=/usr/share/$(__FILE_NAME__)/:$PATH


case $(__SOURCE_NAME__) in
	bashlib_y)
		;;
	args)
		. "`get_calling_func_info args`"
		return
		;;
	*)
		echo -e "$error"Cannot use source name, "'"$(__SOURCE_NAME__)"'". Exiting.$normal >&2
		return
esac


__CMD_PATH__(){
	realpath $0
}


__CMD_NAME__(){
	echo "${0##*/}"
}


__DIR__() {
	dirname "$(realpath "${BASH_SOURCE[1]}")"
}


function split(){
	local IFS="$3"
	eval "$1=(\$2)"
}


initialize_support_lib(){
	if [ -z "$SSH_PARAM_LIST" ];then
		declare -A SSH_PARAM_LIST
		if [ -n "$DEBUG" ];then
			declare -p SSH_PARAM_LIST
		fi
		local f="`__FILE_NAME__`"
		mkdir -p --mode=0777 /tmp/$f
		SCRIPT_TMP_DIR=/tmp/$f/${0##*/}/`date +"%y-%m-%d_%H:%M:%S.%N%z"`-$$
		SCRIPT_VAR_DIR=/var/tmp/$f
		if ! mkdir -p $SCRIPT_TMP_DIR; then
			echo -e "$error"cannot create script dir$normal
			exit 1
		fi
		if ! mkdir -p $SCRIPT_VAR_DIR; then
			echo -e "$error"cannot create script var dir$normal
			exit 1
		fi
		if [ -n "$SUDO_USER" -a -e "/etc/passwd" ];then
			chown -R "$SUDO_USER" $SCRIPT_TMP_DIR
			chown -R "$SUDO_USER" $SCRIPT_VAR_DIR
		fi
		local lnk=$SCRIPT_TMP_DIR/../latest
		if [ -n "$DEBUG" ];then
			echo -e "$debug"\$SCRIPT_TMP_DIR = $SCRIPT_TMP_DIR"$normal"
		fi
		rm -f $lnk
		if [ -n "$DEBUG" ];then
			ln -sf $SCRIPT_TMP_DIR $lnk
			if [ -n "$SUDO_USER" -a -e "/etc/passwd" ];then
				chown "$SUDO_USER" $lnk
			fi
		fi
		SCRIPT_ID=$RANDOM$RANDOM$RANDOM
		if [ -n "$DEBUG" ];then
			declare -p SCRIPT_ID
		fi
		SUPPORT_LIB_CONTENT="`cat $(__FILE__)`"
		SUPPORT_LIB_MTIME="`stat $(__FILE__) -c %Y`"
		SUPPORT_LIB_NAME=$f
		SOURCES_LOADED=()
		return 0
	else
	
		return 1
	fi
}

if initialize_support_lib; then
	if [ -n "$DEBUG" ];then
		echo "initializing support lib ..."
		declare -p SCRIPT_ID
	fi
	if ! declare -p SSH_PARAM_LIST 2>/dev/null; then
		declare -A SSH_PARAM_LIST
		if [ -n "$DEBUG" ];then
			declare -p SSH_PARAM_LIST
		fi
	fi
_black="0"
_red="1"
_green="2"
_yellow="3"
_blue="4"
_purple="5"
_magenta="5"
_cyan="6"
_white="7"


allColors="black red green yellow blue purple magenta cyan white"

function capitalize(){
	local B
	local F
	B=`echo -n "${1:0:1}" | tr "[:lower:]" "[:upper:]"`
	F="${B}${1:1}"
	shift
	echo -n $F $@
}

function errmsg_n(){
	echo -en $error"$@"$plain >&2
}


function errmsg(){
	errmsg_n "$@"
	if [ -n "$ERRMSG" ];then
		ERRMSG="$ERRMSG"'
'"$@"
	else
		ERRMSG="$@"
	fi
	echo -ne "\n" >&2
}


err(){
	errmsg "$@"
}
error(){
	errmsg "$@"
}


function info_n(){
	echo -ne $info$@$plain >&2
}
function info(){
	info_n $@
	echo -ne "\n" >&2
}


function warning_n(){
	echo -ne "$warning""$@"  >&2
}
function warning(){
	warning_n "$@"
	echo -ne "\n" >&2
}

function warn(){
	warning_n "$@"
	echo -ne "\n" >&2
}

warn_n(){
	warning_n "$@"
}


function deb(){
	if [ -n "$DEBUG" ];then
		echo -e $debug$@$plain >&2
	fi
}
debug(){
	deb "$@"
}


for col in `echo $allColors`; do
	eval '
		'$col'="\033[3$'_$col'""m"
		function '$col'_n(){
			echo -ne "\033[3$'_$col'""m''$@''$plain"
		}
		function '$col'(){
			'$col'_n $@"\n"
		}
		function bg'`capitalize $col`'_n(){
			echo -ne "\033[4$'_$col'""m''$@''$plain"
		}
		function bg'`capitalize $col`'(){
			bg'`capitalize $col`'_n $@"\n"
		}
	'
	for bgCol in $allColors; do
		eval '
			function '$col'Bg'`capitalize $bgCol`'_n(){
				echo -ne "\033[3$'_$col'""m\033[4$'_$bgCol'""m''$@''$plain"
			}
			function '$col'Bg'`capitalize $bgCol`'(){
				'$col'Bg'`capitalize $bgCol`'_n $@
			}
		'
	done
done


function exit_if_err(){
	errmsg "$@"
	if [ -n "$ERRMSG" ];then
		exit 1
	fi
}

function die(){
	if [ -n "$1" ]; then
		errmsg $@
	fi
	exit 1
}



declare -A LOCAL_FUNCS
declare -A SCRIPT_FILES


emerge_file_content(){
	local f="`readlink -f $1`"
	local sid
	if [ -e "$f" ];then
		if [ -z "${SCRIPT_FILES[$f]}" ];then
			sid=SCRIPT_FILE_$RANDOM$RANDOM$RANDOM
			dbv $sid
			SCRIPT_FILES["$f"]=$sid
			local ln
			eval "
				$sid=()
				local i=0
				local IFS=""
				while read -r ln;do
					$sid+=(\"\$ln
\")
					i=\$((i + 1))
				done < $f
			"
		else
			sid=${SCRIPT_FILES[$f]}
		fi
	fi
}


get_calling_line(){
	local frame=(`caller 1`)
	local f="${frame[2]}"
	local lno="${frame[0]}"
	emerge_file_content "$f"
	local sid=${SCRIPT_FILES[$f]}
	$1="`eval 'echo -E ${'"$sid"'['"$((lno - 1))"']}'`"
}


for_sudo_user(){
	if [ -n "$SUDO_USER" -a `id -u`=0 ];then
		local pth
		local rp
		local rpe
		local ac
		local us
		local fn=$(__FILE__NAME__)
		for pth in "$@";do
			rp="$(realpath "$pth")"
			if "${rp:0:$((#fn + 6))}" = "/tmp/$fn/"; then
				while true;do
					ac="$(stat -c %a "$rp")"
					us="$(stat -c %u "$rp")"
					if [ "$us"=0 ];then
						local acb="${ac:$((#ac - 3)):3}"
						if [ "$acb"=755 -o "$acb"=644 ];then
							chown $SUDO_USER:$SUDO_USER $rp
						else
							break
						fi
					fi
					rp=$(dirname "$rp")
					if [ rp="/tmp" ];then
						break
					fi
				done
			fi
		done
	fi
}


dbv(){
	if [ -n "$DEBUG" ];then
		local frame=(`caller 0`)
		local f="`readlink -f "${frame[2]}"`"
		local lno="${frame[0]}"
		local ln
		local sid
		if [ -e "$f" ];then
			if [ -z "${SCRIPT_FILES[$f]}" ];then
				sid=SCRIPT_FILE_$RANDOM$RANDOM$RANDOM
				SCRIPT_FILES["$f"]=$sid
				eval "
					$sid=()
					while read ln;do
						$sid+=(\"\$ln\")
					done < $f
				"
			else
				sid=${SCRIPT_FILES["$f"]}
			fi
			ln="`eval 'echo -E ${'"$sid"'['"$((lno - 1))"']}'`"
			deb ${f##*/}:$lno "'$yellow"${ln#*dbv }"$green'" = "'$cyan""$@""$green'"
		else
			deb ${f##*/}:$lno $cyan$@
		fi
	fi
}


_rm_all(){
	dbv $@
	if [ ! -e "$1" ];then
		err "'$1' does not exist."
		return 1
	fi
	local d
	local dlen
	local ln
	local blockDevs
	local f
	local l
	if [ ! -d /dev/block ];then
		die "directory /dev/block is missing"
		return 1
	fi
	for f in /dev/block/*;do
		dbv $f
		l="`readlink -f $f`"
		dbv $l
		dbv "${l:0:5}"
		if [ "${l:0:5}" = "/dev/" ];then
			blockDevs+=("${l#/dev/}")
		fi
	done
	d=$(realpath $1)
	if [ "$d" = "/" ];then
		err "cannot use rm_all to '/'"
		return 1
	fi
	dlen=${#d}
	dlen=$((dlen + 1))
	if [ ! -r /proc/mounts ];then
		die "cannot read /proc/mounts"
	fi
	cat /proc/mounts|awk '{print $2}'| sort -r |while read ln;do
		if [ "${ln:0:$dlen}" = "$d/" ];then
			dbv "umount $ln"
			if ! umount $ln;then
				err "cannot unmount '$ln'"
				return 1
			fi
		fi
	done
	local lnLen1
	local fsType
	local b
	local doRm
	local dln
	cat /proc/mounts|awk '{print $2 " " $1}'| sort -r |while read ln;do
		dbv "$ln"
		dln="`echo $ln | awk '{print $1}'`"
		lnLen1=$((${#dln} + 1))
		dbv "${d:0:$lnLen1}"
		dbv "$dln/"
		dbv "$d"
		dbv "$dln"
		if [ "${d:0:$lnLen1}" = "$dln/" -o "$d" = "$dln" ];then
			fsType="`echo $ln | awk '{print $2}'`"
			if [ "$fsType" = "overlay" ];then
				doRm=1
			else
				if [ "${fsType:0:5}" = "/dev/" ];then
					for b in ${blockDevs[@]}; do
						dbv $b
						if [ "$b" = "${fsType#/dev/}" ];then
							doRm=1
							break
						fi
					done
				fi
			fi
			if [ -n "$doRm" ];then
				rm --one-file-system -rf "$d"
			else
				err "cannot delete '$d'"
				return 1
			fi
			break
		fi
	done
}


rm_all(){
	local f
	for f in $@;do
		_rm_all "$f"
	done
}

declare -A LOCAL_FUNC_IDS
declare -A LOCAL_FUNC_EACH

function local_fun(){
	if [ "$#" = 0 ];then
		die "local_def: missing argument"
	fi
	if [ -z "${LOCAL_FUNC_IDS[${FUNCNAME[2]}]}" ];then
		LOCAL_FUNC_IDS[${FUNCNAME[2]}]=${FUNCNAME[2]}_$RANDOM$RANDOM$RANDOM
	fi
	local fName=${LOCAL_FUNC_IDS[${FUNCNAME[2]}]}_$1
	shift
	if [ -z "${LOCAL_FUNC_EACH[$fName]}" ] ;then
		LOCAL_FUNC_EACH[$fName]=1
		eval 'function '$fName"(){
			$(while read -r ln;do
				echo -E $ln
			done)
		}"
	fi
}


function local_call(){
	if [ "$#" = 0 ];then
		die "local_call: missing argument"
	fi
	if [ -z "${LOCAL_FUNC_IDS[${FUNCNAME[2]}]}" ];then
		die "local_call: local function, '$1' in '${FUNCNAME[2]}]' not defined"
	fi
	local fName=${LOCAL_FUNC_IDS[${FUNCNAME[2]}]}_$1
	shift
	$fName $@
}


function revParenths(){
	for ((i=0; i<${#1}; i++)); do
		local c="${1:$i:1}"
		case "$c" in
			"[")
				echo -n ']'
				;;
			']')
				echo -n '['
				;;
			'(')
				echo -n ')'
				;;
			')')
				echo -n '('
				;;
			'{')
				echo -n '}'
				;;
			'}')
				echo -n '{'
				;;
			'<')
				echo -n '>'
				;;
			'>')
				echo -n '<'
				;;
			*)
				echo -n $c
				;;
		esac
	done
}


function join(){
	local sep=$1
	local i
	shift
	local ret=$1
	shift
	for i in "$@";do
		ret="$ret$sep$i"
	done
	echo -n $ret
}


function joinopt(){
	local opt=$1
	shift
	local sep=$1
	local i
	shift
	local ret=$1
	shift
	for i in "$@";do
		ret="$ret$sep$i"
	done
	if [ -n "$ret" ];then
		ret="$opt$ret"
	fi
	echo -n $ret
}


function joinq(){
	local sep=$1
	local i
	shift
	local quot=$1
	local rquot=$(revParenths "$1")
	shift
	local ret=$quot$1$rquot
	shift
	for i in "$@";do
		ret="$ret$sep$quot$i$rquot"
	done
	echo -n $ret
}


function detect(){
	local i
	eval '
		for i in "${'$1'[@]}"; do
			if [ "$i" = "'$2'" ]; then
				return 0
			fi
		done
	'
	return 1
}


function detect_if(){
	eval '
		for '$2' in "${'$1'[@]}"; do
			if '$3'; then
				return 0
			fi
		done
		'$2'=""
	'
	return 1
}


SOURCES_LOADED=()
declare -A FUNC_SOURCE

require(){
	local requireFunc
	local requireSource
	local PATH="./:$PATH"
	local to_load
	while (( "$#" )); do
		case "$1" in
			"-f")
				requireFunc=1
				;;
			"-s")
				requireSource=1
				;;
			*)
				if [ -n "$requireFunc" ];then
					if declare -F "${1#**/}" > /dev/null ;then
						return 0
					fi
				fi
				if [ "${1:0:1}" != "/" ];then
					local parr
					split parr "$PATH" :
					local p
					if detect_if parr p '[ -e "$p/'$1'" ]';then
						to_load="$p/$1"
					else
						dbv $1
						dbv ${SOURCES_LOADED[@]}
						if ! detect_if SOURCES_LOADED s '[ "${s##*/}" = '$1' ]';then
							die "'$1' not found in PATH"
						else
							return 0
						fi
					fi
				else
					to_load="$1"
				fi
				to_load="$(readlink -f "$to_load")"
				if [ -n "$requireSource" ];then
					emerge_file_content "$to_load"
				fi
				if detect SOURCES_LOADED "$to_load";then
					return 0
				fi
				SOURCES_LOADED+=("$to_load")
				local funcs="$(declare -F)"
				if ! source "$to_load";then
					die "require '$1', failed"
				fi
				local f
				for f in `(echo -E "$funcs"; declare -F) | sort | uniq -u | awk '{print $3}'`; do
					FUNC_SOURCE["$f"]="$to_load"
				done
				if [ -n "$requireFunc" ];then
					if ! declare -F "${1#**/}" > /dev/null ;then
						die "function '$1', not found in any files of (\$PATH)/$1."
					fi
				fi
				;;
		esac
		shift
	done
}


cleanup (){
	if [ -n "$DEBUG" ];then
		local tmp_files=`ls -A $SCRIPT_TMP_DIR`
		if [ -n "$tmp_files" ];then
			deb "ls -A $SCRIPT_TMP_DIR = $tmp_files"
		fi
	fi
	if [ -z "$DEBUG" ];then
		rm_all $SCRIPT_TMP_DIR
		local k
		for k in "${SSH_PARAM_LIST[@]}"; do
			if [ -n "$k" ];then
				ssh "${SSH_PARAM_LIST[$k]}" <<END
					rm_all $SCRIPT_TMP_DIR
END
			fi
		done
	fi
	if [[ "$DEBUG" =~ erase|ERASE|delete|DELETE ]];then
		rm_all /tmp/yougain/${0##*/}
		for k in "${SSH_PARAM_LIST[@]}"; do
			if [ -n "$k" ];then
				ssh "${SSH_PARAM_LIST[$k]}" <<END
					rm_all $SCRIPT_TMP_DIR/..
END
			fi
		done
	fi
}

trap_int(){
	echo
	warn "interrupted."
	exit 1
}

trap cleanup EXIT
trap trap_int INT

function ask_yes_no {
	local ANS
	while true; do
		read ANS
		case $ANS in
			[Yy]*)
				return 0
				;;  
			[Nn]*)
				return 1
				;;
			*)
				;;
		esac
	done
}


else
	if [ -n "$DEBUG" ];then
		echo "support lib already initialized ..."
		declare -p SSH_PARAM_LIST
	fi


fi

dbv ${BASH_SOURCE[@]}
dbv `declare -p SSH_PARAM_LIST`

if [ "`readlink -f ${BASH_SOURCE[$((${#BASH_SOURCE[@]} - 1))]}`" = "$(__FILE_PATH__)" ];then
	if [ "$(__FILE_NAME__)" = "$(__CMD_NAME__)" ];then
		if [[ "$1" =~ / ]]; then # with path
			"$@"
		else
			if ! declare -F "$1" >/dev/null; then
				require "$1"
			fi
			"$@"
		fi
	else
		if ! declare -F "$(__CMD_NAME__)" >/dev/null; then
			require "$(__CMD_NAME__)"
		fi
		"$(__CMD_NAME__)" "$@"
	fi
fi


