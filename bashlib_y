#!/bin/bash


__FILE__() {
	readlink -f "${BASH_SOURCE[1]}"
}


__FILE_PATH__(){
	realpath "${BASH_SOURCE[1]}"
}


__FILE_NAME__(){
	local f="`__FILE__`"
	echo "${f##*/}"
}


__CMD_PATH__(){
	realpath $0
}


__CMD_NAME__(){
	echo "${0##*/}"
}


__DIR__() {
	dirname "$(realpath "${BASH_SOURCE[1]}")"
}


function split(){
	local IFS="$3"
	eval "$1=(\$2)"
}



initialize_support_lib(){

	if [ -z "$SCRIPT_TMP_DIR" ];then
		declare -A SSH_PARAM_LIST
		local f="`__FILE_NAME__`"
		mkdir -p --mode=0777 /tmp/$f
		SCRIPT_TMP_DIR=/tmp/$f/${0##*/}/`date +"%y-%m-%d_%H:%M:%S.%N%z"`-$$
		mkdir -p $SCRIPT_TMP_DIR
		if [ -n "$SUDO_USER" ];then
			chown -R "$SUDO_USER" $SCRIPT_TMP_DIR
		fi
		local lnk=$SCRIPT_TMP_DIR/../latest
		if [ -n "$DEBUG" ];then
			echo -e "\033[42m\033[34mDEBUG :\033[m \033[32m"\$SCRIPT_TMP_DIR = $SCRIPT_TMP_DIR"\033[m"
		fi
		rm -f $lnk
		if [ -n "$DEBUG" ];then
			ln -s $SCRIPT_TMP_DIR $lnk
			if [ -n "$SUDO_USER" ];then
				chown "$SUDO_USER" $lnk
			fi
		fi
		SCRIPT_ID=$RANDOM$RANDOM$RANDOM
		SUPPORT_LIB_CONTENT="`cat $(__FILE__)`"
		SUPPORT_LIB_MTIME="`stat $(__FILE__) -c %Y`"
		SUPPORT_LIB_NAME=$f
		SOURCES_LOADED=()
		return 0
	else
	
		return 1
	fi
}

if initialize_support_lib; then

declare -A LOCAL_FUNCS
declare -A SCRIPT_FILES


dbv(){
	if [ -n "$DEBUG" ];then
		local frame=(`caller 0`)
		local f="${frame[2]}"
		local lno="${frame[0]}"
		local ln
		local sid
		if [ -e "$f" ];then
			if [ -z "${SCRIPT_FILES[$f]}" ];then
				sid=SCRIPT_FILE_$RANDOM$RANDOM$RANDOM
				SCRIPT_FILES[$f]=$sid
				eval "
					$sid=()
					while read ln;do
						$sid+=(\"\$ln\")
					done < $f
				"
			else
				sid=${SCRIPT_FILES[$f]}
			fi
			ln="`eval 'echo -E ${'"$sid"'['"$((lno - 1))"']}'`"
			deb ${f##*/}:$lno "'$yellow"${ln#*dbv }"$green'" = "'$cyan"$@"$green'"
		else
			deb ${f##*/}:$lno $cyan$@
		fi
	fi
}


rm_all(){
	local d
	local dlen
	if [ -d $1 -a ! -L $1 ];then
		d=$(realpath $1)
		if [ "$d" = "/" ];then
			die "cannot use rm_all to '/'"
		fi
		dlen=${#d}
		dlen=$((dlen + 1))
		cat /proc/mounts|awk '{print $3}'| sed '1!G;h;$!d' |while read ln;do
			if [ "${ln:0:$dlen}" = "$d/" ];then
				if !umount $ln;then
					die "cannot unmount '$ln'"
				fi
			fi
		done
		rm --one-file-system -rf $d
	else
		rm $1
	fi
}


chain_bak(){
	local argv=()
	local diff
	local help
	local cyclic
	local cyclicPreserved
	local verbose
	local dryrun
	local theFirst
	local force
	local reverse

	dbv "$@"
	while (( "$#" )); do
		if [ "${1:0:1}" = "-" ];then
			if [ "${1:0:2}" = "--" ];then
				case "$1" in
					"--diff")
						diff=1
						;;
					"--help")
						help=1
						;;
					"--exchange")
						cyclic=1
						;;
					"--cyclic")
						cyclic=1
						;;
					"--reverse")
						reverse=1
						;;
					"--force")
						force="-f"
						;;
					*)
						die "not supported option '$1'"
						;;
				esac
			else
				local i
				for (( i=1; i<${#1}; i++ )); do
					local o="${1:$i:1}"
					case "$o" in
						"v")
							verbose="-v"
							;;
						"d")
							diff=1
							;;
						"?")
							help=1
							;;
						"x")
							cyclic=1
							;;
						"r")
							reverse=1
							;;
						"f")
							force="-f"
						;;
						*)
							die "not supported option -'$o'"
							;;
					esac
				done
			fi
		else
			argv+=("$1")
		fi
		shift
	done
	dbv "${argv[@]}"
	local targv=()
	if [ -n "$reverse" ];then
		for ((i = ${#argv[@]} - 1; i >= 0; i--)); do
			a=${argv[$i]}
			dbv $a
			targv+=("$a")
		done
		dbv "${targv[@]}"
		argv=("${targv[@]}")
	fi
	dbv "${argv[@]}"
	
	if [ -n "$help" ];then
		echo "usage: chain_bak [options] SOURCE DEST [ DEST2 DEST3 ... ]
  SOURCE                      : source file name
  DEST(s)                     : destination file name
  (options)
     -d, --diff               : Check difference between SOURCE and DEST
     -f, --force              : Remove file(s) with same content (sould be accompanied by '-d' option)
     -x, --exchange, --cyclic : Exchange name cyclically
     -v, --verbose            : Verbose output
     -r, --reverse            : Reverse all action
     -?, --help               : Show this help messages"
		exit 0
	fi
	if [ -n "$DEBUG" ];then
		verbose="-v"
	fi
	if [ -n "$force" ];then
		if [ -z "$diff" ];then
			force=
		fi
	fi
	
	function _mv_it(){
		dbv /bin/mv $verbose "$@"
		/bin/mv $verbose "$@"
	}
	function _check_identity(){
		if [ "$1" = "$2" ];then
			err "source argument '$1' and destination argument '$2' is same"
			return 1
		fi
		if [ -e "$2" ];then
			local L1="`readlink -f "$1"`"
			local L2="`readlink -f "$2"`"
			if [ -z "$L1" -o -z "$L2" ];then
				return 0
			fi
			if [ "$L1" = "$L2" ];then
				err "source argument '$1' and destination argument '$2' is an identical file, '$L1'"
				return 1
			else
				if [ "`stat -c "%D:%d:%i" "$L1"`" = "`stat -c "%D:%d:%i" "$L2"`" ];then
					err "source argument '$1' and destination argument '$2' is identical file"
					return 1
				fi
			fi
			if [ -n "$diff" ];then
				if [ -f "$1" -a -f "$2" ]; then
					if diff "$1" "$2" >/dev/null; then
						if [ ! -n "$force" ];then
							err "No difference between '$1' '$2'. Stop operation."
							info "You can use force option (-f) to overcome this limitation by deleting '$2'"
							return 1
						else
							info "No difference between '$1' '$2'."
							return 0
						fi
					fi
				fi
			fi
		fi
		return 0
	}

	function _chain_bak(){
		local beyondCenter
		local f
		if [ "$1" = "-" ];then
			beyondCenter=1
			shift
			f="$1"
		else
			if [ "$2" = "-" ];then
				beyondCenter=1
				f="$1"
				shift
			else
				f="$1" # first argument
			fi
		fi
		shift
		if [ ! -e "$f" ];then
			errmsg "File, '$f' does not exist"
			return 1
		else
			if [ "$#" = 0 ];then # only one argument
				local theme
				local center
				local startFile=$f
				if [[ "$f" =~ ^(.*)\.((-|)[0-9]+)$ ]];then
					theme=${BASH_REMATCH[1]}
					center=${BASH_REMATCH[2]}
				else
					theme=$f
					center=0
				fi
				dbv $theme
				dbv $center
				_chain_bak_find_max $center
				dbv $max
				if [ -n "$beyondCenter" ];then
					dbv $beyondCenter
					_chain_bak_find_min $center
					dbv $min
					dbv $theme
					if ! _chain_bak2 $min; then
						return 1
					fi
				else
					dbv $max
					if ! _chain_bak2 $center; then
						return 1
					fi
				fi
			else
				if [ -n "$beyondCenter" ];then
					die "Argument error. '-' with over-two arguments."
				fi
				if ! _check_identity "$f" "$1"; then
					return 1
				fi
				if [ -n "$2" ];then
					if ! _chain_bak "$@"; then
						return 1
					fi
				else
					if [ -n "$cyclic" ];then
						if ! _check_identity "$f" "$1"; then
							return 1
						fi
						cyclicPreserved="$1.$RANDOM$RANDOM$RANDOM"
						if ! _mv_it "$1" "$cyclicPreserved"; then
							return 1
						fi
					fi
				fi
				if ! _mv_it $force "$f" "$1"; then
					return 1
				fi
			fi
		fi
		return 0
	}
	
	
	function _chain_bak2(){
		local num="$1"
		local f0
		local f1
		local isMax
		dbv $num, $center
		dbv $startFile
		dbv $theme
		f0="$(_chain_bak_set_file $num)"
		f1="$(_chain_bak_set_file $((num + 1)))"
		dbv $f0, $f1
		if [ "$((num + 1))" != "$((max + 1))" ];then
			if ! _check_identity "$f0" "$f1"; then
				return 1
			fi
			if ! _chain_bak2 "$((num + 1))"; then
				return 1
			fi
		fi
		dbv $f0, $f1
		if ! _mv_it $force "$f0" "$f1"; then
			return 1
		fi
	}

	function _chain_bak_find_max(){
		local n=$(($1 + 1))
		local t
		if [ $n = 0 ];then
			t="$theme"
		else
			t="$theme.$n"
		fi
		if [ ! -e "$t" ];then
			max=$1
		else
			_chain_bak_find_max $n
		fi
	}

	function _chain_bak_find_min(){
		local n=$(($1 - 1))
		local t
		if [ $n = 0 ];then
			t="$theme"
		else
			t="$theme.$n"
		fi
		if [ ! -e "$t" ];then
			min=$1
		else
			_chain_bak_find_min $n
		fi
	}

	function _chain_bak_reverse(){
		dbv "$@"
		local beyondCenter
		if [ "$1" = "-" ];then
			beyondCenter=1
			shift
		else
			if [ "$2" = "-" ];then
				beyondCenter=1
			fi
		fi
		local theme
		local center
		if [[ "$1" =~ ^(.*)\.((-|)([0-9]+))$ ]];then
			theme=${BASH_REMATCH[1]}
			center=${BASH_REMATCH[2]}
		else
			theme=$1
			center=0
		fi
		local max
		local min
		_chain_bak_find_max "$center"
		if [ -n "$beyondCenter" ];then
			_chain_bak_find_min "$center"
		else
			min=$center
		fi
		dbv $1
		dbv $theme
		dbv $center
		dbv $max
		dbv $min
		local startFile=$1
		_chain_bak_reverse2 $max
	}
	
	function _chain_bak_set_file(){
		case $1 in
			$center)
				echo "$startFile"
				;;
			0)
				echo "$theme"
				;;
			*)
				echo "$theme.$1"
				;;
		esac
	}
	
	function _chain_bak_reverse2(){
		local num="$1"
		local f0
		local f1
		local isMin
		f1="$(_chain_bak_set_file $((num - 1)))"
		f0="$(_chain_bak_set_file $num)"
		dbv $f0 $((num - 1))
		dbv $f1 $num
		if [ "$((num - 1))" != "$((min - 1))" ];then
			if ! _check_identity "$f0" "$f1"; then
				return 1
			fi
			if ! _chain_bak_reverse2 "$((num - 1))"; then
				return 1
			fi
		fi
		if ! _mv_it $force "$f0" "$f1"; then
			return 1
		fi
	}


	if [ ${#argv[@]} -ge 2 ]; then
		theFirst="${argv[0]}"
		if _chain_bak "${argv[@]}"; then
			if [ -n "$cyclicPreserved" ];then
				_mv_it "$cyclicPreserved" "$theFirst"
			else
				_chain_bak_reverse "${argv[0]}"
			fi
		fi
	else
		dbv "${#argv[@]}"
		dbv "$@"
		if [ ! -e "${argv[0]}" ];then
			errmsg "'${argv[0]}' does not exist."
			return 1
		fi
		if [ -z "$reverse" ];then
			_chain_bak - "${argv[0]}"
		else
			_chain_bak_reverse - "${argv[0]}"
		fi
	fi
}



function local_fun(){
	if [ "$#" = 0 ];then
		die "local_def: missing argument"
	fi
	if [ -z "${LOCAL_FUNC_IDS[${FUNCNAME[2]}]}" ];then
		LOCAL_FUNC_IDS[${FUNCNAME[2]}]=${FUNCNAME[2]}_$RANDOM$RANDOM$RANDOM
	fi
	local fName=${LOCAL_FUNC_IDS[${FUNCNAME[2]}]}$1
	shift
	if [ -z "${LOCAL_FUNC_EACH[$fName]}" ] ;then
		LOCAL_FUNC_EACH[$fName]=1
		eval 'function '$fName'(){
			$(while read -j ln;do
				echo -E $ln
			done)
		}'
	fi
}


function local_call(){
	if [ "$#" = 0 ];then
		die "local_call: missing argument"
	fi
	if [ -z "${LOCAL_FUNC_IDS[${FUNCNAME[2]}]}" ];then
		die "local_call: local function, '$1' in '${FUNCNAME[2]}]' not defined"
	fi
	local fName=${LOCAL_FUNC_IDS[${FUNCNAME[2]}]}$1
	shift
	$fName "$@"
}


function revParenths(){
	for ((i=0; i<${#1}; i++)); do
		local c="${1:$i:1}"
		case "$c" in
			"[")
				echo -n ']'
				;;
			']')
				echo -n '['
				;;
			'(')
				echo -n ')'
				;;
			')')
				echo -n '('
				;;
			'{')
				echo -n '}'
				;;
			'}')
				echo -n '{'
				;;
			'<')
				echo -n '>'
				;;
			'>')
				echo -n '<'
				;;
			*)
				echo -n $c
				;;
		esac
	done
}


function join(){
	local sep=$1
	local i
	shift
	local ret=$1
	shift
	for i in "$@";do
		ret="$ret$sep$i"
	done
	echo -n $ret
}


function joinopt(){
	local opt=$1
	shift
	local sep=$1
	local i
	shift
	local ret=$1
	shift
	for i in "$@";do
		ret="$ret$sep$i"
	done
	if [ -n "$ret" ];then
		ret="$opt$ret"
	fi
	echo -n $ret
}


function joinq(){
	local sep=$1
	local i
	shift
	local quot=$1
	local rquot=$(revParenths "$1")
	shift
	local ret=$quot$1$rquot
	shift
	for i in "$@";do
		ret="$ret$sep$quot$i$rquot"
	done
	echo -n $ret
}


function detect(){
	local i
	eval '
		for i in "${'$1'[@]}"; do
			if [ "$i" = "'$2'" ]; then
				return 0
			fi
		done
	'
	return 1
}


function detect_if(){
	eval '
		for '$2' in "${'$1'[@]}"; do
			if '$3'; then
				return 0
			fi
		done
		'$2'=""
	'
	return 1
}


SOURCES_LOADED=()

require(){
	local requireFunc
	if [ "$1" = "-f" ];then
		requireFunc=1
		shift
		if declare -f "${1#**/}" > /dev/null ;then
			return 0
		fi
	fi
	local PATH=./:$PATH
	local to_load
	if [ "${1:0:1}" != "/" ];then
		local parr
		split parr "$PATH" :
		local p
		if detect_if parr p '[ -e "$p/'$1'" ]';then
			to_load="$p/$1"
		else
			die "'$1' not found in PATH"
		fi
	else
		to_load="$1"
	fi
	to_load="$(readlink -f "$to_load")"
	if detect SOURCES_LOADED "$to_load";then
		return 1
	fi
	SOURCES_LOADED+="$to_load"
	if ! source "$to_load";then
		die "require '$1', failed"
	fi
	if [ -n "$requireFunc" ];then
		if ! declare -f "${1#**/}" > /dev/null ;then
			die "function '$1', not found in any files of (\$PATH)/$1."
		fi
	fi
}


cleanup (){
	if [ -n "$DEBUG" ];then
		local tmp_files=`ls -A $SCRIPT_TMP_DIR`
		if [ -n "$tmp_files" ];then
			deb "ls -A $SCRIPT_TMP_DIR = $tmp_files"
		fi
	fi
	if [ -z "$DEBUG" ];then
		rm_all $SCRIPT_TMP_DIR
		local k
		for k in "${SSH_PARAM_LIST[@]}"; do
			ssh "${SSH_PARAM_LIST[$k]}" <<END
				rm_all $SCRIPT_TMP_DIR
END
		done
	fi
	if [[ "$DEBUG" =~ erase|ERASE|delete|DELETE ]];then
		rm_all /tmp/yougain/${0##*/}
		for k in "${SSH_PARAM_LIST[@]}"; do
			ssh "${SSH_PARAM_LIST[$k]}" <<END
				rm_all $SCRIPT_TMP_DIR/..
END
		done
	fi
}

trap_int(){
	echo
	warn "interrupted."
	exit 1
}

trap cleanup EXIT
trap trap_int INT

error="\033[41m\033[33mERROR    :\033[m \033[31m"
warning="\033[43m\033[31mWARNING:\033[m \033[33m"
info="\033[46m\033[34mINFO     :\033[m \033[36m"
debug="\033[42m\033[34mDEBUG     :\033[m \033[32m"
plain="\033[m"
normal="\033[m"

_black="0"
_red="1"
_green="2"
_yellow="3"
_blue="4"
_purple="5"
_magenta="5"
_cyan="6"
_white="7"


allColors="black red green yellow blue purple magenta cyan white"

function capitalize(){
	local B
	local F
	B=`echo -n "${1:0:1}" | tr "[:lower:]" "[:upper:]"`
	F="${B}${1:1}"
	shift
	echo -n $F $@
}

function errmsg_n(){
	echo -en $error"$@"$plain >&2
}


function errmsg(){
	errmsg_n "$@"
	if [ -n "$ERRMSG" ];then
		ERRMSG="$ERRMSG"'
'"$@"
	else
		ERRMSG="$@"
	fi
	echo -ne "\n" >&2
}


alias err=errmsg
alias error=errmsg


function info_n(){
	echo -ne $info$@$plain >&2
}
function info(){
	info_n $@
	echo -ne "\n" >&2
}


function warning_n(){
	echo -ne "$warning""$@"  >&2
}
function warning(){
	warning_n "$@"
	echo -ne "\n" >&2
}

function warn(){
	warning_n "$@"
	echo -ne "\n" >&2
}

alias warn_n=warning_n


function deb(){
	if [ -n "$DEBUG" ];then
		echo -e $debug$@$plain >&2
	fi
}
alias debug=deb


for col in `echo $allColors`; do
	eval '
		'$col'="\033[3$'_$col'""m"
		function '$col'_n(){
			echo -ne "\033[3$'_$col'""m''$@''$plain"
		}
		function '$col'(){
			'$col'_n $@"\n"
		}
		function bg'`capitalize $col`'_n(){
			echo -ne "\033[4$'_$col'""m''$@''$plain"
		}
		function bg'`capitalize $col`'(){
			bg'`capitalize $col`'_n $@"\n"
		}
	'
	for bgCol in $allColors; do
		eval '
			function '$col'Bg'`capitalize $bgCol`'_n(){
				echo -ne "\033[3$'_$col'""m\033[4$'_$bgCol'""m''$@''$plain"
			}
			function '$col'Bg'`capitalize $bgCol`'(){
				'$col'Bg'`capitalize $bgCol`'_n $@
			}
		'
	done
done


function exit_if_err(){
	errmsg "$@"
	if [ -n "$ERRMSG" ];then
		exit 1
	fi
}

function die(){
	if [ -n "$1" ]; then
		errmsg $@
	fi
	exit 1
}


function ssh_param(){
	local p
	local h
	local port
	local host
	local opt_start
	SSH_OPTS=()
	while (( "$#" )); do
		if [ "${1:0:1}" = "-" ];then
			SSH_OPTS=("$@")
			break
		else
			h="${1%%:*}"
			p="${1##*:}"
			if [ "$h" = "$1" ];then # ':' is missing
				if [ -n "`echo -n $1|egrep -o '^[0-9][0-9]*$'`" ];then
					if [ -n "$port" ];then
						die "duplicated port"
					else
						port=$p
					fi
				else
					if [ -n "$host" ];then
						die "duplicated host name, '$1' amd '$host'"
					else
						host=$h
					fi
				fi
			else
				if [ -n "$port" ];then
					die "duplicated port"
				else
					port=$p
				fi
				if [ -n "$host" ];then
					die "duplicated host name"
				else
					host=$h
				fi
			fi
		fi
		shift
	done
	local o
	local on
	for o in ${SSH_OPTS[@]};do
		if [ "$o" = "-l" ]; then
			on=1
		else
			if [ -n "$on" ]; then
				SSH_USER=$o
				break
			fi
		fi
	done
	SSH_HOST=$host
	if [[ "$host" =~ ^(.*)@(.*)$ ]];then
		SSH_USER=${BASH_REMATCH[1]}
	fi
	SSH_SUDO_PREFIX=
	SSH_CMD=ssh
	if [ -z "$SSH_USER" ];then
		if [ -n "$SUDO_USER" ];then
			SSH_USER=$SUDO_USER
			SSH_CMD="sudo -u $SUDO_USER ssh"
		else
			SSH_USER=$USER
		fi
		if [ -z "$SSH_USER" ];then
			die "cannot find \$USER"
		fi
	fi
	if [ -n "$port" ];then
		port=" -p $port"
	fi
	deb $SSH_CMD "${SSH_OPTS[@]}" $port -v -o "ConnectTimeout=5"  -o "PasswordAuthentication no" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" $host
	$SSH_CMD "${SSH_OPTS[@]}" $port -v -o "ConnectTimeout=5"  -o "PasswordAuthentication no" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" $host echo -n > $SCRIPT_TMP_DIR/test_ssh 2>&1
	if [ -z "`egrep 'debug1: Executing proxy command:' $SCRIPT_TMP_DIR/test_ssh`" ]; then
		local SSH_CON_LINE=`egrep -o 'debug1: Connecting to .* port [0-9]+' $SCRIPT_TMP_DIR/test_ssh`
		SSH_PORT=`echo $SSH_CON_LINE| egrep -o '[0-9]+$'`
		SSH_PORT_OPT=" -p $SSH_PORT"
		SSH_HOST_IP=`echo $SSH_CON_LINE| egrep -o '\[[0-9/A-Fa-f\.:]+\]'| egrep -o [0-9/A-Fa-f\.:]+`
	else
		local pc=`egrep "debug1: channel_connect_stdio_fwd " $SCRIPT_TMP_DIR/test_ssh`
		if [ -n "$pc" ];then
			pc=${pc%\\r}
			local adr=${pc#debug1: channel_connect_stdio_fwd }
			adr=${adr%[[:space:]]}
			adr=${adr%[[:space:]]}
			adr=${adr%[[:space:]]}
			SSH_PORT=${adr##*:}
			SSH_HOST_IP=${adr%:*}
			SSH_PORT_OPT=" -p $SSH_PORT"
			SSH_PROXY=1
		fi
	fi
	deb $SSH_PORT
	if [ -n "$SSH_PORT" ];then
		return 0
	fi
	
	return 1
}


function wait_sshd_start(){
	if [ -z "$SSH_PORT" -o -z "$SSH_HOST" ];then
		die "missing ssh paramter variables. Please execute 'ssh_param SERVER_NAME' first."
	fi
	local SSH_CON_
	info_n connecting SSH...
	for i in $(seq 1 120); do
		sleep 1
		blue_n "."
		if [ -z "$SSH_PROXY" ];then
			SSH_CON_=`echo | nc $SSH_HOST_IP $SSH_PORT 2>&1`
			if [ "${SSH_CON_:0:3}" = "SSH" ];then
				cyanBgBlue connected
				return
			fi
		else
			echo ssh $SSH_OPTS $port -v -o \"ConnectTimeout=5\"  -o \"PasswordAuthentication no\" -o \"StrictHostKeyChecking no\" -o \"UserKnownHostsFile /dev/null\" $SSH_HOST echo -n|"$SSH_SUDO_PREFIX"bash > $SCRIPT_TMP_DIR/test_ssh 2>&1
			if [ `grep 'debug1: Remote protocol version 2.0, remote software version OpenSSH' $SCRIPT_TMP_DIR/test_ssh|wc|awk '{print $1}'` = "2" ];then
				cyanBgBlue connected
				return
			fi
		fi
	done
	echo
	die Tried 120 times. Still cannot connect SSH port "($SSH_PORT)". Exited.
}


function transfer_arguments(){
	local i
	local j=-1
	while IFS= read -r -d $'\0' i; do
	    if [ $j != "-1" ];then
	    	TRANSFER_ARGUMENTS="$TRANSFER_ARGUMENTS$1$j='$i'"$'\n'
	    fi
	    j=$(( j + 1 ))
	done < <(cat /proc/$$/cmdline)
}

transfer_arguments A



function col_width(){
	if [ -z "$TAB_STOP" ];then
		TAB_STOP=4
	fi
	local i=0
	local len=${#1}
	local pos=0
	while [ $i -lt $len ];do
		case "${1:$i:1}" in
			"	")
				pos=$((pos + TAB_STOP - pos % TAB_STOP))
				;;
			*)
				pos=$((pos + 1))
				;;
		esac
		i=$((i + 1))
	done
	echo $pos
}

function putsp(){
	if [ -z "$TAB_STOP" ];then
		TAB_STOP=4
	fi
	local w=$1
	local t=$((w / TAB_STOP))
	local s=$((w % TAB_STOP))
	local i
	for ((i = 0; i < t; i++)); do
		echo -n "\t"
	done
	for ((i = 0; i < t; i++)); do
		echo -n " "
	done
}

function trim_indent(){
	if [ -z "$TAB_STOP" ];then
		local TAB_STOP=4
	fi
	if [ "$#" = 0 ];then
		local fc
		local ln
		local sp
		local res
		local IFS=""
		local preLns=()
		local preLn
		while read -r ln; do
			local lnx="$ln"
			sp=${lnx%%[![:space:]]*}
			if [ -z "$fc" ];then
				res="${ln#$sp}"
				if [ -n "$res" -a "${res:0:1}" != "#" ];then
					fc=`col_width "$sp"`
					for preLn in "${preLns[@]}";do
						trim_indent  "$preLn" "$fc"
					done
					echo -E "$res"
				else
					preLns+=("$ln")
				fi
			else
				trim_indent "$ln" "$fc"
			fi
		done
	else
		local pos=0
		local i=0
		local len=${#1}
		while [ $i -lt $len ];do
			case "${1:$i:1}" in
				"	")
					pos=$((pos + TAB_STOP - pos % TAB_STOP))
					;;
				" ")
					pos=$((pos + 1))
					;;
				*)
					echo -E "${1:$i}"
					return
					;;
			esac
			if [ $pos -ge $fc ];then
				putsp $((pos - fc))
				echo -E "${1:$i + 1}"
				return
			fi
			i=$((i + 1))
		done
		putsp $pos
		echo
	fi
}


function ssh_do(){
	local sudoing
	if [ "$1" = "sudo" ];then
		sudoing=sudo
		shift
	fi
	if [ -z "$SSH_PORT" -o -z "$SSH_HOST" ];then
		die "missing ssh paramter variables. Please execute 'ssh_param SERVER_NAME' first."
	fi
	SSH_TMP=1
	if [ -z "$SSH_TMP_SUDO" ];then
		SSH_TMP_SUDO=$sudoing
	fi
	local SSH_ID=$RANDOM$RANDOM$RANDOM
	mkdir -p $SCRIPT_TMP_DIR/$SSH_ID
	if [ -n "$SUDO_USER" ];then
		chown $SUDO_USER:$SUDO_USER $SCRIPT_TMP_DIR/$SSH_ID
	fi
	local CMD=($SSH_CMD $SSH_PORT_OPT "${SSH_OPTS[@]}" $SSH_HOST $sudoing)
	deb "${CMD[@]}"
	if [ "$#" = "0" ];then
		SSH_PARAM_LIST["$SSH_HOST $SSH_PORT_OPT"]=($SSH_PORT_OPT "${SSH_PORT_OPT[@]}" $SSH_HOST)
		local set_env_lines="set | awk '!/^(SSH_PARAM_LIST|SUDO_USER|BASH_ARGV|BASH_ARGC|BASH_LINENO|BASH_SOURCE|GROUPS|FUNCNAME|BASHOPTS|BASH_VERSINFO|EUID|PPID|SHELLOPTS|UID)=/ {print \$0}'"
		local SET_ENV_LINES="`eval $set_env_lines`"
		local trans_started
		# preserve host environment
		(
			local ln
			write_env_file << '			__INNER'
				#!/bin/bash

				mkdir -p $SCRIPT_TMP_DIR/$SSH_ID
				mkdir -p --mode=0777 $SCRIPT_TMP_DIR/../..
				if [ -n "$SUDO_USER" ];then
					chown -R "$SUDO_USER" $SCRIPT_TMP_DIR
				fi
				rm -f $SCRIPT_TMP_DIR/../latest
				if [ -n "$DEBUG" ];then
					ln -s $SCRIPT_TMP_DIR $SCRIPT_TMP_DIR/../latest
					if [ -n "$SUDO_USER" ];then
						chown "$SUDO_USER" $SCRIPT_TMP_DIR/../latest
					fi
				fi
				
				$set_env_lines > $SCRIPT_TMP_DIR/$SSH_ID/env
				
				# set client environment
				if [ ! -e $SCRIPT_TMP_DIR/$SSH_ID/env.cont ];then # missing previous host environment 
					# set client command line argument
					$TRANSFER_ARGUMENTS
					$SET_ENV_LINES
				else # found previous host environment 
					source $SCRIPT_TMP_DIR/$SSH_ID/env.cont
					rm $SCRIPT_TMP_DIR/$SSH_ID/env.cont
				fi
				
				# restore host environment
				source $SCRIPT_TMP_DIR/$SSH_ID/env;
				if [ -z "$DEBUG" ]; then
					rm $SCRIPT_TMP_DIR/$SSH_ID/env
				fi
				# execute script from standard input
				set_diff_begin
				# preserve environment after script execution
				function transfer_new_env$SCRIPT_ID(){
					echo
					set_diff_end
					cat $SCRIPT_TMP_DIR/$SSH_ID/env.diff
					$set_env_lines > $SCRIPT_TMP_DIR/$SSH_ID/env.cont
					unset -f transfer_new_env$SCRIPT_ID
				}
				function int_exit(){
					exit 1
				}
				trap transfer_new_env$SCRIPT_ID EXIT
				trap int_exit INT HUP
				cat <<'__DO_CONTENT' > $SCRIPT_TMP_DIR/$SSH_ID/do_content
			__INNER
			trim_indent
			write_env_file << '			__INNER'
				__DO_CONTENT
				source $SCRIPT_TMP_DIR/$SSH_ID/do_content
			__INNER
		) | "${CMD[@]}" "$@" | while read -j ln; do
			if [ -z "$trans_started"]; then
				if [ "$ln" = "__TRANS_ENV_$SCRIPT_ID$SSH_ID" ];then
					trans_started=1
				else
					echo -j $ln
				fi
			else
				echo -j $ln >> $SCRIPT_TMP_DIR/$SSH_ID/remote_env.diff
			fi
		done
		local res=$?
		if [ -n "$DEBUG" ];then
			deb "transfer env ----"
			cat $SCRIPT_TMP_DIR/$SSH_ID/remote_env.diff >&2
			deb "-----------------"
		fi
		. $SCRIPT_TMP_DIR/$SSH_ID/remote_env.diff
		return $res
	else
		#info "$SSH_PORT_OPT $SSH_OPTS $SSH_HOST $sudoing $@"
		"${CMD[@]}" $@
	fi
}

function ssh_i(){
	if [ -z "$SSH_PORT" -o -z "$SSH_HOST" ];then
		die "missing ssh paramter variables. Please execute 'ssh_param SERVER_NAME' first."
	fi
	SSH_TMP=1
	local CMD=($SSH_CMD $SSH_PORT_OPT "${SSH_OPTS[@]}" $SSH_HOST $sudoing)
	"${CMD[@]}"
}

function ssh_sudo(){
	ssh_do sudo $@
}



function install_ssh_key(){
	if [ -z "$KEY" ];then
		KEY=`cat ~/.ssh/id_ed25519.pub 2>/dev/null`
		if [ -z "$KEY" ];then
			die Cannot find public key in ~/.ssh/id_ed25519.pub.
		fi
	fi
	local SET_KEY_CNT=0
	while ! ssh_do echo; do
		if [ "$SET_KEY_CNT" = "5" ]; then
			return 1
		fi
		expect -c "
		set timeout 3
		spawn ssh -p 22 -o \"StrictHostKeyChecking no\" -o \"UserKnownHostsFile /dev/null\" -l rancher $SSH_HOST
		expect \"assword:\"
		send \"rancher\n\"
		expect \"\$ \"
		send \"mkdir ~/.ssh\n\"
		expect \"\$ \"
		send \"chmod 700 ~/.ssh\n\"
		expect \"\$ \"
		send \"echo $KEY >> ~/.ssh/authorized_keys\n\"
		expect \"\$ \"
		send \"exit\"
		"
		sleep 1
		SET_KEY_CNT=$(( SET_KEY_CNT + 1 ))
	done
	return 0
}



function ask_yes_no {
	local ANS
	while true; do
		read ANS
		case $ANS in
			[Yy]*)
				return 0
				;;  
			[Nn]*)
				return 1
				;;
			*)
				;;
		esac
	done
}


function ssh_reboot(){
	ssh_sudo <<'END'
		efi_dev=$(readlink -f /dev/disk/by-uuid/`cat /proc/cmdline|egrep -o "efi=UUID=[0-9a-fA-F-]+"|egrep -o "[0-9a-fA-F-]+$"`|awk 'match($1,/[0-9]+$/){print substr($1,0,length($1)-RLENGTH);}'|awk 'match($1,/^\/dev\//){print substr($1,6,length($1)-5);}')2
		if [ -z "$efi_dev" ]; then die "boot efi device not found."; fi
		mkdir -p $SCRIPT_TMP_DIR/efi_dev
		mount /dev/$efi_dev $SCRIPT_TMP_DIR/efi_dev
		touch $SCRIPT_TMP_DIR/efi_dev/.reboot
		reboot
END
	wait_sshd_start
	echo try ssh connect
	ssh_sudo <<'END'
		efi_dev=$(readlink -f /dev/disk/by-uuid/`cat /proc/cmdline|egrep -o "efi=UUID=[0-9a-fA-F-]+"|egrep -o "[0-9a-fA-F-]+$"`|awk 'match($1,/[0-9]+$/){print substr($1,0,length($1)-RLENGTH);}'|awk 'match($1,/^\/dev\//){print substr($1,6,length($1)-5);}')2
		if [ -z "$efi_dev" ]; then die "boot efi device not found."; fi
		mkdir -p $SCRIPT_TMP_DIR/efi_dev
		mount /dev/$efi_dev $SCRIPT_TMP_DIR/efi_dev
		rm $SCRIPT_TMP_DIR/efi_dev/.reboot
		umount $SCRIPT_TMP_DIR/efi_dev
#		rm -rf $SCRIPT_TMP_DIR/efi_dev
END
}


function write_env_file(){
	local ln
	local first=0
	local envreg
	envreg=`env_defined | while read ln; do
		if [ "$first" = 0 ];then
			echo -n $ln
			first=1
		else
			echo -n '|'$ln
		fi
	done;`
	deb "$envreg"
	local c=$(
		echo -n "'"
#		trim_indent | sed 's/'"'"'/'"'"'"'"'"'"'"'"'/g' | sed -r 's/(^|[^\\])\$('$envreg')([^A-Za-z0-9_]|$)/\1'"'"'"$\2"'"'"'\3/g'
		trim_indent | sed 's/'"'"'/'"'"'"'"'"'"'"'"'/g' | sed -r 's/(^|[^\\])(\$('$envreg')(([^A-Za-z0-9_\\]|)\$('$envreg'))*)([^A-Za-z0-9_]|$)/\1'"'"'"\2"'"'"'\7/g'
		echo -n "'"
	)
	if [ -n "$1" ];then
		eval echo "$c" > $1
	else
		eval echo "$c"
	fi
}


function write_file(){
	local mod
	if [[ $1 =~ ^0[0-9][0-9][0-9]$ ]];then
		mod=$1
		shift
	fi
	local lns="`trim_indent`"
	while (($#));do
		echo "$lns" > $1
		if [ -n "$mod" ];then
			chmod $mod $1
		fi
		shift
	done
}


function transfer_env_for_grub(){
	sed -r 's/\\([\\"])/_\\__\1___/g'|sed -r 's/_\\__"___/"'"'"'"'"'"'"/g'|sed -r 's/_\\__\\___/\\\\/g'
}


function write_grub_script(){
	(set_env ; trim_indent) > $1
}


function write_script(){
	local mod
	if [[ $1 =~ ^0[0-9][0-9][0-9]$ ]]; then
		mod=$1
		shift
	fi
	local first
	local ln
	local lns="$(trim_indent | while read -r ln;do
		echo -E $ln
		if [ -z "$first" ];then
			set_env
			first=1
		fi
	done)"
	while (($#));do
		echo -E "$lns" > $1
		if [ -n "$mod" ];then
			chmod $mod $1
		fi
		shift
	done
}


function env_var(){
	local ln
	declare -p |egrep '^declare -[A-Za-z-]* [A-Za-z_][A-Za-z0-9_]*'| while read ln; do
		ln=${ln#declare -* }
		ln=${ln%%=*}
		tmp="`declare -p $ln 2>/dev/null`"
		if [ "$?" = "0" ];then
			echo $ln
		fi
	done|sort|uniq
}


__ORG_EVAR__="`env_var`"


function get_exported(){
	local ln
	awk 'BEGIN{for (i in ENVIRON) {print i}}' | while read ln; do
		if [ "$ln" != "AWKPATH" ];then
			echo $ln
		fi
	done
}


function env_defined(){
	(echo "`env_var`
__ORG_EVAR__
$__ORG_EVAR__" | sort | uniq -u; get_exported) | sort | uniq
}

function set_env(){
	local ln
	env_defined | while read ln; do
		ln="`declare -p $ln`"
		ln=${ln#declare -* }
		if [[ ${ln} =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]];then
			echo "$ln=''"
		else
			echo "$ln"
		fi
	done
}


function _set_diff_save(){
	echo "$1VNAMES='""`env_defined`""'" >> $2
	local ln
	env_defined | while read ln; do
		local content
		local vname
		ln="`declare -p $ln`"
		ln=${ln#declare -* }
		if [[ ${ln} =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]];then
			content="''"
			vname=${ln}
		else
			content="${ln#*=}"
			vname=${ln%%=*}
		fi
		if [ -n "$vname" ];then
			echo -E "$1EACH_$vname=$content" >> $2
		fi
	done
}


function set_diff_begin(){
	local get_diff=$SCRIPT_TMP_DIR/$SSH_ID/get_diff
	echo "#/bin/bash" >> $get_diff
	chmod +x $get_diff
	_set_diff_save __SET_DIFF_BEGIN_PRESERVE_ $get_diff
}


function set_diff_end(){
	local get_diff=$SCRIPT_TMP_DIR/$SSH_ID/get_diff
	_set_diff_save __SET_DIFF_END_PRESERVE_ $get_diff
	local out
	echo -E '
		echo -n
		echo __TRANS_ENV_$SCRIPT_ID$SSH_ID
		(echo -E "$__SET_DIFF_BEGIN_PRESERVE_VNAMES";
		 echo -E "$__SET_DIFF_END_PRESERVE_VNAMES") | sort | uniq -u | while read vn; do
			if [ -n "$vn" ];then
				[ "$vn" = __diff_id_set_diff_local__ ] && continue
				if declare -p __SET_DIFF_BEGIN_PRESERVE_EACH_$vn > /dev/null 2>&1; then
					echo "unset $vn"
				fi
			fi
		done
		for vn in $__SET_DIFF_END_PRESERVE_VNAMES; do
			if declare -p __SET_DIFF_END_PRESERVE_EACH_$vn > /dev/null 2>&1; then
				[ "$vn" = EPOCHREALTIME ] && continue
				[ "$vn" = EPOCHSECONDS ] && continue
				[ "$vn" = SRANDOM ] && continue
				vname_end=__SET_DIFF_END_PRESERVE_EACH_$vn
				vname_begin=__SET_DIFF_BEGIN_PRESERVE_EACH_$vn
				if [ "`eval \"echo $\"\"$vname_begin\"`" != "`eval \"echo $\"\"$vname_end\"`" ];then
					ln="`declare -p $vname_end`"
					ln=${ln#declare -* }
					if [[ ${ln} =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]];then
						content="''"
					else
						content="${ln#*=}"
					fi
					echo -E "$vn=$content"
				fi
			fi
		done
' >>  $get_diff
	bash -c $get_diff
}



function do_install(){
	local to_inst=$1
	if [ -z "$to_inst" ];then
		die "missing argument"
	fi
	local d
	shift
	local newLns
	function _do_install_each(){
		local d="$1"
		if [ ! -d "$d" ];then
			if [ -e "$d" ];then
				die "'$d' is not a directory."
			else
				if ! mkdir -p "$d";then
					die "cannot create directory, '$d'"
				fi
			fi
		fi
		#echo "[ ! -e $d/$SUPPORT_LIB_NAME -o `stat $d/$SUPPORT_LIB_NAME -c %Y` -lt $SUPPORT_LIB_MTIME ]"
		local do
		if [ ! -e $d/$SUPPORT_LIB_NAME ]; then
			do=1
		else
			if [ "`stat $d/$SUPPORT_LIB_NAME -c %Y`" -lt $SUPPORT_LIB_MTIME ];then
				do=1
			fi
		fi
		if [ -n "$do" ];then
			echo -E "$SUPPORT_LIB_CONTENT" > $d/$SUPPORT_LIB_NAME
			chmod +x $d/$SUPPORT_LIB_NAME
		fi
		if [ -z "$newLns" ];then
			(
				trim_indent <<END
					#!/bin/bash
					source $SUPPORT_LIB_NAME
END
				if ! declare -f $to_inst ;then
					die "function, '$to_inst' does not exist"
				fi
				trim_indent <<'END'
					eval '
						THIS_FILE'$SCRIPT_ID'=$(__FILE__)
						THE_CMD'$SCRIPT_ID'=$(readlink -f $0)
						if [ "${THE_CMD'$SCRIPT_ID'}" = "${THIS_FILE'$SCRIPT_ID'}" ];then
							unset THIS_FILE'$SCRIPT_ID'
							unset THE_CMD'$SCRIPT_ID'
END
				echo "
							'$to_inst' \$@
						fi
					'
"
			) > $SCRIPT_TMP_DIR/$to_inst
			newLns="`cat $SCRIPT_TMP_DIR/$to_inst`"
		fi
		if [ ! -e "$d/$to_inst" ];then
			do=1
		else
			if [ "$newLns" != "`cat $d/$to_inst`" ]; then
				do=1
			fi
		fi
		if [ -n "$do" ];then
			if [ ! -e $d/$to_inst ];then
				if [ ! -w $d ];then
					die "cannot write to '$d/$to_inst'"
				fi
			else
				if [ ! -w $d/$to_inst ];then
					die "cannot write to '$d/$to_inst'"
				fi
			fi
			echo -E "$newLns" > $d/$to_inst
			chmod +x $d/$to_inst
		fi
	}
	if [ ${#@} = 0 ];then
		_do_install_each /usr/bin
	else
		for d in "$@"; do
			_do_install_each "$d"
		done
	fi
}


fi

if [ "$(__FILE_PATH__)" = "$(__CMD_PATH__)" ];then
	if [[ "$1" =~ / ]]; then
		$@
	else
		if ! declare -f $1 >/dev/null; then
			require $1
		fi
		$@
	fi
fi


