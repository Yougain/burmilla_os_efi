#!/bin/bash


function wait_sshd_start(){
	local SSH_CON
	local SSH_CON_
	while [ -z "$SSH_CON" ]; do
		SSH_CON_=`echo | nc 198.19.24.185 22 2>&1`
		if [ "${SSH_CON_:0:3}" = "SSH" ];then
			SSH_CON=1
		fi
	done
}

wait_sshd_start


while (( "$#" )); do
	if [ "$1" = "-f" ];then
		FORCE=1
	fi
	if [ "$1" = "-r" ];then
		REINSTALL=1
	fi
	if [ -n "`echo $1| egrep '^[0-9]+$'`" ];then
		PORT=$1
	fi
	if [ -n "`echo $1| egrep '^[A-Za-z]'`" ];then
		HNAME=$1
		if [ "${HNAME#*.}" = "`hostname -d`" ];then
			HNAME_FULL=$HNAME
			HNAME=${HNAME%%.*}
		else
			if [ -z "`echo $HNAME| grep '\.'`" ];then
				HNAME_FULL=$HNAME.`hostname -d`
			else
				HNAME_FULL=$HNAME
			fi
		fi
	fi
	if [ -n "`echo $1| grep '\:' |egrep '^[0-9A-Fa-f:]+$'`" ];then
		if [ -z "$INST_IP" ];then
			INST_IP=$1
		else
			IP=$1
		fi
	fi
	if [ -n "`echo $1| grep '\.' |egrep '^[0-9\.]+$'`" ];then
		if [ -z "$INST_IP" ];then
			INST_IP=$1
		else
			IP=$1
		fi
	fi
	if [ -n "`echo $1| egrep '^/dev/[a-z]+$'`" ];then
		TARGET_DEV=$1
	fi
	shift
done



if [ -z "$HNAME" ]; then
	HNAME="burmilla"
fi

function get_ssh_config_entry(){
	sed -e 's/[ \t]*#.*//' ~/.ssh/config | grep -oiPz "(?s)^\s*Host\s$HNAME(.*?^\s*Host\s|.*)"
}

function get_field2(){
	echo $@|awk '{print $2}'
}

error="\033[31mError"
red="\033[31m"
green="\033[32m"
cyan="\033[36m"
plain="\033[m"
normal="\033[m"
warning="\033[33mWarining"
yellow="\033[33m"

if [ -z "$REINSTALL" ];then
	if [ -n "`get_ssh_config_entry`" ];then
		CONFIG_ENTRY=1
		CONFIG_IP_LINE=`get_ssh_config_entry |  grep -oiPz '^\s*HostName[\t ]+[\w\-\.]+'`
		if [ -z "$CONFIG_IP_LINE" ];then
			echo -e "$error: cannot find a line, $cyan'HostName [ip address or resolvable host name]'$red in the entry of $cyan'Host $HNAME'$red in $cyan~/.ssh/config$red.$plain"
			exit 1
		else
			IP_IN_CONFIG=`get_field2 $CONFIG_IP_LINE`
			if [ -n "$IP" ];then
				if [ "$IP" != "$IP_IN_CONFIG" ];then
					echo -e "$error: Already different ip address or resolvable host name specified in $cyan'~/.ssh/config'$red with an entry of $cyan'Host $HNAME'$red, by the line $cyan'`echo $CONFIG_IP_LINE`'$plain."
					exit 1
				fi
			else
				IP=$IP_IN_CONFIG
			fi
		fi
		CONFIG_PORT_LINE=`get_ssh_config_entry |  grep -oiPz '^\s*Port\s+[0-9]+'`
		if [ -z "$CONFIG_PORT_LINE" ];then
			PORT_IN_CONFIG=22
		else
			PORT_IN_CONFIG=`get_field2 $CONFIG_PORT_LINE`
		fi
			if [ -n "$PORT" ];then
				if [ "$PORT" != "$PORT_IN_CONFIG" ];then
					echo -ne "$error: cannot specify ssh port, $cyan'$PORT'$red in the command line, because $cyan~/.ssh/config$red has an entry of $cyan'Host $HNAME'$red "
					if [ -n "$CONFIG_PORT_LINE" ]; then
						echo -e "with a line, $cyan'`echo $CONFIG_PORT_LINE`'$red.$plain"
					else
						echo -e "without line, $cyan'Port xxxxx'$red, implying usage of default port,$cyan 22$red.$plain"
					fi
				fi
				exit 1
			else
				PORT=$PORT_IN_CONFIG
			fi
		if [ -z "$CONFIG_PORT_LINE" ];then
			PORT=22
		else
			PORT=`get_field2 $CONFIG_PORT_LINE`
		fi
	else
		if [ -z "$IP" ]; then
			IP=$INST_IP
		fi
		if [ -z "$IP" ];then
			echo -e "\033[31m$error: Missing IP address for installation in the command line and cannot find section, $cyan'Host $HNAME'$red in $cyan~./ssh/config$red, where a line like $cyan'HostName [ip address or resolvable host name]'$red should be found.$plain"
			exit 1
		fi
		if [ -z "$PORT" ];then
			RD=0
			while [ "$RD" -le 1024 -o  -n "`grep $RD/tcp /etc/services`" ]; do
				RD=$((RANDOM + RANDOM))
			done
			RANDOM_PORT=1
			PORT=$RD
		fi
		mkdir -m 700 -p ~/.ssh
		echo "Host $HNAME
		HostName $IP
		User rancher
		Port $PORT
	" >> ~/.ssh/config
	fi
fi

KEY=`cat ~/.ssh/id_ed25519.pub 2>/dev/null`
if [ -z "$KEY" ];then
	echo -e "\033[31mError: Cannot find public key in ~/.ssh/id_ed25519.pub. exit.\033[m"
	exit 1
fi

if [ -z "$INST_IP" ];then
	INST_IP=$IP
fi

function ssh_inst(){
	ssh -q -p 22 -o "PasswordAuthentication no" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" -l rancher $INST_IP $@
}


function  install_ssh_key(){
	local SET_KEY_CNT=0
	while ! ssh_inst echo; do
		expect -c "
		set timeout 1
		spawn ssh -p 22 -o \"StrictHostKeyChecking no\" -o \"UserKnownHostsFile /dev/null\" -l rancher $INST_IP
		expect \"assword:\"
		send \"rancher\n\"
		expect \"rancher ~]$ \"
		send \"mkdir ~/.ssh\n\"
		expect \"rancher ~]$ \"
		send \"chmod 700 ~/.ssh\n\"
		expect \"rancher ~]$ \"
		send \"echo $KEY > ~/.ssh/authorized_keys\n\"
		expect \"rancher ~]$ \"
		send \"exit\"
		"
		sleep 1
		SET_KEY_CNT=$(( SET_KEY_CNT + 1 ))
		if [ "$SET_KEY_CNT" = "5" ]; then
			echo "failed to install ssh public key"
			exit 1
		fi
	done
}


if [ -z "$FORCE" ];then
	if ! ssh_inst echo; then
		install_ssh_key
	else
		if [ "`ssh_inst sudo mount | grep /usr/bin/ros | awk '{print $1}'`" != "none" ]; then
			echo -e "$error: not booted from installer disk$normal"
		else
			echo -e "$error: RancherOS is already installed?$plain"
		fi
		exit 1
	fi
fi


if ! ssh_inst echo; then
	if [ -n "$FORCE" ];then
		install_ssh_key
		if ! ssh_inst echo; then
			CANT_INSTALL_KEY=1
		fi
	else
		CANT_INSTALL_KEY=1
	fi
fi
if [ -n "$CANT_INSTALL_KEY" ];then
	echo -e "$error: Cannot logon as user, 'rancher' by password, 'rancher'"
	echo "Please enter following commands on console"
	echo -e $cyan"sudo passwd rancher
rancher
rancher$plain"
	exit 1
fi

if [ "`ssh_inst sudo mount | grep /usr/bin/ros | awk '{print $1}'`" != "none" ]; then
	echo -e "$error: not booted from installer disk$normal"
	exit 1
fi

ssh_inst sudo mkdir -p /mnt3
ssh_inst sudo umount /mnt3
for DRV in `ssh_inst sudo ls /dev | egrep ".*7$" | grep -v tty | grep -v loop`; do
	if ssh_inst sudo mount -t btrfs -odegraded,subvol=/oem_root /dev/$DRV /mnt3; then
		USER_CONFIG=`ssh_inst sudo cat /mnt3/var/lib/rancher/conf/cloud-config.d/user_config.yml`
		ssh_inst sudo umount /mnt3
		ssh_inst sudo rmdir /mnt3
		uc=`echo "$USER_CONFIG"|grep state_root`
		if [ -z "$uc" ]; then
			echo -e "$warning: malformed user_config.yml$normal"
			USER_CONFIG=""
		else
			echo -e "$cyan: user_config.yml found$normal"
			break
		fi
	fi
done

if [ -n "$USER_CONFIG" ];then
	DRV=${DRV:0:-1}
else
	DRV=""
fi


if [ -n "$TARGET_DEV" ];then
	if [ "$TARGET_DEV" = "$DRV" ]; then
		TARGET_DEV=/dev/$DRV
	else
		if [ -n "$DRV" ]; then
			if [ -n "$FORCE" ];then
				echo -e "$warning: command line specified drive, '$TARGET_DEV' is different instralled state drive, '/dev/$DRV'.$normal"
			else
				echo -e "$error: command line specified drive, '$TARGET_DEV' is different instralled state drive, '/dev/$DRV'.$normal"
				exit 1
			fi
		fi
	fi
else
	if [ -n "$DRV" ]; then
		TARGET_DEV=/dev/$DRV
	else
		TARGET_DEV=/dev/sda
	fi
fi


TARGET_DEV1="$TARGET_DEV"1
TARGET_DEV2="$TARGET_DEV"2
TARGET_DEV3="$TARGET_DEV"3
TARGET_DEV4="$TARGET_DEV"4
TARGET_DEV5="$TARGET_DEV"5
TARGET_DEV6="$TARGET_DEV"6
TARGET_DEV7="$TARGET_DEV"7


if [ -z "$USER_CONFIG" ]; then
	echo -e "$cyan""cannot find /var/lib/rancher/conf/cloud-config.d/user_config.yml on oem partition.$normal"
fi


NET_DEV=`ssh_inst ip route show|grep default|awk '{print $5}'|head -1`
if [ -z "$NET_DEV" ]; then
	echo -e "$error: Cannot find net device for default route."
	exit 1
fi
DNS_SETTINGS=`ssh_inst cat /etc/resolv.conf| sed -e 's/[ \t]*#.*//' | grep "nameserver" | sed -e 's/^[ \t]*//' | awk '{print $2}' | sed -e 's/^/      - /'`
if [ -z "$DNS_SETTINGS" ]; then
	echo -e "$error: Cannot find DNS setting."
	exit 1
fi
NETMASK=`ssh_inst ip address show dev $NET_DEV | grep 'inet ' | grep global | awk '{print $2}'| sed -e 's/.*\///'|head -1`
if [ -z "$NETMASK" ]; then
	echo -e "$error: Cannot find net mask."
	exit 1
fi
GATEWAY=`ssh_inst ip route |egrep '^default via'|awk '{print $3}'|head -1`
if [ -z "$GATEWAY" ]; then
	echo -e "$error: Cannot find defalt gateway."
	exit 1
fi


ssh_inst sudo apt-get update
ssh_inst sudo apt-get -y install fdisk


DISK_SIZE=`ssh_inst -t sudo bash -c "'"sudo fdisk -l $TARGET_DEV \|grep \"Disk $TARGET_DEV\"\|awk \"{print $\"\"5}\""'"|grep -v boundary`
MEM_SIZE=`ssh_inst -t bash -c "'"cat /proc/meminfo\|grep MemTotal\|awk \"{print $\"\"2}\""'"`
DISK_SIZE=${DISK_SIZE%$'\r'}
MEM_SIZE=${MEM_SIZE%$'\r'}

if [ "$DISK_SIZE" -ge 2199023255552 ];then # over 2Tbytes
    SWAP_PART_SIZE="+64G"
    STATE_PART_SIZE="+1T"
else
	STATE_PART_SIZE="+$(( DISK_SIZE/2048 ))K"
	if [ "$DISK_SIZE" -ge 1099511627776 ];then # over 1Tbytes
    	SWAP_PART_SIZE="+64G"
	else
		SWAP_PART_SIZE="+$MEM_SIZE"K
	fi
fi

INST_DRIVE=/dev/`ssh_inst readlink /dev/disk/by-label/RANCHEROS | sed -e 's/.*\///'`

if [ "$INST_DRIVE" = "/dev/" ];then
	exit 1
fi

if [ "${INST_DRIVE:0:-1}" = "$TARGET_DEV" ];then
	echo -e "$error: Installer device is same as target device, $TARGET_DEV. Stop installation.$plain"
	exit 1
fi

if [ "$INST_DRIVE" = "" ];then
	echo -e "$error: Installer device is not detected. Stop installation.$plain"
	exit 1
fi

if [ "$DISK_SIZE" -le 1073741824 ];then
	echo -e "$error: size of $TARGET_DEV, less than 1G.$plain"
	exit 1
fi

# TZ environmental variable
TZ_N=`date +"%Z"`
TZ_D=`date +"%z"`
if [ "${TZ_D:0:1}" = "+" ];then
	TZ_DS="-"
else
	TZ_DS=""
fi
TZ_DH1="${TZ_D:1:1}"
if [ "$TZ_DH1" = "0" ];then
	TZ_DH1=""
fi
TZ_DH="$TZ_DH1${TZ_D:2:1}"
TZ_DM="${TZ_D:3:2}"
if [ "$TZ_DM" = "00" ];then
	TZ_DM=""
else
	TZ_DM=":${TZ_DM}"
fi
TZL="$TZ_N$TZ_DS$TZ_DH$TZ_DM"

echo -e $cyan
echo INSTALL FROM "$INST_DRIVE"
echo NET_INTERFACE="$NET_DEV"
echo IP=$IP
echo DNS_SETTINGS="$DNS_SETTINGS"
echo GATEWAY=$GATEWAY
echo NETMASK=$NETMASK
echo DISK_SIZE=$DISK_SIZE
echo MEM_SIZE=$MEM_SIZE
echo TZ=$TZL
echo PORT=$PORT
echo -e $plain


#ssh_inst sudo ros console switch ubuntu -f
sleep 5
ssh_inst bash -c "cat - > __install_rancher" <<FINAL
#!/bin/bash
apt-get update; apt-get install -y gdisk lvm2 dosfstools btrfs-progs parted
dd if=/dev/zero of=$TARGET_DEV bs=1G count=1
partprobe
gdisk $TARGET_DEV <<EOF
2
x
l
1
m
n
1

2047
ef02
x
l
2048
m
n
2

+256M
ef00
n
3

$SWAP_PART_SIZE
8200
n
4

+1G
8300
n
5

+1G
8300
n
6

$STATE_PART_SIZE
8300
n
7


8300
p
w
y
EOF
partprobe
gdisk -l $TARGET_DEV
sleep 1
partprobe
sleep 1
mkswap -L RANCHER_SWAP $TARGET_DEV3 <<END
y
END
mkfs.vfat -F32 -n EFI $TARGET_DEV2 << END
y
END

echo -n "
rancher:
  network:
    dns:
      nameservers:
$DNS_SETTINGS
    interfaces:
      eth*:
        dhcp: false
      $NET_DEV:
        address: $INST_IP/$NETMASK
        gateway: $GATEWAY
ssh_authorized_keys:
 - $KEY
" > cloud-config.yml

ln $INST_DRIVE /dev/sr0
ls -la /dev/sr0
if ros install --no-reboot -f -t gptsyslinux -c cloud-config.yml -d $TARGET_DEV -p $TARGET_DEV4; then
	echo ros insall finished
else
	echo Error: ros install failed
	exit 1
fi
mkdir /mnt/efipart
mount $TARGET_DEV2 /mnt/efipart
mkdir /mnt/installer
mount $INST_DRIVE /mnt/installer
cp -r /mnt/installer/EFI /mnt/efipart
mount $TARGET_DEV4 /opt
mkfs.btrfs -L RANCHER_STATE_SIBLING -f $TARGET_DEV5
partprobe
STATE_UUID=\`sudo ls -l /dev/disk/by-uuid | grep "${TARGET_DEV5##*/}" | awk '{print \$9}'\`
if [ -z "\$STATE_UUID" ];then
	echo "Error: cannot detect uuid of state device, $TARGET_DEV5."
	exit 1
fi
mount $TARGET_DEV5 /mnt
btrfs subvolume create /mnt/state_root
btrfs subvolume set-default \`btrfs subvolume list /mnt|grep state_root|awk '{print \$2}'\` /mnt
mkdir /mnt/state_root/btrfs_top_lvl
cp -av /opt/* /mnt/state_root
umount /opt
mkfs.btrfs -L RANCHER_BOOT_SIBLING -f $TARGET_DEV4
partprobe
BOOT_UUID=\`sudo ls -l /dev/disk/by-uuid | grep ${TARGET_DEV4##*/} | awk '{print \$9}'\`
if [ -z "\$BOOT_UUID" ];then
	echo "Error: cannot detect uuid of boot device, $TARGET_DEV4."
	exit 1
fi

mkfs.btrfs -L RANCHER_OEM_SIBLING -f $TARGET_DEV7
partprobe
OEM_UUID=\`sudo ls -l /dev/disk/by-uuid | grep "${TARGET_DEV7##*/}" | awk '{print \$9}'\`
if [ -z "\$OEM_UUID" ];then
	echo "Error: cannot detect uuid of state device, $TARGET_DEV7."
	exit 1
fi
mkdir -p /opt2
mount $TARGET_DEV7 /opt2
btrfs subvolume create /opt2/oem_root
btrfs subvolume set-default \`btrfs subvolume list /opt2|grep oem_root|awk '{print \$2}'\` /opt2
umount /opt2

mount $TARGET_DEV4 /opt
cp -av /mnt/state_root/boot/* /opt/
rm -rf /mnt/state_root/boot/*

VMLINUZ_FILE=\`cd /opt;ls -d vmlinuz-*\`
VMLINUZ_FILE_COUNT=\`echo "\$VMLINUZ_FILE" | wc | awk '{print \$1}'\`
if [ "\$VMLINUZ_FILE_COUNT" != "1" ];then
    echo \"$error\"\"cannot detect linux kernel in iso image, or multiple kernel detected.\"\"$plain\"
    exit 1
fi
INITRD_FILE=\`cd /opt;ls -d initrd-*\`
INITRD_FILE_COUNT=\`echo "\$INITRD_FILE" | wc | awk '{print \$1}'\`
if [ "\$INITRD_FILE_COUNT" != "1" ];then
    echo \"$error\"\"cannot detect initrd in iso image, or multiple initrd detected.\"\"$plain\"
    exit 1
fi

INITRD_VER=\${INITRD_FILE#*-}
KERNEL_VER=\${VMLINUZ_FILE#*-}

GLOBAL_APPEND=\`cat /opt/global.cfg | sed "s/ rancher\.state\.dev=[^ ]*//g"\`
GLOBAL_APPEND_ARGS=\${GLOBAL_APPEND#APPEND *}

KERNEL_ARGS="rancher.state.oem_mountopt=degraded,subvol=/oem_root rancher.state.mountopt=degraded,subvol=/state_root rancher.password=rancher \$GLOBAL_APPEND_ARGS rw rootflags=degraded,subvol=/state_root"
VGA_SIZE=1024x768
VGA_MODE=775
VGA_ARGS="nomodeset vga=\$VGA_MODE video=\$VGA_SIZE"
echo APPEND \$VGA_ARGS \$KERNEL_ARGS > /opt/global.cfg
ROOT_ARGS="rancher.state.boot_dev=UUID=\$BOOT_UUID rancher.state.oem_dev=UUID=\$OEM_UUID rancher.state.dev=UUID=\$STATE_UUID root=UUID=\$STATE_UUID"

umount /mnt
cat - > /mnt/efipart/EFI/BOOT/grub.cfg <<END
set timeout=5
set gfxmode=\$VGA_SIZE
set gfxpayload=keep
menuentry "Burmilla OS \$INITRD_VER \$KERNEL_VER" {
    search --no-floppy  --fs-uuid --set=root \$BOOT_UUID
    linux    /\$VMLINUZ_FILE \$VGA_ARGS \$KERNEL_ARGS \$ROOT_ARGS
    initrd   /\$INITRD_FILE
}
menuentry "Debug Burmilla OS \$INITRD_VER \$KERNEL_VER" {
    search --no-floppy  --fs-uuid --set=root \$BOOT_UUID
    linux    /\$VMLINUZ_FILE vga=ask rancher.debug=true \$KERNEL_ARGS \$ROOT_ARGS ---
    initrd   /\$INITRD_FILE
}
END



reboot
FINAL
ssh_inst chmod +x __install_rancher
ssh_inst -t sudo ./__install_rancher



function reboot_by_passwd(){
	expect -c "
	set timeout 1
	spawn ssh -p 22 -o \"StrictHostKeyChecking no\" -o \"UserKnownHostsFile /dev/null\" -l rancher $INST_IP
	expect \"assword:\"
	send \"rancher\n\"
	expect \"rancher ~]$ \"
	send \"sudo reboot\n\"
	"
}

echo -e "$green""rebooting ... $normal"

wait_sshd_start

while ! ssh_inst echo; do
	echo -e "$green""Switch to boot by desitination disk$normal"
	echo -e "rebooting ...$normal"
	reboot_by_passwd
	sleep 10
	wait_sshd_start
done

if [ "`ssh_inst cat /proc/cmdline | grep -o rancher.state.dev=`" = "rancher.state.dev=" ]; then
	while [ -z "`ssh_inst ps ax | grep 'containerd --config /var/run/docker/containerd/containerd.toml'`" ]; do
		echo -e "$cyan waiting initilization$normal"
		sleep 1
	done
	echo -e "$green""Switch to boot by installer$normal"
	ssh_inst sudo reboot
	wait_sshd_start
else
	echo -e "$error: destination disk not found$normal"
	exit 1
fi


install_ssh_key

ssh_inst sudo mkdir -p /mnt2
ssh_inst sudo mount $TARGET_DEV5 /mnt2 -odegraded
if [ -z "`ssh_inst ls -ld /mnt2/home`" ];then
	echo -e "$error: Please boot from installed hard disk only ONCE.$plain"
	exit 1
fi
if [ -n "`ssh_inst ls -ld /mnt2/home|grep oem`" ];then
	echo -e "$error: Already installed with oem disk.$plain"
	exit 1
fi


ssh_inst bash -c "cat - > __install_rancher" <<FINAL
#!/bin/bash
apt-get update; apt-get install -y gdisk lvm2 dosfstools btrfs-progs parted
mkdir -p /opt2
mount -t btrfs -odegraded,subvol=/oem_root $TARGET_DEV7 /opt2
if [ -z "$USER_CONFIG" ]; then
	cp -av /mnt2/root /opt2
	cp -av /mnt2/home /opt2
	mkdir -p /opt2/var
	cp -av /mnt2/var/log /opt2/var
	mkdir -p /opt2/var/lib/rancher
	cp -av /mnt2/var/lib/rancher/conf /opt2/var/lib/rancher
	echo -n "
hostname: $HNAME_FULL
rancher:
  network:
    dns:
      nameservers:
$DNS_SETTINGS
    interfaces:
      eth*:
        dhcp: false
      $NET_DEV:
        address: $IP/$NETMASK
        gateway: $GATEWAY
  services:
    console:
      environment:
        TZ: $TZL
    syslog:
      environment:
        TZ: $TZL
write_files:
  - path: /opt/rancher/bin/start.sh
    permissions: \"0755\"
    owner: root
    content: |
      #!/bin/bash
      sudo sed -i 's/#Port 22/Port $PORT/' /etc/ssh/sshd_config
      sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
      echo "PubkeyAcceptedKeyTypes=+ssh-dss" >>  /etc/ssh/sshd_config
      sudo kill -HUP \\\$(ps ax |grep 'sshd -D' | grep -v grep | awk '{ print \\\$1 }')
      sudo echo export LANG=en_US.UTF-8 > /etc/profile.d/lang_Yk.sh
      sudo echo export LC_CTYPE=en_US.UTF-8 >> /etc/profile.d/lang_Yk.sh
      sudo echo export LC_ALL=en_US.UTF-8 >> /etc/profile.d/lang_Yk.sh
      sudo echo export TZ=$TZL > /etc/profile.d/time_zone_Yk.sh
      if [ ! -f /bin/git ];then
        if [ -f /bin/dnf ];then
          sudo dnf -y install git glibc-langpack-en langpacks-en glibc-locale-source
        else
          if [ -f /bin/yum ];then
             sudo yum -y install git glibc-langpack-en langpacks-en glibc-locale-source
          else
             if [ -f /bin/apt-get ];then
                sudo apt-get -y install git
             fi
          fi
        fi
      fi
runcmd:
- mkdir -p /btrfs_top_lvl
- mount /dev/\\\$(readlink /dev/disk/by-uuid/\\\`readlink /dev/root|egrep -o "[0-9a-f-]+"\\\` | egrep -o "sd.")5 -odegraded,subvol=/ /btrfs_top_lvl
#- mount /dev/\\\$(readlink /dev/disk/by-uuid/\\\`readlink /dev/root|egrep -o "[0-9a-f-]+"\\\` | egrep -o "sd.")4 -odegraded /boot
- mkdir -p /boot/efi
- mount /dev/\\\$(readlink /dev/disk/by-uuid/\\\`readlink /dev/root|egrep -o "[0-9a-f-]+"\\\` | egrep -o "sd.")2 /boot/efi
- swapon /dev/\\\$(readlink /dev/disk/by-uuid/\\\`readlink /dev/root|egrep -o "[0-9a-f-]+"\\\` | egrep -o "sd.")3
- btrfs quota enable /btrfs_top_lvl
- btrfs quota enable /btrfs_top_lvl/state_root
#cloud-config
ssh_authorized_keys:
 - $KEY
" > /opt2/var/lib/rancher/conf/cloud-config.d/user_config.yml
fi


mkdir -p /opt2/btrfs_top_lvl
rm -rf /mnt2/{root,home,var/log,var/lib/rancher/conf}
ln -s /usr/share/ros/oem/root /mnt2/root 
ln -s /usr/share/ros/oem/home /mnt2/home
ln -s /usr/share/ros/oem/var/log /mnt2/var/log
ln -s /usr/share/ros/oem/var/lib/rancher/conf /mnt2/var/lib/rancher/conf
reboot

FINAL

ssh_inst chmod +x __install_rancher
ssh_inst -t sudo ./__install_rancher

