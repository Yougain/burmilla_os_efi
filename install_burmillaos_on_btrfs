#!/bin/bash


error="\033[41m\033[33mERROR    :\033[m \033[31m"
warning="\033[43m\033[31mWARNING:\033[m \033[33m"
info="\033[46m\033[34mINFO     :\033[m \033[36m "
plain="\033[m"
normal="\033[m"

black="0"
red="1"
green="2"
yellow="3"
blue="4"
purple="5"
magenta="5"
cyan="6"
white="7"


allColors="black red green yellow blue purple magenta cyan white"

function capitalize(){
	local B
	local F
	B=`echo -n "${1:0:1}" | tr "[:lower:]" "[:upper:]"`
	F="${B}${1:1}"
	shift
	echo -n $F $@
}

function errmsg(){
	if [ -z "$ERRMSG" ]; then
		ERRMSG="$error`capitalize $@`$plain"
	else
		ERRMSG="$ERRMSG
$error""`capitalize $@`"$plain
	fi
}


alias err=errmsg
alias error=errmsg


function info_n(){
	echo -ne $info`capitalize $@`$plain
}
function info(){
	info_n $@"\n"
}


function warning_n(){
	echo -ne "$warning""$@"
}
function warning(){
	warning_n "$@""\n"
}

alias warn=warning
alias warn_n=warning_n


for col in $allColors; do
	eval '
		'`capitalize $col`'="\033[3$'$col'""m"
		function '$col'_n(){
			echo -ne "\033[3$'$col'""m''$@''$plain"
		}
		function '$col'(){
			'$col'_n $@"\n"
		}
		function bg'`capitalize $col`'_n(){
			echo -ne "\033[4$'$col'""m''$@''$plain"
		}
		function bg'`capitalize $col`'(){
			bg'`capitalize $col`'_n $@"\n"
		}
	'
	for bgCol in $allColors; do
		eval '
			function '$col'Bg'`capitalize $bgCol`'_n(){
				echo -ne "\033[3$'$col'""m\033[4$'$bgCol'""m''$@''$plain"
			}
			function '$col'Bg'`capitalize $bgCol`'(){
				'$col'Bg'`capitalize $bgCol`'_n $@
			}
		'
	done
done


function exit_if_err(){
	if [ -n "$1" ]; then
		errmsg $@
	fi
	if [ -n "$ERRMSG" ];then
		echo -en $ERRMSG
		exit 1
	fi
}

function die(){
	if [ -n "$1" ]; then
		errmsg $@
	fi
	if [ -n "$ERRMSG" ];then
		echo -en $ERRMSG
	fi
	exit 1
}

# argument analysis
while (( "$#" )); do
	if [ "$1" = "-f" ];then
		FORCE=1
	fi
	if [ "$1" = "-r" ];then
		REINSTALL=1
	fi
	if [ "$1" = "--initialize-oem" ];then
		INITIALIZE_OEM=1
	fi
	if [ "$1" = "--init-oem" ];then
		INITIALIZE_OEM=1
	fi
	if [ "$1" = "--overwrite-oem" ];then
		INITIALIZE_OEM=1
	fi
	if [ -n "`echo $1| egrep '^[0-9]+$'`" ];then
		PORT=$1
	fi
	if [ -n "`echo $1| egrep '^[A-Za-z]'`" ];then
		CMD_HNAME=$1
		HNAME=$1
		if [ "${HNAME#*.}" = "`hostname -d`" ];then
			HNAME_FULL=$HNAME
			HNAME=${HNAME%%.*}
		else
			if [ -z "`echo $HNAME| grep '\.'`" ];then
				HNAME_FULL=$HNAME.`hostname -d`
			else
				HNAME_FULL=$HNAME
			fi
		fi
	fi
	if [ -n "`echo $1| grep '\:' |egrep '^[0-9A-Fa-f:]+$'`" ];then
		if [ -z "$INST_IP" ];then
			INST_IP=$1
		else
			IP=$1
		fi
	fi
	if [ -n "`echo $1| grep '\.' |egrep '^[0-9\.]+$'`" ];then
		if [ -z "$INST_IP" ];then
			INST_IP=$1
		else
			IP=$1
		fi
	fi
	if [ -n "`echo $1| egrep '^/dev/[a-z]+$'`" ];then
		TARGET_DEV=$1
	fi
	shift
done


function get_ssh_config_entry(){
	local ENT=`sed -e 's/[ \t]*#.*//' ~/.ssh/config | grep -oiPz "(?s)^\s*Host\s+$1(.*?^\s*Host\s|.*)"`
	local PORT=`echo "$ENT" | grep -oiPz "^\s*Port\s+\d+"| head -1 |awk '{print $2}'`
	local IP=`echo "$ENT" | grep -oiPz "^\s*HostName\s+[^\s]+"| head -1 |awk '{print $2}'`
	echo "$IP:$PORT"
}


function get_field2(){
	echo $@|awk '{print $2}'
}


# check IP and PORT in ~/.ssh/config
# load IP and PORT if missing in both command line and user_config.yml
function get_ssh_config_ip_from_name(){
	local HNAME=$1
	if [ -n "`get_ssh_config_entry $HNAME`" ];then
		# $HNAME entry found in ~/.ssh/config 
		local CONFIG_IP_LINE=`get_ssh_config_entry $HNAME |  grep -oiPz '^\s*HostName[\t ]+[\w\-\.]+'`
		if [ -z "$CONFIG_IP_LINE" ];then
			return 1
		else
			IP_IN_CONFIG=`get_field2 $CONFIG_IP_LINE`
			if [ -z $IP_IN_CONFIG ]; then
				return 1
			fi
		fi
		return 0
	else
		return 1
	fi
}

function ask_yes_no {
  while true; do
    read ANS
    case $ANS in
      [Yy]*)
        return 0
        ;;  
      [Nn]*)
        return 1
        ;;
      *)
        ;;
    esac
  done
}


# indispensable arguments
if [ -z "$INST_IP" ]; then
	if [ -n "$CMD_HNAME" ];then
		CTMP=`get_ssh_config_entry $CMD_HNAME`
		if [ -n "$CTMP" ];then
			INST_IP=${CTMP//:*}
			INSTALLED_PORT=${CTMP##*:}
			if ssh $INST_IP -p $INSTALLED_PORT -l rancher -o ConnectTimeout=3 -o ConnectionAttempts=3 echo -n; then
				whiteBgRed_n "Server "
				cyanBgRed_n "'$CMD_HNAME'"
				whiteBgRed_n ", still working. Really overwrite it with new installation? "
				yellowBgRed_n  "[y/n]:"
				echo -n " "
				if ! ask_yes_no; then
					info "Terminated by user."
					exit 1
				fi
			fi
			efi_blkid=$(ssh $INST_IP -p $INSTALLED_PORT -l rancher -o ConnectTimeout=3 -o ConnectionAttempts=3 <<'END'
				sudo mkdir -p /installing/mnt_rancheros
				if sudo mount LABEL=RANCHEROS /installing/mnt_rancheros; then
					efi_dev="`sudo mount|grep 'on /boot/efi type vfat'|awk '{print \$1}'`"
					if [ -n "\$efi_dev" ];then
						blkid "\$efi_dev"
						sudo cp /oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer /boot/efi/.grub_env_for_installing
						sudo touch -d @$((`date +%s` + 300)) /boot/efi/.grub_env_for_installing
						sudo reboot
					else
						exit 3
					fi
					exit 0
				else
					exit 2
				fi
END
			)
			case "$?" in
				0) # logon the target and reboot
					;;
				2)
					die "Installer disk not inserted on target machine."
					;;
				3)
					die "EFI partition not mounted."
					;;
				*) # Time out. Already booted by installer ?
					;;
			esac
			org_efi_uuid_with_tag=`echo "$efi_blkid"|egrep -o " UUID=\"[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]-[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]\""`
			ORG_EFI_UUID=${org_efi_uuid_with_tag:7:9}
		fi
	fi
fi
if [ -z "$INST_IP" ]; then
	err IP address is not found in command line nor in ~/.ssh/config. 
fi
KEY=`cat ~/.ssh/id_ed25519.pub 2>/dev/null`
if [ -z "$KEY" ];then
	err Cannot find public key in ~/.ssh/id_ed25519.pub.
fi
exit_if_err


# ssh functions
function wait_sshd_start(){
	local SSH_CON_
	info_n connecting SSH...
	for i in $(seq 1 120); do
		sleep 1
		blue_n "."
		SSH_CON_=`echo | nc $INST_IP 22 2>&1`
		if [ "${SSH_CON_:0:3}" = "SSH" ];then
			cyanBgBlue connected
			return
		fi
	done
	echo
	die Tried 120 times. Still cannot connect SSH port "(22)". Exited.
}


function ssh_inst(){
	ssh -q -p 22 -o "PasswordAuthentication no" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" -l rancher $INST_IP $@
}


function  install_ssh_key(){
	local SET_KEY_CNT=0
	while ! ssh_inst echo; do
		if [ "$SET_KEY_CNT" = "5" ]; then
			return 1
		fi
		expect -c "
		set timeout 1
		spawn ssh -p 22 -o \"StrictHostKeyChecking no\" -o \"UserKnownHostsFile /dev/null\" -l rancher $INST_IP
		expect \"assword:\"
		send \"rancher\n\"
		expect \"rancher ~]$ \"
		send \"mkdir ~/.ssh\n\"
		expect \"rancher ~]$ \"
		send \"chmod 700 ~/.ssh\n\"
		expect \"rancher ~]$ \"
		send \"echo $KEY >> ~/.ssh/authorized_keys\n\"
		expect \"rancher ~]$ \"
		send \"exit\"
		"
		sleep 1
		SET_KEY_CNT=$(( SET_KEY_CNT + 1 ))
	done
	return 0
}


# wait ssh connectable
wait_sshd_start


if ssh_inst ls /installing;then
	info "reboot to clear termnated installing"
	ssh_inst sudo reboot
	wait_sshd_start
fi


# install ssh key if not installed
if ! ssh_inst echo; then
	if ! install_ssh_key; then
		die "Cannot logon as user, 'rancher' by password, 'rancher'.
$CyanPlease enter following commands on console.
	sudo passwd rancher
	rancher
	rancher"
	fi
fi


# check booted from installer disk
if [ "`ssh_inst sudo mount | grep /usr/bin/ros | awk '{print $1}'`" != "none" ]; then
	die Not booted from installer disk
fi


ssh_inst sudo mkdir -p /installing/mnt_rancheros
# check uefi-grub-enabled installer
if ssh_inst sudo mount /dev/disk/by-label/RANCHEROS /installing/mnt_rancheros; then
	if [ -z "`ssh_inst sudo cat /installing/mnt_rancheros/boot/grub/grub.cfg`" ]; then
		die Installer disk is not uefi-grub enabled.
	else
		ssh_inst sudo umount /installing/mnt_rancheros
	fi
else
	die Installer disk with label, RANCHEROS is not found.
fi

# get network parameters from target server booted by installer
NET_DEV=`ssh_inst ip route show|grep default|awk '{print $5}'|head -1`
if [ -z "$NET_DEV" ]; then
	die Cannot find net device for default route.
fi
DS=`ssh_inst cat /etc/resolv.conf| sed -e 's/[ \t]*#.*//' | grep "nameserver" | sed -e 's/^[ \t]*//' | awk '{print $2}'`
DNS_SETTINGS=`echo "$DS" | sed -e 's/^/      - /'`
DSX=""
DSX2=""
for i in $DS; do
	if [ -z "$DSX" ]; then
		DSX='"'$i'"'
		DSX2='\"'$i'\"'
	else
		DSX="$DSX",'"'$i'"'
		DSX2="$DSX2",'\"'$i'\"'
	fi
done
DNS_SETTINGS_YQ="[$DSX]"
DNS_SETTINGS_YQ2="[$DSX2]"


if [ -z "$DNS_SETTINGS" ]; then
	die Cannot find DNS setting.
fi
NETMASK=`ssh_inst ip address show dev $NET_DEV | grep 'inet ' | grep global | awk '{print $2}'| sed -e 's/.*\///'|head -1`
if [ -z "$NETMASK" ]; then
	die Cannot find net mask.
else
	for i in 8 16 24; do
		if [ "$NETMASK" = "$i" ]; then
			netmask_ok=1
		fi
	done
	if [ -z "$netmask_ok" ];then
		die Unsupported netmask, $NETMASK
	fi
fi
GATEWAY=`ssh_inst ip route |egrep '^default via'|awk '{print $3}'|head -1`
if [ -z "$GATEWAY" ]; then
	die Cannot find default gateway.
fi


function extract_uc_params(){
	ssh_inst sudo bash <<'END'
		F=/installing/mnt3/var/lib/rancher/conf/cloud-config.d/user_config.yml
		if [ -e $F ]; then
			if [ ! -x /usr/bin/yq ]; then
				if [ -n "`uname -a|grep armv7`" ]; then
					sudo wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
				fi
				if [ -n "`uname -a|grep aarc64`" ]; then
					sudo wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
				fi
				if [ -n "`uname -a|grep x86_64`" ]; then
					sudo wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
				fi
			fi
			if [ ! -x /usr/bin/yq ];then
				echo "ERROR:Cannot download /usr/bin/yq" >&2
			fi
			UC_PORT=`sudo yq '.write_files | select(.[].path == "/opt/rancher/bin/start.sh") | .[0].content' $F|egrep  -o '/Port\s+[0-9]+' | awk '{print  $2}'`
			UC_HNAME_FULL=`sudo yq .hostname $F`
			UC_IPS=`sudo yq .rancher.network.interfaces $F| egrep -o "address:\s+[0-9.:]+" | awk '{print $2}'`
			if [ -n "`sudo grep state_root $F`" ]; then
				echo USER_CONFIG=1
				echo UC_PORT=$UC_PORT
				echo UC_HNAME_FULL=$UC_HNAME_FULL
				echo UC_IPS=$UC_IPS
			fi
		fi
END
}


# check oem drive for getting "user_config.yml" and "$TARGET_DEV"
ssh_inst sudo mkdir -p /installing/mnt3
ssh_inst sudo umount /installing/mnt3 2> /dev/null
for DRV in `ssh_inst sudo ls /dev | egrep ".*7$" | grep -v tty | grep -v loop`; do
	if ssh_inst sudo mount -t btrfs -odegraded,subvol=/oem_root /dev/$DRV /installing/mnt3; then
		PARAMS="`extract_uc_params`"
		eval "$PARAMS"
		ssh_inst sudo umount /installing/mnt3
		ssh_inst sudo rmdir /installing/mnt3
		if [ -n "$USER_CONFIG" ]; then
			info "user_config.yml found"
			break
		fi
	fi
done

# set up target device
if [ -n "$USER_CONFIG" ];then
	DRV=${DRV:0:-1}
else
	DRV=""
fi

if [ -n "$TARGET_DEV" ];then
	if [ "$TARGET_DEV" = "$DRV" ]; then
		TARGET_DEV=/dev/$DRV
	else
		if [ -n "$DRV" ]; then
			die "Command line specified drive, '$TARGET_DEV' is different from instralled drive, '/dev/$DRV'."
		fi
	fi
else
	if [ -n "$DRV" ]; then
		TARGET_DEV=/dev/$DRV
	else
		warning destination device not specified. Using \'/dev/sda\'.
		TARGET_DEV=/dev/sda
	fi
fi


function reachable(){
	local mask=$2
	local gateway=$3
	local ip=$1
	local prefix
	case $mask in
		"24" )
			prefix=`echo $ip|grep -oP '^\d{1,3}\.\d{1,3}.\d{1,3}\.'`
			;;
		"16" )
			prefix=`echo $ip|grep -oP '^\d{1,3}\.\d{1,3}\.'`
			;;
		"8" )
			prefix=`echo $ip|grep -oP '^\d{1,3}\.'`
			;;
	esac
	if [ -z "$prefix" ]; then
		return 1
	fi
	local psize=${#prefix}
	if [ "${gateway:0:$psize}" = "$prefix" ]; then
		return 0
	else
		return 1
	fi
}


# set up ip address from command line or user_config.yml found in previous installation.
if [ -n "$IP" ]; then
	if [ -n "$UC_IPS" ]; then
		for i in $UC_IPS; do
			if [ $i == "$IP" ]; then
				UC_IP=$IP
				break
			fi
		done
		if [ -z "$UC_IP" ];then
			if [ -n "$FORCE" ];then
				warn "Overwrite ip address with new one, $Cyan'$IP'$Yellow over current ip, $Cyan'$UC_IPS'$Yellow defined in user_config.yml"
			else
				die "Command line specified ip address, $Cyan'$IP'$Red is different from current ip, $Cyan'$UC_IPS'$Red defined in user_config.yml"
			fi
		fi
	fi
	if ! reachable $IP $NETMASK $GATEWAY; then
		die "IP address, $Cyan'$IP'$red is not accessible to gateway, $Cyan'$GATEWAY/$NETMASK'$red."
	fi
else
	if [ -n "$UC_IPS" ]; then
		for i in $UC_IPS; do
			if reachable $i $NETMASK $GATEWAY; then
				info "Using ip address, '$i', defined in user_config.yml"
				IP=$i
				break
			fi
		done
	fi
fi


# set up ssh port number from command line or user_config.yml found in previous installation.
if [ -n "$PORT" ]; then
	if [ -n "$UC_PORT" ]; then
		if [ "$PORT" != "$UC_PORT" ];then
			if [ -n "$FORCE" ];then
				warn "Overwrite ssh port number with new one, $Cyan'$PORT'$Yellow over current ip, $Cyan'$UC_PORT'$Yellow defined in user_config.yml"
			else
				die "Command line specified ssh port number, $Cyan'$PORT'$Red is different from current one, $Cyan'$UC_PORT'$Red defined in user_config.yml"
			fi
		fi
	fi
else
	if [ -n "$UC_PORT" ]; then
		info "Using ssh port number, '$UC_PORT' defined in user_config.yml."
		PORT=$UC_PORT
	fi
fi


# set up host name from command line or user_config.yml found in previous installation.
if [ -n "$HNAME" ]; then
	if [ -n "$UC_HNAME_FULL" -a "$HNAME_FULL" != "$UC_HNAME_FULL" ]; then
		if [ -n "$FORCE" ]; then
			warn "Overwriting host name with new name, $Cyan'$UC_HNAME_FULL'$Yellow in user_config.yml (original: $Cyan'$HNAME_FULL'$Yellow)."
		else
			die "Command line specified host name, $Cyan'$HNAME_FULL'$Red is different from original host name, $Cyan'$HNAME_FULL'$Red defined in  user_config.yml."
		fi
	fi
else
	if [ -n "$UC_HNAME_FULL" ]; then
		info "Using host name, '$UC_HNAME_FULL', defined in user_config.yml."
		HNAME=${UC_HNAME_FULL%%.*}
		HNAME_FULL=$UC_HNAME_FULL
	else
		if [ -n "$FORCE" ]; then
			warn "Using host name, $Cyan'burmilla'$Yellow, befause missing host name in both command line and user_config.yml."
		else
			die "Missing host name in both command line and user_config.yml."
		fi
	fi
fi




# check ~/.ssh/config for hostname and ip address, port number

function get_field2(){
	echo $@|awk '{print $2}'
}


function write_ssh_config(){
	info "writing entry of $1 in ~/.ssh/config with $IP:$PORT"
	mkdir -m 700 -p ~/.ssh
	echo  >> ~/.ssh/config
	echo "Host $1
HostName $IP
User rancher
Port $PORT
" >> ~/.ssh/config
}


function rewrite_ssh_config(){
	warn "rewriting entry of $HNAME_FULL in ~/.ssh/config with $IP:$PORT"
	local insect=""
	while read line; do
		hln=`echo "$line"|grep -ioP "^\s*Host\s+[^#\s]+"|sed -e 's/[ \t]//g'`
		if [ "$hln" = "Host$1" ]; then
			insect=1
		else
			if [ -n "$hln" ]; then
				insect=""
			fi
		fi
		if [ -n "$insect" ]; then
			line=`echo "$line"| sed -e 's/^\s*Port\s\s*[0-9][0-9]*/Port '$PORT'/ig'`
            line=`echo "$line"| sed -e 's/^\s*Hostname\s\s*[^\s][^\s]*/HostName '$IP'/ig'`
		fi
		echo "$line"
	done < ~/.ssh/config > ~/.ssh/config.new
	if [ "`cat ~/.ssh/config`" != "`cat ~/.ssh/config.new`"; then
		mv -f ~/.ssh/config ~/.ssh/config.bak
		mv ~/.ssh/config.new ~/.ssh/config
		chmod 600 ~/.ssh/config
	fi
}


function check_ip_and_port(){
	if [ -z "$IP" ];then
		die "Missing IP address for both in the command line and user_config.yml, and cannot find section, $Cyan'Host $HNAME'$Red in $Cyan~./ssh/config$Red, where a line like $Cyan'HostName [ip address or resolvable host name]'$Red should be found."
	fi
	if [ -z "$PORT" ];then
		RD=0
		while [ "$RD" -le 1024 -o  -n "`grep $RD/tcp /etc/services`" ]; do
			RD=$((RANDOM + RANDOM))
		done
		RANDOM_PORT=1
		PORT=$RD
		warn using randomely chosen port number, $PORT for ssh
	fi
}


function loadOrRewrite(){
	eval local hname='$'$1
	if [ -z "$IP" -a -z "$PORT" ]; then
		local ent=`get_ssh_config_entry $hname`
		IP=${ent/:*}
		PORT=${ent#*:}
	else
		if [ -n "$FORCE" ]; then
			CMD_HNAME=$hname
			check_ip_and_port
			rewrite_ssh_config $hname
		else
			local ent=`get_ssh_config_entry $hname`
			local EIP=${ent/:*}
			local EPORT=${ent#*:}
			if [ -n "$IP" ]; then
				if [ -n "$EIP" ]; then
					if [ "$IP" != "$EIP" ]; then
						die "ip address, '$IP' is different from relevant entry, ip adderss, '$EIP' of '$1' in ~/.ssh/config."
					fi
				fi
			else
				if [ -n "$EIP" ]; then
					IP=$EIP
				fi
			fi
			if [ -n "$PORT" ]; then
				if [ -n "$EPORT" ]; then
					if [ "$PORT" != "$EPORT" ]; then
						die "port number, '$PORT' is different from relevant entry, '$EPORT' of '$1' in ~/.ssh/config."
					fi
				fi
			else
				if [ -n "$EPORT" ]; then
					PORT=$EPORT
				fi
			fi
		fi
	fi
}


if [ -z "$CMD_HNAME" ]; then
	hnEnt=`get_ssh_config_entry $HNAME`
	hnfEnt=`get_ssh_config_entry $HNAME_FULL`
	if [ -n "$hnEnt" ]; then
		if [ -n "$hnfEnt" ]; then
			if [ "$hnEnt" = "$IP:$PORT" ]; then
				CMD_HNAME=$HNAME
			else # shorname entry not match for ip or port number
				if [ "$hnfEnt" = "$IP:$PORT" ]; then #long name match
					CMD_HNAME=$HNAME_FULL
				else # ip and port not matches both short and full name
					loadOrRewrite HNAME
				fi
			fi
		else # only short name entry exists
			if [ "$hnEnt" = "$IP:$PORT" ]; then
				CMD_HNAME=$HNAME
			else # shorname not match
				loadOrRewrite HNAME
			fi
		fi
	else
		if [ -n "$hnfEnt"]; then # only long name entry exists
			if [ "$hnfEnt" = "$IP:$PORT" ]; then
				CMD_HNAME=$HNAME_FULL
			else
				loadOrRewrite HNAME_FULL
			fi
		else # no entry found
			check_ip_and_port
			rewrite_ssh_config $HNAME
			CMD_HNAME=$HNAME
		fi
	fi
else
	hncEnt=`get_ssh_config_entry $CMD_HNAME`
	if [ -n "$hncEnt" ]; then
		if [ "$hncEnt" != "$IP:$PORT" ]; then
			loadOrRewrite CMD_HNAME
		fi
	else
		check_ip_and_port
		write_ssh_config $CMD_HNAME
	fi
fi



##################

USER_SETTINGS_FOR_GRUB_SOURCE="USER_SETTINGS='rancher.network.interfaces.$NET_DEV.address=$IP/$NETMASK rancher.network.interfaces.$NET_DEV.gateway=$GATEWAY rancher.network.dns.nameservers=$DNS_SETTINGS_YQ'"
USER_SETTINGS_FOR_GRUB_SOURCE_FOR_INSTALLING="USER_SETTINGS='rancher.network.interfaces.$NET_DEV.address=$INST_IP/$NETMASK rancher.network.interfaces.$NET_DEV.gateway=$GATEWAY rancher.network.dns.nameservers=$DNS_SETTINGS_YQ'"


TARGET_DEV1="$TARGET_DEV"1
TARGET_DEV2="$TARGET_DEV"2
TARGET_DEV3="$TARGET_DEV"3
TARGET_DEV4="$TARGET_DEV"4
TARGET_DEV5="$TARGET_DEV"5
TARGET_DEV6="$TARGET_DEV"6
TARGET_DEV7="$TARGET_DEV"7


if [ -z "$USER_CONFIG" ]; then
	info Cannot find /var/lib/rancher/conf/cloud-config.d/user_config.yml on oem partition.
fi


ssh_inst sudo apt-get -y update
if ! ssh_inst sudo apt-get -y install fdisk util-linux; then
	die cannot install fdisk, util-linux
fi


DISK_SIZE=`ssh_inst -t sudo bash -c "'"sudo fdisk -l $TARGET_DEV \|grep \"Disk $TARGET_DEV\"\|awk \"{print $\"\"5}\""'"|grep -v boundary`
MEM_SIZE=`ssh_inst -t bash -c "'"cat /proc/meminfo\|grep MemTotal\|awk \"{print $\"\"2}\""'"`
DISK_SIZE=${DISK_SIZE%$'\r'}
MEM_SIZE=${MEM_SIZE%$'\r'}

if [ "$DISK_SIZE" -ge 2199023255552 ];then # over 2Tbytes
    SWAP_PART_SIZE="+64G"
    STATE_PART_SIZE="+1T"
else
	STATE_PART_SIZE="+$(( DISK_SIZE/2048 ))K"
	if [ "$DISK_SIZE" -ge 1099511627776 ];then # over 1Tbytes
    	SWAP_PART_SIZE="+64G"
	else
		SWAP_PART_SIZE="+$MEM_SIZE"K
	fi
fi

INST_DRIVE=/dev/`ssh_inst readlink /dev/disk/by-label/RANCHEROS | sed -e 's/.*\///'`

if [ "$INST_DRIVE" = "/dev/" ];then
	die "Abnormal installer's drive $Cyan'$INST_DRIVE'$Red."
	exit 1
fi

if [ "${INST_DRIVE:0:-1}" = "$TARGET_DEV" ];then
	die "Installer device is same as target device, $TARGET_DEV. Stop installation."
fi

if [ "$INST_DRIVE" = "" ];then
	die "Installer device is not detected. Stop installation."
fi

if [ "$DISK_SIZE" -le 1073741824 ];then
	die "size of $TARGET_DEV, less than 1G."
fi

# TZ environmental variable
TZ_N=`date +"%Z"`
TZ_D=`date +"%z"`
if [ "${TZ_D:0:1}" = "+" ];then
	TZ_DS="-"
else
	TZ_DS=""
fi
TZ_DH1="${TZ_D:1:1}"
if [ "$TZ_DH1" = "0" ];then
	TZ_DH1=""
fi
TZ_DH="$TZ_DH1${TZ_D:2:1}"
TZ_DM="${TZ_D:3:2}"
if [ "$TZ_DM" = "00" ];then
	TZ_DM=""
else
	TZ_DM=":${TZ_DM}"
fi
TZL="$TZ_N$TZ_DS$TZ_DH$TZ_DM"

info "INSTALL FROM "$INST_DRIVE"
NET_INTERFACE="$NET_DEV"
IP=$IP
DNS_SETTINGS="$DNS_SETTINGS"
GATEWAY=$GATEWAY
NETMASK=$NETMASK
DISK_SIZE=$DISK_SIZE
MEM_SIZE=$MEM_SIZE
TZ=$TZL
PORT=$PORT"


#ssh_inst sudo ros console switch ubuntu -f
sleep 5
ssh_inst bash -c "cat - > __install_rancher" <<FINAL
#!/bin/bash

function die(){
	echo $error"$@"$plain
	exit 1
}

function info(){
	echo $info"$@"$plain
}


apt-get update; apt-get install -y gdisk lvm2 dosfstools btrfs-progs parted util-linux cpio gzip fdisk
dd if=/dev/zero of=$TARGET_DEV bs=1G count=1
partprobe
gdisk $TARGET_DEV <<EOF
2
x
l
1
m
n
1

2047
ef02
x
l
2048
m
n
2

+256M
ef00
n
3

$SWAP_PART_SIZE
8200
n
4

+1G
8300
n
5

$STATE_PART_SIZE
8300
n
6

+1G
8300
n
7


8300
p
w
y
EOF
partprobe
gdisk -l $TARGET_DEV
sleep 1
partprobe
sleep 1
mkswap -L RANCHER_SWAP $TARGET_DEV3 <<END
y
END
mkfs.vfat -F32 -n EFI $TARGET_DEV2 << END
y
END

# initial cloud-config.yml
echo -n "
rancher:
  network:
    dns:
      nameservers:
$DNS_SETTINGS
    interfaces:
      eth*:
        dhcp: false
      $NET_DEV:
        address: $INST_IP/$NETMASK
        gateway: $GATEWAY
ssh_authorized_keys:
 - $KEY
" > cloud-config.yml

# install on $TARGET_DEV4 (initial state drive, no boot, no state, no oem drive) first
ln $INST_DRIVE /dev/sr0
ls -la /dev/sr0
if ros install --no-reboot -f -t gptsyslinux -c cloud-config.yml -d $TARGET_DEV -p $TARGET_DEV4; then
	info ros insall finished
else
	die ros install failed
fi

# move all files from installer's efi directory to $TARGET_DEV2 (efi drive).
mkdir -p /installing/mnt/efipart
mount $TARGET_DEV2 /installing/mnt/efipart
mkdir -p /installing/mnt/installer
mount $INST_DRIVE /installing/mnt/installer
cp -r /installing/mnt/installer/EFI /installing/mnt/efipart

# move all files from $TARGET_DEV4 (initial state drive) to $TARGET_DEV5 (state drive) first
mkdir -p /installing/opt
mount $TARGET_DEV4 /installing/opt
mkfs.btrfs -L RANCHER_STATE_SIBLING -f $TARGET_DEV5
partprobe
STATE_UUID_SUB=\`/sbin/blkid $TARGET_DEV5 | awk '{print \$4}'\`
if [ -z "\$STATE_UUID_SUB" ];then
	die cannot detect sub uuid of state device, $TARGET_DEV5.
fi
mkdir -p /installing/mnt2
mount $TARGET_DEV5 /installing/mnt2
btrfs subvolume create /installing/mnt2/state_root
echo btrfs subvolume set-default \`btrfs subvolume list /installing/mnt2|grep state_root|awk '{print \$2}'\`
btrfs subvolume set-default \`btrfs subvolume list /installing/mnt2|grep state_root|awk '{print \$2}'\` /installing/mnt2
mkdir /installing/mnt2/state_root/state_top_lvl
cp -a /installing/opt/* /installing/mnt2/state_root
umount /installing/opt
mkfs.btrfs -L RANCHER_BOOT_SIBLING -f $TARGET_DEV4
partprobe
BOOT_UUID_SUB=\`/sbin/blkid $TARGET_DEV4 | awk '{print \$4}'\`
if [ -z "\$BOOT_UUID_SUB" ];then
	die cannot detect uuid of boot device, $TARGET_DEV4.
fi

# initialize oem drive if it does not exists, or remain contact
if [ ! -e /dev/disk/by-label/RANCHER_OEM_SIBLING -o -n "$INITIALIZE_OEM" ]; then
	mkfs.btrfs -L RANCHER_OEM_SIBLING -f $TARGET_DEV7
	partprobe
	OEM_UUID_SUB=\`/sbin/blkid $TARGET_DEV7| awk '{print \$4}'\`
	if [ -z "\$OEM_UUID_SUB" ];then
		die cannot detect uuid of state device, $TARGET_DEV7.
	fi
	mkdir -p /installing/opt2
	mount $TARGET_DEV7 /installing/opt2
	btrfs subvolume create /installing/opt2/oem_root
	echo btrfs subvolume set-default \`btrfs subvolume list /installing/opt2|grep oem_root|awk '{print \$2}'\` /installing/opt2
	btrfs subvolume set-default \`btrfs subvolume list /installing/opt2|grep oem_root|awk '{print \$2}'\` /installing/opt2
	mkdir -p /installing/opt2/oem_root/opt/rancher/conf/grub
	echo -n "USER_SETTINGS='rancher.network.interfaces.$NET_DEV.address=$IP/$NETMASK rancher.network.interfaces.$NET_DEV.gateway=$GATEWAY rancher.network.dns.nameservers=$DNS_SETTINGS_YQ'" > /installing/opt2/oem_root/opt/rancher/conf/grub/grub_env_for_installer
	chmod +x /installing/opt2/oem_root/opt/rancher/conf/grub/grub_env_for_installer
	umount /installing/opt2
else
	OEM_UUID_SUB=\`/sbin/blkid $TARGET_DEV7| awk '{print \$4}'\`
fi
EFI_UUID=\`/sbin/blkid $TARGET_DEV2| awk '{print \$4}'\`
EFI_UUID_ARG=\${EFI_UUID:6:9}
echo EFI_UUID=\$EFI_UUID
echo EFI_UUID_ARG=\$EFI_UUID_ARG

# move all files from $TARGET_DEV4/boot (initial state drive) to $TARGET_DEV2 (boot drive).
mount $TARGET_DEV4 /installing/opt
cp -a /installing/mnt2/state_root/boot/* /installing/opt
mkdir /installing/installer
mount LABEL=RANCHEROS /installing/installer
cp -a /installing/installer/boot/grub /installing/opt/
rm -f /installing/opt/grub/*.cfg
ln -sf ../efi/EFI/boot/grub.cfg /installing/opt/grub/grub.cfg
rm -rf /installing/mnt2/state_root/boot/*

# set up grub.cfg on EFI drive
VMLINUZ_FILE=\`cd /installing/opt;ls -d vmlinuz-*\`
VMLINUZ_FILE_COUNT=\`echo "\$VMLINUZ_FILE" | wc | awk '{print \$1}'\`
if [ "\$VMLINUZ_FILE_COUNT" != "1" ];then
    die cannot detect linux kernel in iso image, or multiple kernel detected.
fi
INITRD_FILE=\`cd /installing/opt;ls -d initrd-*\`
INITRD_FILE_COUNT=\`echo "\$INITRD_FILE" | wc | awk '{print \$1}'\`
if [ "\$INITRD_FILE_COUNT" != "1" ];then
    die cannot detect initrd in iso image, or multiple initrd detected.
fi

INITRD_VER=\${INITRD_FILE#*-}
KERNEL_VER=\${VMLINUZ_FILE#*-}

tmpd=`pwd`
mkdir -p /installing/opt/initrd
cd /installing/opt/initrd
zcat /installing/opt/\$INITRD_FILE | cpio -idmv
cp /sbin/blkid ./bin
mkdir ./lib64
mkdir -p ./usr/lib/x86_64-linux-gnu
cp /lib64/ld-linux-x86-64.so.2 ./lib64
cp /lib/x86_64-linux-gnu/libc.so.6 ./usr/lib/x86_64-linux-gnu
cp /usr/lib/x86_64-linux-gnu/libblkid.so.1 ./usr/lib/x86_64-linux-gnu
find
find | cpio -o -H newc  | gzip -c > ../\$INITRD_FILE-mod
cd $tmpd

GLOBAL_APPEND=\`cat /installing/opt/global.cfg | sed "s/ rancher\.state\.dev=[^ ]*//g" | sed "s/ console=ttyS[^ ]*//g" | sed "s/ rancher.autologin=ttyS[^ ]*//g"\`
GLOBAL_APPEND_ARGS=\${GLOBAL_APPEND#APPEND *}

KERNEL_ARGS="rancher.state.boot_mountopt=degraded rancher.state.oem_mountopt=degraded,subvol=/oem_root rancher.state.mountopt=degraded,subvol=/state_root rancher.password=rancher \$GLOBAL_APPEND_ARGS rw rootflags=degraded,subvol=/state_root"
VGA_SIZE=1024x768
VGA_MODE=775
VGA_ARGS="i915.force_probe vga=\$VGA_MODE video=\$VGA_SIZE"
echo APPEND \$VGA_ARGS \$KERNEL_ARGS > /installing/global.cfg
ROOT_ARGS="rancher.state.boot_dev=\$BOOT_UUID_SUB rancher.state.oem_dev=\$OEM_UUID_SUB rancher.state.dev=\$STATE_UUID_SUB efi=\$EFI_UUID"

cat - > /installing/mnt/efipart/EFI/BOOT/grub.cfg <<END

set timeout=5
set default=0

set gfxmode=\$VGA_SIZE
set gfxpayload=keep


if ! search --no-floppy --fs-uuid --set=efi \$EFI_UUID_ARG; then
	echo "Sorry, no installation found or corrupted. Please reinstall by installer."
	sleep 3000000
fi
if ! regexp --set 1:this_hd (.*),(.*) \\\$efi ;then
	echo "Sorry, no installation found or corrupted. Please reinstall by installer."
	sleep 3000000
fi

boot=\\\$this_hd,gpt4
state=\\\$this_hd,gpt5
oem=\\\$this_hd,gpt7

root=\\\$boot


insmod /grub/x86_64-efi/terminfo.mod
insmod /grub/x86_64-efi/serial.mod
insmod /grub/x86_64-efi/eval.mod

if serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1; then
	set serial_port=0
else
	if serial --unit=1 --speed=115200 --word=8 --parity=no --stop=1; then
		set serial_port=1
	else
		if serial --unit=2 --speed=115200 --word=8 --parity=no --stop=1; then
			set serial_port=2
		fi
	fi
fi
if [ -n "\\\$serial_port" ]; then
	terminal_input console serial_com\\\$serial_port
	terminal_output console serial_com\\\$serial_port
	console="console=ttyS\\\$serial_port,115200n8"
fi


function boot_default_kernel {
	linux    /\$VMLINUZ_FILE \$VGA_ARGS \$KERNEL_ARGS \\\$console \$ROOT_ARGS
	initrd   /\$INITRD_FILE-mod
	boot
}


search --set=installer --label RANCHEROS
search --set=ros_efi --label ROS_EFI # installer's boot efi



if ! regexp menu "\\\$chosen";then
	if [ -n "\\\$ros_efi" -a "\\\$cmdpath" == (\\\$ros_efi)/EFI/BOOT ];then
		# chain loaded from installer's grub
		boot_default_kernel
	fi


	if [ -n "\\\$installer" ]; then
		if [ -e (\\\$efi)/.grub_env_for_installing ]; then # starting reinstration
			root=\\\$installer
			prefix=(\\\$root)/boot
			configfile \\\$prefix/grub/grub.cfg
		else
			# check 2nd phase or 3rd phase of installation
			if [ -e (\\\$state)/state_root/var/lib/rancher/conf/cloud-config.yml ]; then 
				if [ -e (\\\$state)/state_root/home ]; then # starting reinstration or 3rd phase of installation
					root=\\\$installer
					prefix=(\\\$root)/boot
					configfile \\\$prefix/grub/grub.cfg
				else # 2nd phase of installation : boot by installed target disk
					boot_default_kernel
				fi
			fi
		fi
	fi
else
	set menu_chained=1
	timeout=
fi


function search_efi {
	for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
		u=(hd\\\$i,gpt2)/efi/boot/grub.cfg
		if [ -e \\\$u ];then
			if [ "hd\\\$i,gpt2" != "\\\$efi" ];then
				if [ -z "\\\$EFI_LIST" ];then
					EFI_LIST="\\\$i"
				else
					EFI_LIST="\\\$EFI_LIST \\\$i"
				fi
			else
				this_disk=" [hd\\\$i]"
			fi
		fi
	done
}


function disp_efi_menu{
	for i in \\\$EFI_LIST; do
		ex_efi=hd\\\$i,gpt2
		eval "menuentry \"Directly boot hard disk (hd\\\$i)\" {
			prefix=(\\\$ex_efi)/efi/boot
			configfile \\\$prefix/grub.cfg
			echo Cannot continue.... Please reset.
			sleep 100000000
		}"
		eval "menuentry \"Boot menu of hard disk (hd\\\$i)\" {
			prev_prefix=\\\\\$prefix
			prefix=(\\\$ex_efi)/efi/boot
			configfile \\\$prefix/grub.cfg
			prefix=\\\\\$prev_prefix
			chosen=escaped
			while true;do
				configfile (\\\$efi)/efi/boot/grub.cfg
				chosen=escaped
			done
		}"
	done
}


search_efi


function disp_menu {
	eval "menuentry \"Burmilla OS \$INITRD_VER \$KERNEL_VER\\\$this_disk\" {
		linux    /\$VMLINUZ_FILE \$VGA_ARGS \$KERNEL_ARGS \\\$console \$ROOT_ARGS panic=10
		initrd   /\$INITRD_FILE-mod
	}"
	if [ -n "\\\$installer" -a -z "\\\$menu_chained" ]; then
		eval "menuentry \"Directly boot installer\" {
			root=\\\$installer
			prefix=(\\\$root)/boot
			configfile \\\$prefix/grub/grub.cfg
		}"
		eval "menuentry \"Display boot menu in installer\" {
			prev_root=\\\\\$root
			root=\\\$installer
			prev_prefix=\\\\\$prefix
			prefix=(\\\$root)/boot
			configfile \\\$prefix/grub/grub.cfg
			root=\\\\\$prev_root
			prefix=\\\\\$prev_prefix
			if [ -n "\\\$efi" ];then
				chosen=escaped
				while true; do
					configfile (\\\$efi)/efi/boot/grub.cfg
					chosen=escaped
				done
			else
				reboot
			fi
		}"
	fi
	disp_efi_menu
	eval "menuentry \"Burmilla OS \$INITRD_VER \$KERNEL_VER (debug)\\\$this_disk\" {
	    linux    /\$VMLINUZ_FILE vga=ask rancher.debug=true \$KERNEL_ARGS \\\$console \$ROOT_ARGS ---
	    initrd   /\$INITRD_FILE-mod
	}"
}

if [ "\\\$chosen" == "escaped" ]; then
	timeout=
fi
disp_menu

END

echo -n "$USER_SETTINGS_FOR_GRUB_SOURCE_FOR_INSTALLING" > /installing/mnt/efipart/.grub_env_for_installing
echo -e $green"rebooting by target disk ...."

reboot
FINAL
ssh_inst chmod +x __install_rancher
ssh_inst -t sudo ./__install_rancher

# installation 2nd phase : boot by target disk

function reboot_by_passwd(){
	expect -c "
	set timeout 1
	spawn ssh -p 22 -o \"StrictHostKeyChecking no\" -o \"UserKnownHostsFile /dev/null\" -l rancher $INST_IP
	expect \"assword:\"
	send \"rancher\n\"
	expect \"rancher ~]$ \"
	send \"sudo reboot\n\"
	"
}


wait_sshd_start



while ! ssh_inst echo; do
	green Switch to boot by target disk
	green rebooting ...
	reboot_by_passwd
	sleep 10
	wait_sshd_start
done

if [ "`ssh_inst cat /proc/cmdline | grep -o rancher.state.dev=`" = "rancher.state.dev=" ]; then
	cyan_n Waiting initialization.
	while [ -z "`ssh_inst ps ax | grep 'containerd --config /var/run/docker/containerd/containerd.toml'`" ]; do
		sleep 1
		cyan_n .
	done
	ssh_inst sudo rm /var/lib/rancher/conf/cloud-config.d/user_config.yml
	green Switch to boot by installer
	ssh_inst sudo reboot
	wait_sshd_start
else
	die target disk not found
fi

# installation 3rd phase : boot by installer

install_ssh_key

ssh_inst sudo mkdir -p /installing/mnt3 /installing/opt2
ssh_inst sudo mount $TARGET_DEV5 /installing/mnt3 -odegraded
if [ -z "`ssh_inst ls -ld /installing/mnt3/home`" ];then
	die "Please boot from installed hard disk only ONCE."
fi
if [ -n "`ssh_inst ls -ld /installing/mnt3/home|grep oem`" ];then
	die "Already installed with oem disk."
fi

UF=/installing/opt2/var/lib/rancher/conf/cloud-config.d/user_config.yml
ssh_inst bash -c "cat - > __install_rancher" <<FINAL
#!/bin/bash

# patching os-config file
if [ ! -x /usr/bin/yq ]; then
	if [ -n "\`uname -a|grep armv7\`" ]; then
		wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
	fi
	if [ -n "\`uname -a|grep aarc64\`" ]; then
		wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
	fi
	if [ -n "\`uname -a|grep x86_64\`" ]; then
		wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
	fi
fi
if [ ! -x /usr/bin/yq ];then
	echo -e $Red"Cannot download /usr/bin/yq"$Plain
	exit 1
fi

mount -t btrfs -odegraded,subvol=/oem_root $TARGET_DEV7 /installing/opt2
mkdir -p /installing/opt2/var/lib/rancher/conf/cloud-config.d
if [ -z "$USER_CONFIG" -o ! -e "$UF" ]; then
	echo -n "
hostname: $HNAME_FULL
date: \"`date`\"
rancher:
  network:
    dns:
      nameservers:
$DNS_SETTINGS
    interfaces:
      eth*:
        dhcp: false
      $NET_DEV:
        address: $IP/$NETMASK
        gateway: $GATEWAY
  services:
    console:
      environment:
        TZ: $TZL
    syslog:
      environment:
        TZ: $TZL
runcmd:
- mkdir -p /state_top_lvl
- mount /dev/\\\$(readlink /dev/disk/by-uuid/\\\`cat /proc/cmdline|egrep -o "efi=UUID=[0-9a-fA-F-]+"|egrep -o "[0-9a-fA-F-]+\\\$" \\\`| egrep -o "sd.")5 -odegraded,subvol=/ /state_top_lvl
- mkdir -p /oem_top_lvl
- mount /dev/\\\$(readlink /dev/disk/by-uuid/\\\`cat /proc/cmdline|egrep -o "efi=UUID=[0-9a-fA-F-]+"|egrep -o "[0-9a-fA-F-]+\\\$" \\\`| egrep -o "sd.")7 -odegraded,subvol=/ /oem_top_lvl
- mkdir -p /boot
- mount /dev/\\\$(readlink /dev/disk/by-uuid/\\\`cat /proc/cmdline|egrep -o "efi=UUID=[0-9a-fA-F-]+"|egrep -o "[0-9a-fA-F-]+\\\$" \\\`| egrep -o "sd.")4 /boot -odegraded
- mkdir -p /boot/efi
- mount /dev/\\\$(readlink /dev/disk/by-uuid/\\\`cat /proc/cmdline|egrep -o "efi=UUID=[0-9a-fA-F-]+"|egrep -o "[0-9a-fA-F-]+\\\$" \\\`| egrep -o "sd.")2 /boot/efi
- rm -f /boot/efi/.grub_env_for_installing
- swapon /dev/\\\$(readlink /dev/disk/by-uuid/\\\`cat /proc/cmdline|egrep -o "efi=UUID=[0-9a-fA-F-]+"|egrep -o "[0-9a-fA-F-]+\\\$" \\\`| egrep -o "sd.")3
- btrfs quota enable /state_top_lvl
- btrfs quota enable /state_top_lvl/state_root
- btrfs quota enable /oem_top_lvl
- btrfs quota enable /oem_top_lvl/oem_root
#cloud-config
ssh_authorized_keys:
 - $KEY
" > $UF
else
	yq e -i ".hostname|=\"$HNAME_FULL\"" $UF
	yq e -i ".rancher.network.dns.nameservers|=$DNS_SETTINGS_YQ2" $UF
	yq e -i ".rancher.network.interfaces.$NET_DEV.address|=\"$IP/$NETMASK\"" $UF
	yq e -i ".rancher.network.interfaces.$NET_DEV.gateway|=\"$GATEWAY\"" $UF
	yq e -i ".rancher.services.console.environment.TZ|=\"$TZL\"" $UF
	yq e -i ".rancher.services.syslog.environment.TZ|=\"$TZL\"" $UF
	yq e -i ".date|=\"`date`\"" $UF
	c=""
	i=0
	pre="sudo sed -i 's/#Port 22/Port "
	post="/' /etc/ssh/sshd_config"
	while [ 1 ]; do
		case "\`yq e '.write_files.['\$i'].path' $UF\`" in
			"/opt/rancher/bin/start.sh" )
				yq e '.write_files.['\$i'].content' $UF > ./tmp_file
				while IFS= read line; do
					if [ "\${line:0:\${#pre}}" ==  "\$pre" ]; then
						if [ "\${line:\$((\${#line} - \${#post})):\${#post}}" == "\$post" ]; then
							line="\$pre"$PORT"\$post"
						fi
					fi
					echo "\$line"
				done < ./tmp_file > ./tmp_file2
				yq e -i '.write_files.['\$i'].content|="'"\`cat ./tmp_file2\`"'"' $UF
				break
				;;
			"null" )
				break
				;;
		esac
		i=\$(( i + 1 ))
		if [ "$i" == "1000" ];then
			break
		fi
	done
	i=0
	while [ 1 ]; do
		k="\`yq e '.ssh_authorized_keys.['\$i']' $UF\`"
		case "\$k" in
			"$KEY" )
				break
				;;
			"null" )
				echo null
				yq e -i '.ssh_authorized_keys.['\$i']|="'"$KEY"'"' $UF
				break
				;;
		esac
		i=\$(( i + 1 ))
		if [ "$i" == "1000" ];then
			break
		fi
	done
fi

mkdir -p /installing/mnt3/oem_top_lvl
mkdir -p /installing/mnt3/state_top_lvl

[ ! -e /installing/opt2/home ] && cp -af /installing/mnt3/home /installing/opt2
[ ! -e /installing/opt2/root ] && cp -af /installing/mnt3/root /installing/opt2
mkdir -p /installing/opt2/var
[ ! -e /installing/opt2/var/log ] && cp -af /installing/mnt3/var/log /installing/opt2/var
mkdir -p /installing/opt2/var/lib/rancher
[ ! -e /installing/opt2/var/lib/rancher/conf ] && cp -af /installing/mnt3/var/lib/rancher/conf /installing/opt2/var/lib/rancher

rm -rf /installing/mnt3/{root,opt,home,var/log,var/lib/rancher/conf}
chmod 700 /installing/opt2/root
ln -s /usr/share/ros/oem/root /installing/mnt3/root
ln -s /usr/share/ros/oem/home /installing/mnt3/home
ln -s /usr/share/ros/oem/opt /installing/mnt3/opt
ln -s /usr/share/ros/oem/var/log /installing/mnt3/var/log
ln -s /usr/share/ros/oem/var/lib/rancher/conf /installing/mnt3/var/lib/rancher/conf

# ssh config directory
mkdir -p /installing/opt2/etc/ssh
ssh_file=\`find /installing/mnt3 -name "ssh_host_*_key*"| head -1\`
ssh_dir=\${ssh_file%/*}
if [ ! -e /installing/opt2/etc/ssh/sshd_config ];then
	NEW_SSHD_CONF=1
fi
cp -avn \$ssh_dir /installing/opt2/etc
if [ -n "\$NEW_SSHD_CONF" ];then
	sed -i 's/#Port 22/Port $PORT/' /installing/opt2/etc/ssh/sshd_config
	sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /installing/opt2/etc/ssh/sshd_config
fi
echo rm -rf \$ssh_dir
rm -rf \$ssh_dir
echo ln -sf /usr/share/ros/oem/etc/ssh \$ssh_dir
ln -sf /usr/share/ros/oem/etc/ssh \$ssh_dir

#time zone
etc_timezone=\`find /installing/mnt3 -name "timezone"| awk '{print \$1}'\`

apt-get update
apt-get -y install binutils

echo PORT=$PORT
echo TZ=$TZ
echo TZL=$TZL
found=
for d in \`find /installing/mnt3 -name zoneinfo\`; do
	for f in \`find \$d\`; do
		for t in \`strings \$f\`; do
			if [ "\$t" = "$TZL" ] ; then
				found=\$f
				break
			fi
		done
		if [ -n "\$found" ];then
			fn=\${found##*/}
			prv=\${found%/*}
			dstd=\${prv#*/diff}
			mkdir -p /installing/opt2/\$dstd
			cp -av \$found /installing/opt2/\$dstd
			mv \$etc_timezone \$etc_timezone.org
			ln -sf /usr/share/ros/oem/etc/timezone \$etc_timezone
			ln -sf ..\$dstd/\$fn /installing/opt2/etc/timezone
			break
		fi
	done
done


# create startup script
if [ ! -e /installing/opt2/opt/rancher/bin/start.sh ];then
	mkdir -p /installing/opt2/opt/rancher/bin
	cat - > /installing/opt2/opt/rancher/bin/start.sh <<START_UP
#!/bin/bash
mount --bind /usr/share/ros/oem/etc/ssh /etc/ssh
mount --bind /usr/share/ros/oem/root /root
if [  ! -e /bin/env ];then
	ln -s /usr/bin/env /bin/env
fi
kill -HUP \\\$(ps ax |grep 'sshd -D' | grep -v grep | awk '{ print \\\$1 }')
if [ ! -e /etc/profile.d/lang.sh ]; then
	echo export LANG=$LANG > /etc/profile.d/lang.sh
	echo export LC_CTYPE=$LC_CTYPE >> /etc/profile.d/lang.sh
	echo export LC_ALL=$LC_ALL >> /etc/profile.d/lang.sh
fi
if [ ! -e /etc/profile.d/timezone.sh ]; then
	echo export TZ=$TZL > /etc/profile.d/timezone.sh
fi
die(){
	echo \\\$@ >&2
	exit 1
}
# get network parameters from target server booted by installer
NET_DEV=\\\`ip route show|grep default|awk '{print \\\$5}'|head -1\\\`
if [ -z "\\\$NET_DEV" ]; then
	die Cannot find net device for default route.
fi
DS=\\\`cat /etc/resolv.conf| sed -e 's/[ \t]*#.*//' | grep "nameserver" | sed -e 's/^[ \t]*//' | awk '{print \\\$2}'\\\`
DNS_SETTINGS=\\\`echo "\\\$DS" | sed -e 's/^/      - /'\\\`
DSX=""
DSX2=""
for i in \\\$DS; do
	if [ -z "\\\$DSX" ]; then
		DSX='"'\\\$i'"'
		DSX2='\"'\\\$i'\"'
	else
		DSX="\\\$DSX",'"'\\\$i'"'
		DSX2="\\\$DSX2",'\"'\\\$i'\"'
	fi
done
DNS_SETTINGS_YQ="[\\\$DSX]"
DNS_SETTINGS_YQ2="[\\\$DSX2]"
if [ -z "\\\$DNS_SETTINGS" ]; then
	die Cannot find DNS setting.
fi

NETMASK=\\\`ip address show dev $NET_DEV | grep 'inet ' | grep global | awk '{print \\\$2}'| sed -e 's/.*\///'|head -1\\\`
IP=\\\`ip address show dev $NET_DEV | grep 'inet ' | grep global | awk '{print \\\$2}'| sed -e 's/\/.*//'|head -1\\\`
if [ -z "\\\$NETMASK" ]; then
	die Cannot find net mask.
else
	for i in 8 16 24; do
		if [ "\\\$NETMASK" = "\\\$i" ]; then
			netmask_ok=1
		fi
	done
	if [ -z "\\\$netmask_ok" ];then
		die Unsupported netmask, \\\$NETMASK
	fi
fi
GATEWAY=\\\`ip route |egrep '^default via'|awk '{print \\\$3}'|head -1\\\`
if [ -z "\\\$GATEWAY" ]; then
	die Cannot find default gateway.
fi

chain_ren(){
	if [ -e "\\\$1.\\\$((\\\$2 + 1))" ];then
		chain_ren \\\$1 \\\$((\\\$2 + 1))
	fi
	mv "\\\$1.\\\$2", "\\\$1.\\\$((\\\$2 + 1))"
}

USER_SETTINGS_FOR_GRUB_SOURCE="USER_SETTINGS='rancher.network.interfaces.\\\$NET_DEV.address=\\\$IP/\\\$NETMASK rancher.network.interfaces.\\\$NET_DEV.gateway=\\\$GATEWAY rancher.network.dns.nameservers=\\\$DNS_SETTINGS_YQ'"
mkdir -p /oem_top_lvl/oem_root/opt/rancher/conf/grub
if [ "\\\$USER_SETTINGS_FOR_GRUB_SOURCE" != "\\\`cat /oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer\\\`" ]; then
	if [ -e /oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer.1 ]; then
		chain_ren /oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer 1
	fi
	if [ -e /oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer ]; then
		mv /oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer{,.1}
	fi
	echo -n "\\\$USER_SETTINGS_FOR_GRUB_SOURCE" > /oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer
	chmod +x /oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer
fi

START_UP
	chmod 0755 /installing/opt2/opt/rancher/bin/start.sh
fi

chain_ren(){
	if [ -e "$1.$(($2 + 1))" ];then
		chain_ren $1 $(($2 + 1))
	fi
	mv "$1.$2", "$1.$(($2 + 1))"
}

# preserve user setting for grub
mkdir -p /installing/opt2/opt/rancher/conf/grub
if [ "$USER_SETTINGS_FOR_GRUB_SOURCE" != "`cat /oem_root/opt/rancher/conf/grub/grub_env_for_installer`" ]; then
	if [ -e /installing/opt2/opt/rancher/conf/grub/grub_env_for_installer.1 ]; then
		chain_ren /installing/opt2/opt/rancher/conf/grub/grub_env_for_installer 1
	fi
	if [ -e /installing/opt2/opt/rancher/conf/grub/grub_env_for_installer ]; then
		mv /installing/opt2/opt/rancher/conf/grub/grub_env_for_installer{,.1}
	fi
	echo -n "$USER_SETTINGS_FOR_GRUB_SOURCE" > /installing/opt2/opt/rancher/conf/grub/grub_env_for_installer
	chmod +x /installing/opt2/opt/rancher/conf/grub/grub_env_for_installer
fi

mkdir -p /installing/mnt2
mount $TARGET_DEV2  /installing/mnt2
rm -f /installing/mnt2/.grub_env_for_installing

reboot

FINAL

ssh_inst chmod +x __install_rancher
ssh_inst -t sudo ./__install_rancher

