#!/bin/bash


source $(dirname "$(realpath -s "$0")")/bashlib_y

require create_initrd_mod ssh_do write_script
require -s blkid2 do_mount initrd_support do_install chain_bak partNum2Dev

# argument analysis
while (( "$#" )); do
	case "$1" in
		"-f")
			FORCE=1
			;;
		"-r")
			REINSTALL=1
			;;
		"--initialize-oem")
			INITIALIZE_OEM=1
			;;
		"--init-oem")
			INITIALIZE_OEM=1
			;;
		"--overwrite-oem")
			INITIALIZE_OEM=1
			;;
		"--install-vim")
			INSTALL_VIM=1
			;;
		*)
			if [ "${1:0:1}" = "-" ];then
				die "unknown option, '$1'"
			fi
			if [ -n "`echo $1| egrep '^[0-9]+$'`" ];then
				PORT=$1
			fi
			if [ -n "`echo $1| egrep '^[A-Za-z]'`" ];then
				CMD_HNAME=$1
				HNAME=$1
				if [ "${HNAME#*.}" = "`hostname -d`" ];then
					HNAME_FULL=$HNAME
					HNAME=${HNAME%%.*}
				else
					if [ -z "`echo $HNAME| grep '\.'`" ];then
						HNAME_FULL=$HNAME.`hostname -d`
					else
						HNAME_FULL=$HNAME
					fi
				fi
			fi
			if [ -n "`echo $1| grep '\:' |egrep '^[0-9A-Fa-f:]+$'`" ];then
				if [ -z "$INST_IP" ];then
					INST_IP=$1
				else
					IP=$1
				fi
			fi
			if [ -n "`echo $1| grep '\.' |egrep '^[0-9\.]+$'`" ];then
				if [ -z "$INST_IP" ];then
					INST_IP=$1
				else
					IP=$1
				fi
			fi
			if [ -n "`echo $1| egrep '^/dev/[a-z]+$'`" ];then
				TARGET_DEV=$1
			fi
			;;
	esac
	shift
done


function get_ssh_config_entry(){
	local ENT=`sed -e 's/[ \t]*#.*//' ~/.ssh/config | grep -oiPz "(?s)^\s*Host\s+$1(.*?^\s*Host\s|.*)"`
	local PORT=`echo "$ENT" | grep -oiPz "^\s*Port\s+\d+"| head -1 |awk '{print $2}'`
	local IP=`echo "$ENT" | grep -oiPz "^\s*HostName\s+[^\s]+"| head -1 |awk '{print $2}'`
	echo "$IP:$PORT"
}


function get_field2(){
	echo $@|awk '{print $2}'
}


# check IP and PORT in ~/.ssh/config
# load IP and PORT if missing in both command line and user_config.yml
function get_ssh_config_ip_from_name(){
	local HNAME=$1
	if [ -n "`get_ssh_config_entry $HNAME`" ];then
		# $HNAME entry found in ~/.ssh/config 
		local CONFIG_IP_LINE=`get_ssh_config_entry $HNAME |  grep -oiPz '^\s*HostName[\t ]+[\w\-\.]+'`
		if [ -z "$CONFIG_IP_LINE" ];then
			return 1
		else
			IP_IN_CONFIG=`get_field2 $CONFIG_IP_LINE`
			if [ -z $IP_IN_CONFIG ]; then
				return 1
			fi
		fi
		return 0
	else
		return 1
	fi
}


# indispensable arguments
if [ -z "$INST_IP" ]; then
	if [ -n "$CMD_HNAME" ];then
		CTMP=`get_ssh_config_entry $CMD_HNAME`
		if [ -n "$CTMP" ];then
			INST_IP=${CTMP//:*}
			INSTALLED_PORT=${CTMP##*:}
			dbv ssh $INST_IP -p $INSTALLED_PORT -l rancher -o ConnectTimeout=3 -o ConnectionAttempts=3 echo -n
			if ssh $INST_IP -p $INSTALLED_PORT -l rancher -o ConnectTimeout=3 -o ConnectionAttempts=3 echo -n; then
				whiteBgRed_n "Server "
				cyanBgRed_n "'$CMD_HNAME'"
				whiteBgRed_n ", still working. Really overwrite it with new installation? "
				yellowBgRed_n  "[y/n]:"
				echo -n " "
				if ! ask_yes_no; then
					info "Terminated by user."
					exit 1
				fi
			fi
			efi_blkid=$(ssh $INST_IP -p $INSTALLED_PORT -l rancher -o ConnectTimeout=3 -o ConnectionAttempts=3 <<'END'
				sudo mkdir -p /installing/installer
				if sudo mount LABEL=RANCHEROS /installing/installer; then
					efi_dev="`sudo mount|grep 'on /boot/efi type vfat'|awk '{print \$1}'`"
					if [ -n "\$efi_dev" ];then
						sudo blkid "\$efi_dev"
						if ! sudo cp /oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer /boot/efi/.grub_env_for_installing; then
							exit 4
						fi
						sudo touch -d @$((`date +%s` + 300)) /boot/efi/.grub_env_for_installing
						sudo reboot >/dev/null
					else
						exit 3
					fi
					exit 0
				else
					exit 2
				fi
END
			)
			case "$?" in
				0) # logon the target and reboot
					;;
				2)
					die "Installer disk not inserted on target machine."
					;;
				3)
					die "EFI partition not mounted."
					;;
				4)
					die /oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer not found.
					;;
				*) # Time out. Already booted by installer ?
					;;
			esac
			org_efi_uuid_with_tag=`echo "$efi_blkid"|egrep -o " UUID=\"[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]-[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]\""`
			ORG_EFI_UUID=${org_efi_uuid_with_tag:7:9}
		fi
	fi
fi
if [ -z "$INST_IP" ]; then
	err IP address is not found in command line nor in ~/.ssh/config. 
fi
KEY=`cat ~/.ssh/id_ed25519.pub 2>/dev/null`
if [ -z "$KEY" ];then
	err Cannot find public key in ~/.ssh/id_ed25519.pub.
fi
exit_if_err


ssh_param $INST_IP 22 -x -q -o "PasswordAuthentication no" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" -l rancher

# wait ssh connectable
wait_sshd_start


if ssh_do ls -la /installing 2>/dev/null;then
	info "Clear terminated installing."
	for i in `ssh_sudo ls /installing`;do
		ssh_sudo umount /installing/$i
	done
	ssh_sudo rm -rf /installing
fi


# install ssh key if not installed
if ! ssh_do echo; then
	if ! install_ssh_key; then
		die "Cannot log on as user, 'rancher' by password, 'rancher'.
"$cyan"Please enter following commands on console.
	sudo passwd rancher
	rancher
	rancher"
	fi
fi


# check booted from installer disk
if [ "`ssh_do sudo mount | grep /usr/bin/ros | awk '{print $1}'`" != "none" ]; then
	die Not booted from installer disk
fi


ssh_do sudo mkdir -p /installing/installer
# check uefi-grub-enabled installer
if ssh_do sudo mount /dev/disk/by-label/RANCHEROS /installing/installer; then
	if [ -z "`ssh_do sudo cat /installing/installer/boot/grub/grub.cfg`" ]; then
		die Installer disk is not uefi-grub enabled.
	else
		ssh_do sudo umount /installing/installer
	fi
else
	die Installer disk with label, RANCHEROS is not found.
fi

# get network parameters from target server booted by installer
NET_DEV=`ssh_do ip route show|grep default|awk '{print $5}'|head -1`
dbv $NET_DEV
if [ -z "$NET_DEV" ]; then
	die Cannot find net device for default route.
fi

function __set_dns__(){
	local DS="`ssh_do cat /etc/resolv.conf| sed -e 's/[ \t]*#.*//' | grep "nameserver" | sed -e 's/^[ \t]*//' | awk '{print $2}'`"
	DNS_SETTINGS="`ssh_do cat /etc/resolv.conf| sed -e 's/[ \t]*#.*//' | grep "nameserver" | sed -e 's/^[ \t]*//' | awk '{print $2}' | sed -e 's/^/      - /'`"

	local DSX=""
	local DSX2=""
	for i in $DS; do
		if [ -z "$DSX" ]; then
			DSX='"'$i'"'
			DSX2='\"'$i'\"'
		else
			DSX="$DSX",'"'$i'"'
			DSX2="$DSX2",'\"'$i'\"'
		fi
	done
	DNS_SETTINGS_YQ="[$DSX]"
	DNS_SETTINGS_YQ2="[$DSX2]"
}
__set_dns__
unset -f __set_dns__

deb $DNS_SETTINGS_YQ2


if [ -z "$DNS_SETTINGS" ]; then
	die Cannot find DNS setting.
fi
NETMASK=`ssh_do ip address show dev $NET_DEV | grep 'inet ' | grep global | awk '{print $2}'| sed -e 's/.*\///'|head -1`
if [ -z "$NETMASK" ]; then
	die Cannot find net mask.
else
	for i in 8 16 24; do
		if [ "$NETMASK" = "$i" ]; then
			netmask_ok=1
		fi
	done
	if [ -z "$netmask_ok" ];then
		die Unsupported netmask, $NETMASK
	fi
fi
GATEWAY=`ssh_do ip route |egrep 'default via'|awk '{print $3}'|head -1`
if [ -z "$GATEWAY" ]; then
	die Cannot find default gateway.
fi


function extract_uc_params(){
	ssh_do sudo bash <<'END'
		F=/installing/oem_part/var/lib/rancher/conf/cloud-config.d/user_config.yml
		if [ -e $F ]; then
			if [ ! -x /usr/bin/yq ]; then
				if [ -n "`uname -a|grep armv7`" ]; then
					sudo wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
				fi
				if [ -n "`uname -a|grep aarc64`" ]; then
					sudo wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
				fi
				if [ -n "`uname -a|grep x86_64`" ]; then
					sudo wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
				fi
			fi
			if [ ! -x /usr/bin/yq ];then
				echo "ERROR:Cannot download /usr/bin/yq" >&2
			fi
			UC_PORT=`sudo yq '.write_files | select(.[].path == "/opt/rancher/bin/start.sh") | .[0].content' $F|egrep  -o '/Port\s+[0-9]+' | awk '{print  $2}'`
			UC_HNAME_FULL=`sudo yq .hostname $F`
			UC_IPS=`sudo yq .rancher.network.interfaces $F| egrep -o "address:\s+[0-9.:]+" | awk '{print $2}'`
			if [ -n "`sudo grep state_root $F`" ]; then
				echo USER_CONFIG=1
				echo UC_PORT=$UC_PORT
				echo UC_HNAME_FULL=$UC_HNAME_FULL
				echo UC_IPS=$UC_IPS
			fi
		fi
END
}


# check oem drive for getting "user_config.yml" and "$TARGET_DEV"
ssh_do sudo mkdir -p /installing/oem_part
ssh_do sudo umount /installing/oem_part 2> /dev/null
for DRV in `ssh_do sudo ls /dev | egrep ".*7$" | grep -v tty | grep -v loop`; do
	if ssh_do sudo mount -t btrfs -odegraded,rw,subvol=/oem_root /dev/$DRV /installing/oem_part; then
		PARAMS="`extract_uc_params`"
		eval "$PARAMS"
		ssh_do sudo umount /installing/oem_part
		if [ -n "$USER_CONFIG" ]; then
			info "user_config.yml found"
			break
		fi
	fi
done

# set up target device
if [ -n "$USER_CONFIG" ];then
	DRV=${DRV:0:-1}
else
	DRV=""
fi

if [ -n "$TARGET_DEV" ];then
	if [ "$TARGET_DEV" = "/dev/$DRV" ]; then
		TARGET_DEV=/dev/$DRV
	else
		if [ -n "$DRV" ]; then
			die "Command line specified drive, '$TARGET_DEV' is different from installed drive, '/dev/$DRV'."
		fi
	fi
else
	if [ -n "$DRV" ]; then
		TARGET_DEV=/dev/$DRV
	else
		warning destination device not specified. Using \'/dev/sda\'.
		TARGET_DEV=/dev/sda
	fi
fi


if ! ssh_do ls $TARGET_DEV;then
	A_DISKS=`ssh_do bash -c 'readlink -f /dev/disk/by-id/*'|sort|uniq|egrep -v '[0-9]+$'`
	info "Available disks are $A_DISKS."
	die "$TARGET_DEV not found."
fi

function reachable(){
	local mask=$2
	local gateway=$3
	local ip=$1
	local prefix
	case $mask in
		"24" )
			prefix=`echo $ip|grep -oP '^\d{1,3}\.\d{1,3}.\d{1,3}\.'`
			;;
		"16" )
			prefix=`echo $ip|grep -oP '^\d{1,3}\.\d{1,3}\.'`
			;;
		"8" )
			prefix=`echo $ip|grep -oP '^\d{1,3}\.'`
			;;
	esac
	if [ -z "$prefix" ]; then
		return 1
	fi
	local psize=${#prefix}
	if [ "${gateway:0:$psize}" = "$prefix" ]; then
		return 0
	else
		return 1
	fi
}


# set up ip address from command line or user_config.yml found in previous installation.
if [ -n "$IP" ]; then
	if [ -n "$UC_IPS" ]; then
		for i in $UC_IPS; do
			if [ $i == "$IP" ]; then
				UC_IP=$IP
				break
			fi
		done
		if [ -z "$UC_IP" ];then
			if [ -n "$FORCE" ];then
				warning "Overwrite ip address with new one, $cyan'$IP'$yellow over current ip, $cyan'$UC_IPS'$yellow defined in user_config.yml$plain"
			else
				die "Command line specified ip address, $cyan'$IP'$red is different from current ip, $cyan'$UC_IPS'$red defined in user_config.yml$plain"
			fi
		fi
	fi
	if ! reachable $IP $NETMASK $GATEWAY; then
		die "IP address, $cyan'$IP'$red is not accessible to gateway, $cyan'$GATEWAY/$NETMASK'$red."
	fi
else
	if [ -n "$UC_IPS" ]; then
		for i in $UC_IPS; do
			if reachable $i $NETMASK $GATEWAY; then
				info "Using ip address, '$i', defined in user_config.yml"
				IP=$i
				break
			fi
		done
	fi
fi


# set up ssh port number from command line or user_config.yml found in previous installation.
if [ -n "$PORT" ]; then
	if [ -n "$UC_PORT" ]; then
		if [ "$PORT" != "$UC_PORT" ];then
			if [ -n "$FORCE" ];then
				warn "Overwrite ssh port number with new one, $cyan'$PORT'$yellow over current ip, $cyan'$UC_PORT'$yellow defined in user_config.yml$plain"
			else
				die "Command line specified ssh port number, $cyan'$PORT'$red is different from current one, $cyan'$UC_PORT'$red defined in user_config.yml$plain"
			fi
		fi
	fi
else
	if [ -n "$UC_PORT" ]; then
		info "Using ssh port number, '$UC_PORT' defined in user_config.yml."
		PORT=$UC_PORT
	fi
fi


# set up host name from command line or user_config.yml found in previous installation.
if [ -n "$HNAME" ]; then
	if [ -n "$UC_HNAME_FULL" -a "$HNAME_FULL" != "$UC_HNAME_FULL" ]; then
		if [ -n "$FORCE" ]; then
			warn "Overwriting host name with new name, $cyan'$UC_HNAME_FULL'$yellow in user_config.yml (original: $cyan'$HNAME_FULL'$yellow).$plain"
		else
			die "Command line specified host name, $cyan'$HNAME_FULL'$red is different from original host name, $cyan'$HNAME_FULL'$red defined in  user_config.yml.$plain"
		fi
	fi
else
	if [ -n "$UC_HNAME_FULL" ]; then
		info "Using host name, '$UC_HNAME_FULL', defined in user_config.yml."
		HNAME=${UC_HNAME_FULL%%.*}
		HNAME_FULL=$UC_HNAME_FULL
	else
		if [ -n "$FORCE" ]; then
			warn "Using host name, $cyan'burmilla'$yellow, befause missing host name in both command line and user_config.yml.$plain"
		else
			die "Missing host name in both command line and user_config.yml.$plain"
		fi
	fi
fi




# check ~/.ssh/config for hostname and ip address, port number

function get_field2(){
	echo $@|awk '{print $2}'
}


function write_ssh_config(){
	info "writing entry of $1 in ~/.ssh/config with $IP:$PORT"
	mkdir -m 700 -p ~/.ssh
	echo  >> ~/.ssh/config
	echo "Host $1
HostName $IP
User rancher
Port $PORT
" >> ~/.ssh/config
}


function rewrite_ssh_config(){
	warn "rewriting entry of $HNAME_FULL in ~/.ssh/config with $IP:$PORT"
	local insect=""
	local found=""
	while read line; do
		hln=`echo "$line"|grep -ioP "^\s*Host\s+[^#\s]+"|sed -e 's/[ \t]//g'`
		if [ "$hln" = "Host$1" ]; then
			insect=1
			found=1
		else
			if [ -n "$hln" ]; then
				insect=""
			fi
		fi
		if [ -n "$insect" ]; then
			line=`echo "$line"| sed -e 's/^\s*Port\s\s*[0-9][0-9]*/Port '$PORT'/ig'`
            line=`echo "$line"| sed -e 's/^\s*Hostname\s\s*[^\s][^\s]*/HostName '$IP'/ig'`
		fi
		echo "$line"
	done < ~/.ssh/config > ~/.ssh/config.new
	if [ -n "$found" ]; then
		if [ "`cat ~/.ssh/config`" != "`cat ~/.ssh/config.new`" ]; then
			mv -f ~/.ssh/config ~/.ssh/config.bak
			mv ~/.ssh/config.new ~/.ssh/config
			chmod 600 ~/.ssh/config
		fi
	else
		while read line; do
			mln=`echo "$line"|grep -ioP "^\s*Match\s+[^#\s]+"|sed -e 's/[ \t]//g'`
			if [ -n "$mln" -a -z "$found" ]; then
				found=1
				echo "Host $1
HostName $IP
User rancher
Port $PORT

"
			fi
			echo "$line"
		done < ~/.ssh/config > ~/.ssh/config.new
		if [ -z "$found" ]; then
			write_ssh_config $1
		else
			mv -f ~/.ssh/config ~/.ssh/config.bak
			mv ~/.ssh/config.new ~/.ssh/config
			chmod 600 ~/.ssh/config
		fi
	fi
}


function check_ip_and_port(){
	if [ -z "$IP" ];then
		die "Missing IP address for both in the command line and user_config.yml, and cannot find section, $cyan'Host $HNAME'$red in $cyan~./ssh/config$red, where a line like $cyan'HostName [ip address or resolvable host name]'$red should be found.$plain"
	fi
	if [ -z "$PORT" ];then
		RD=0
		while [ "$RD" -le 1024 -o  -n "`grep $RD/tcp /etc/services`" ]; do
			RD=$((RANDOM + RANDOM))
		done
		RANDOM_PORT=1
		PORT=$RD
		warn using randomely chosen port number, $PORT for ssh
	fi
}


function loadOrRewrite(){
	eval local hname='$'$1
	if [ -z "$IP" -a -z "$PORT" ]; then
		local ent=`get_ssh_config_entry $hname`
		IP=${ent/:*}
		PORT=${ent#*:}
	else
		if [ -n "$FORCE" ]; then
			CMD_HNAME=$hname
			check_ip_and_port
			rewrite_ssh_config $hname
		else
			local ent=`get_ssh_config_entry $hname`
			local EIP=${ent/:*}
			local EPORT=${ent#*:}
			if [ -n "$IP" ]; then
				if [ -n "$EIP" ]; then
					if [ "$IP" != "$EIP" ]; then
						die "ip address, '$IP' is different from relevant entry, ip adderss, '$EIP' of '$1' in ~/.ssh/config."
					fi
				fi
			else
				if [ -n "$EIP" ]; then
					IP=$EIP
				fi
			fi
			if [ -n "$PORT" ]; then
				if [ -n "$EPORT" ]; then
					if [ "$PORT" != "$EPORT" ]; then
						die "port number, '$PORT' is different from relevant entry, '$EPORT' of '$1' in ~/.ssh/config."
					fi
				fi
			else
				if [ -n "$EPORT" ]; then
					PORT=$EPORT
				fi
			fi
		fi
	fi
}


if [ -z "$CMD_HNAME" ]; then
	hnEnt=`get_ssh_config_entry $HNAME`
	hnfEnt=`get_ssh_config_entry $HNAME_FULL`
	if [ -n "$hnEnt" ]; then
		if [ -n "$hnfEnt" ]; then
			if [ "$hnEnt" = "$IP:$PORT" ]; then
				CMD_HNAME=$HNAME
			else # shorname entry not match for ip or port number
				if [ "$hnfEnt" = "$IP:$PORT" ]; then #long name match
					CMD_HNAME=$HNAME_FULL
				else # ip and port not matches both short and full name
					loadOrRewrite HNAME
				fi
			fi
		else # only short name entry exists
			if [ "$hnEnt" = "$IP:$PORT" ]; then
				CMD_HNAME=$HNAME
			else # shorname not match
				loadOrRewrite HNAME
			fi
		fi
	else
		if [ -n "$hnfEnt"]; then # only long name entry exists
			if [ "$hnfEnt" = "$IP:$PORT" ]; then
				CMD_HNAME=$HNAME_FULL
			else
				loadOrRewrite HNAME_FULL
			fi
		else # no entry found
			check_ip_and_port
			rewrite_ssh_config $HNAME
			CMD_HNAME=$HNAME
		fi
	fi
else
	hncEnt=`get_ssh_config_entry $CMD_HNAME`
	if [ -n "$hncEnt" ]; then
		if [ "$hncEnt" != "$IP:$PORT" ]; then
			loadOrRewrite CMD_HNAME
		fi
	else
		check_ip_and_port
		rewrite_ssh_config $CMD_HNAME
	fi
fi


##################

USER_SETTINGS_FOR_GRUB_SOURCE="USER_SETTINGS='rancher.network.interfaces.$NET_DEV.address=$IP/$NETMASK rancher.network.interfaces.$NET_DEV.gateway=$GATEWAY rancher.network.dns.nameservers=$DNS_SETTINGS_YQ'"
USER_SETTINGS_FOR_GRUB_SOURCE_FOR_INSTALLING="USER_SETTINGS='rancher.network.interfaces.$NET_DEV.address=$INST_IP/$NETMASK rancher.network.interfaces.$NET_DEV.gateway=$GATEWAY rancher.network.dns.nameservers=$DNS_SETTINGS_YQ'"


TARGET_DEV1="$TARGET_DEV"1
TARGET_DEV2="$TARGET_DEV"2
TARGET_DEV3="$TARGET_DEV"3
TARGET_DEV4="$TARGET_DEV"4
TARGET_DEV5="$TARGET_DEV"5
TARGET_DEV6="$TARGET_DEV"6
TARGET_DEV7="$TARGET_DEV"7


if [ -z "$USER_CONFIG" ]; then
	info Cannot find /var/lib/rancher/conf/cloud-config.d/user_config.yml on oem partition.
fi


ssh_do sudo apt-get -qq -y update
ssh_do sudo apt-get -qq install -y apt-utils
if ! ssh_do sudo apt-get -qq -y install fdisk util-linux; then
	die cannot install fdisk, util-linux
fi

dbv first apt-get checked.


function install_vim(){
	sudo apt-get -y update
	sudo apt-get install -y vim
	echo 'set t_Co=256
set fileencoding=japan
set fileencodings=utf-8
set tabstop=4
let $LANG='ja_JP.UTF-8'
set encoding=utf-8
set backspace=indent,eol,start

if &term == "xterm"
	let &t_ti = &t_ti . "\e[?2004h"
	let &t_te = "\e[?2004l" . &t_te
	let &pastetoggle = "\e[201~"

	function XTermPasteBegin(ret)
    	set paste
    	return a:ret
  	endfunction

	map <special> <expr> <Esc>[200~ XTermPasteBegin("i")
	imap <special> <expr> <Esc>[200~ XTermPasteBegin("")
	cmap <special> <Esc>[200~ <nop>
	cmap <special> <Esc>[201~ <nop>
endif
' > .vimrc
	sudo cp .vimrc /root
}


if [ -n "$INSTALL_VIM" ];then
	ssh_do <<'	END'
		install_vim
	END
fi


DISK_SIZE=`ssh_do -t sudo fdisk -l $TARGET_DEV \|grep \"Disk $TARGET_DEV\"\|awk \"{print $\"\"5}\"|grep -v boundary`
MEM_SIZE=`ssh_do -t cat /proc/meminfo\|grep MemTotal\|awk \"{print $\"\"2}\"`
DISK_SIZE=${DISK_SIZE%$'\r'}
MEM_SIZE=${MEM_SIZE%$'\r'}

if [ "$DISK_SIZE" -ge 2199023255552 ];then # over 2Tbytes
    SWAP_PART_SIZE="+64G"
    STATE_PART_SIZE="+1T"
else
	STATE_PART_SIZE="+$(( DISK_SIZE/2048 ))K"
	if [ "$DISK_SIZE" -ge 1099511627776 ];then # over 1Tbytes
    	SWAP_PART_SIZE="+64G"
	else
		SWAP_PART_SIZE="+$MEM_SIZE"K
	fi
fi

INST_DRIVE=/dev/`ssh_do readlink /dev/disk/by-label/RANCHEROS | sed -e 's/.*\///'`

if [ "$INST_DRIVE" = "/dev/" ];then
	die "Abnormal installer's drive $cyan'$INST_DRIVE'$red."
	exit 1
fi

if [ "${INST_DRIVE:0:-1}" = "$TARGET_DEV" ];then
	die "Installer device is same as target device, $TARGET_DEV. Stop installation."
fi

if [ "$INST_DRIVE" = "" ];then
	die "Installer device is not detected. Stop installation."
fi

if [ "$DISK_SIZE" -le 1073741824 ];then
	die "size of $TARGET_DEV, less than 1G."
fi

# TZ environmental variable
__tz_set__(){
	local TZ_N=`date +"%Z"`
	local TZ_D=`date +"%z"`
	if [ "${TZ_D:0:1}" = "+" ];then
		local TZ_DS="-"
	else
		local TZ_DS=""
	fi
	local TZ_DH1="${TZ_D:1:1}"
	if [ "$TZ_DH1" = "0" ];then
		TZ_DH1=""
	fi
	local TZ_DH="$TZ_DH1${TZ_D:2:1}"
	local TZ_DM="${TZ_D:3:2}"
	if [ "$TZ_DM" = "00" ];then
		TZ_DM=""
	else
		TZ_DM=":${TZ_DM}"
	fi
	TZL="$TZ_N$TZ_DS$TZ_DH$TZ_DM"
}
__tz_set__
unset -f __tz_set__

info "INSTALL FROM "$INST_DRIVE"
NET_INTERFACE="$NET_DEV"
IP=$IP
DNS_SETTINGS="$DNS_SETTINGS"
GATEWAY=$GATEWAY
NETMASK=$NETMASK
DISK_SIZE=$DISK_SIZE
MEM_SIZE=$MEM_SIZE
TZ=$TZL
PORT=$PORT"


#ssh_do sudo ros console switch ubuntu -f
sleep 5

#blkid2

ssh_sudo <<'FINAL'

	apt-get -qq update; apt-get -qq install -y gdisk lvm2 dosfstools btrfs-progs parted util-linux cpio gzip fdisk strace
	dd if=/dev/zero of=$TARGET_DEV bs=1G count=1
	partprobe
	gdisk $TARGET_DEV <<EOF
	2
	x
	l
	1
	m
	n
	1

	2047
	ef02
	x
	l
	2048
	m
	n
	2

	+256M
	ef00
	n
	3

	$SWAP_PART_SIZE
	8200
	n
	4

	+1G
	8300
	n
	5

	$STATE_PART_SIZE
	8300
	n
	6

	+1G
	8300
	n
	7


	8300
	p
	w
	y
	EOF
	partprobe
	gdisk -l $TARGET_DEV
	sleep 1
	partprobe
	sleep 1
	mkswap -L RANCHER_SWAP $TARGET_DEV3 <<END
	y
	END
	mkfs.vfat -F32 -n EFI $TARGET_DEV2 <<END
	y
	END

	# initial cloud-config.yml
	write_env_file cloud-config.yml <<'END'
		rancher:
		  network:
		    dns:
		      nameservers:
		$DNS_SETTINGS
		    interfaces:
		      eth*:
		        dhcp: false
		      $NET_DEV:
		        address: $INST_IP/$NETMASK
		        gateway: $GATEWAY
		ssh_authorized_keys:
		- $KEY
		runcmd:
		- export BOOT_DEV=/dev/$(readlink -f /dev/disk/by-uuid/`cat /proc/cmdline|sed -r 's/^.*[[:space:]]efi=UUID=(([\\]|)['"'"'"]|)([0-9a-fA-F-]+)\1.*$/\3/g'`|sed -r 's/^\/dev\/([a-z]+)[0-9]+$/\1/g')
		- mkdir -p /efi_dev
		- mount "\$BOOT_DEV"2 /efi_dev
		- cp -f /efi_dev/.gruvenv_empty /efi_dev/.grubenv_booting
		- umount /efi_dev
		- rmdir /efi_dev
	END

	# install on $TARGET_DEV4 (initial state drive, no boot, no state, no oem drive) first
	ln $INST_DRIVE /dev/sr0
	deb "`ls -la /dev/sr0`"
	if ros install --no-reboot -f -t gptsyslinux -c cloud-config.yml -d $TARGET_DEV -p $TARGET_DEV4; then
		info ros insall finished
	else
		die ros install failed
	fi

	# move all files from installer's efi directory to $TARGET_DEV2 (efi drive).
	mkdir -p /installing/efipart
	mount $TARGET_DEV2 /installing/efipart
	mkdir -p /installing/installer
	mount $INST_DRIVE /installing/installer
	cp -r /installing/installer/EFI /installing/efipart

	# move all files from $TARGET_DEV4 (initial state drive) to $TARGET_DEV5 (state drive) first
	mkdir -p /installing/boot_dev
	mount $TARGET_DEV4 /installing/boot_dev
	mkfs.btrfs -L RANCHER_STATE_SIBLING -f $TARGET_DEV5
	partprobe
	STATE_UUID_SUB=`/sbin/blkid $TARGET_DEV5 | awk '{print $4}'`
	if [ -z "$STATE_UUID_SUB" ];then
		die cannot detect sub uuid of state device, $TARGET_DEV5.
	fi
	mkdir -p /installing/state_top
	mount $TARGET_DEV5 /installing/state_top
	btrfs subvolume create /installing/state_top/state_root
	echo btrfs subvolume set-default `btrfs subvolume list /installing/state_top|grep state_root|awk '{print $2}'`
	btrfs subvolume set-default `btrfs subvolume list /installing/state_top|grep state_root|awk '{print $2}'` /installing/state_top
	mkdir /installing/state_top/state_root/state_top_lvl
	cp -a /installing/boot_dev/* /installing/state_top/state_root
	umount /installing/boot_dev
	# reformat to create boot drive
	mkfs.btrfs -L RANCHER_BOOT_SIBLING -f $TARGET_DEV4
	partprobe
	BOOT_UUID_SUB=`/sbin/blkid $TARGET_DEV4 | awk '{print $4}'`
	if [ -z "$BOOT_UUID_SUB" ];then
		die cannot detect uuid of boot device, $TARGET_DEV4.
	fi
	# install btrfs mount tool for best mounting for maybe degraded drive.
	do_install do_mount
	do_install partNum2Dev
	dbv `ls -la /usr/bin/bashlib_y`
	dbv `ls -la /usr/bin/do_mount`
	dbv `ls -la /usr/share/bashlib_y`
	# initialize oem drive if it does not exists, or remain contact
	if [ ! -e /dev/disk/by-label/RANCHER_OEM_SIBLING -o -n "$INITIALIZE_OEM" ]; then
		mkfs.btrfs -L RANCHER_OEM_SIBLING -f $TARGET_DEV7
		partprobe
		OEM_UUID_SUB=`/sbin/blkid $TARGET_DEV7| awk '{print $4}'`
		if [ -z "$OEM_UUID_SUB" ];then
			die cannot detect uuid of state device, $TARGET_DEV7.
		fi
		mkdir -p /installing/oem_top
		mount $TARGET_DEV7 /installing/oem_top
		btrfs subvolume create /installing/oem_top/oem_root
		echo btrfs subvolume set-default `btrfs subvolume list /installing/oem_top|grep oem_root|awk '{print $2}'` /installing/oem_top
		btrfs subvolume set-default `btrfs subvolume list /installing/oem_top|grep oem_root|awk '{print $2}'` /installing/oem_top
		mkdir -p /installing/oem_top/oem_root/opt/rancher/conf/grub
		echo -n "USER_SETTINGS='rancher.network.interfaces.$NET_DEV.address=$IP/$NETMASK rancher.network.interfaces.$NET_DEV.gateway=$GATEWAY rancher.network.dns.nameservers=$DNS_SETTINGS_YQ'" > /installing/oem_top/oem_root/opt/rancher/conf/grub/grub_env_for_installer
		chmod +x /installing/oem_top/oem_root/opt/rancher/conf/grub/grub_env_for_installer
		umount /installing/oem_top
	else
		OEM_UUID_SUB=`/sbin/blkid $TARGET_DEV7| awk '{print $4}'`
	fi
	EFI_UUID=`/sbin/blkid $TARGET_DEV2| awk '{print $4}'`
	EFI_UUID_ARG=${EFI_UUID:6:9}
	echo EFI_UUID=$EFI_UUID
	echo EFI_UUID_ARG=$EFI_UUID_ARG

	# move all files from $TARGET_DEV4/boot (initial state drive) to $TARGET_DEV2 (boot drive).
	mount $TARGET_DEV4 /installing/boot_dev
	cp -a /installing/state_top/state_root/boot/* /installing/boot_dev
	mkdir -p /installing/installer
	mount LABEL=RANCHEROS /installing/installer
	cp -a /installing/installer/boot/grub /installing/boot_dev/
	rm -f /installing/boot_dev/grub/*.cfg
	ln -sf ../efi/EFI/boot/grub.cfg /installing/boot_dev/grub/grub.cfg
	rm -rf /installing/state_top/state_root/boot/*

	# set up grub.cfg on EFI drive
	VMLINUZ_FILE=`cd /installing/boot_dev;ls -d vmlinuz-*`
	VMLINUZ_FILE_COUNT=`echo "$VMLINUZ_FILE" | wc | awk '{print $1}'`
	if [ "$VMLINUZ_FILE_COUNT" != "1" ];then
	    die cannot detect linux kernel in iso image, or multiple kernel detected.
	fi
	INITRD_FILE=`cd /installing/boot_dev;ls -d initrd-*|grep -v mod`
	INITRD_FILE_COUNT=`echo "$INITRD_FILE" | wc | awk '{print $1}'`
	if [ "$INITRD_FILE_COUNT" != "1" ];then
	    die cannot detect initrd in iso image, or multiple initrd detected.
	fi

	INITRD_VER=${INITRD_FILE#*-}
	KERNEL_VER=${VMLINUZ_FILE#*-}


	GLOBAL_APPEND=`cat /installing/boot_dev/global.cfg | sed "s/ rancher.state.dev=[^ ]*//g" | sed "s/ console=ttyS[^ ]*//g" | sed "s/ rancher.autologin=ttyS[^ ]*//g"`
	GLOBAL_APPEND_ARGS=${GLOBAL_APPEND#APPEND *}

	KERNEL_ARGS="TZ=$TZL rancher.state.boot_mountopt=rw rancher.state.oem_mountopt=rw,subvol=/oem_root rancher.state.mountopt=rw,subvol=/state_root rancher.password=rancher $GLOBAL_APPEND_ARGS rw rootflags=rw,subvol=/state_root"
	VGA_SIZE=1024x768
	VGA_MODE=775
	VGA_ARGS="i915.force_probe vga=$VGA_MODE video=$VGA_SIZE"
	echo APPEND $VGA_ARGS $KERNEL_ARGS > /installing/global.cfg
	ROOT_ARGS="rancher.state.boot_dev=$BOOT_UUID_SUB rancher.state.oem_dev=$OEM_UUID_SUB rancher.state.dev=$STATE_UUID_SUB efi=$EFI_UUID"

	echo -n "$USER_SETTINGS_FOR_GRUB_SOURCE_FOR_INSTALLING" > /installing/efipart/.grub_env_for_installing
	echo -n '# GRUB Environment Block
installing/efipart/.grubenv_empty
	cp /installing/efipart/.grubenv_empty /installing/efipart/.grubenv_booting
	cp /installing/efipart/.grubenv_empty /installing/efipart/.installing_2nd_phase
	cp /installing/efipart/.grubenv_empty /installing/efipart/.installing_3rd_phase
	write_grub_script /installing/efipart/EFI/BOOT/grub.cfg <<'END'

		set timeout=5
		set default=0

		set gfxmode=$VGA_SIZE
		set gfxpayload=keep

		echo EFI_UUID_ARG=$EFI_UUID_ARG
		if ! search --no-floppy --fs-uuid --set=efi $EFI_UUID_ARG; then
			echo "Sorry, no installation found or corrupted. Please reinstall by installer."
			sleep 3000000
		fi
		echo cat ($efi)/.installing_2nd_phase
		cat ($efi)/.installing_2nd_phase
		echo cat ($efi)/.installing_3rd_phase
		cat ($efi)/.installing_3rd_phase
		if ! regexp --set 1:this_hd (.*),(.*) $efi ;then
			echo "Sorry, no installation found or corrupted. Please reinstall by installer."
			sleep 3000000
		fi

		echo efi=$efi
		boot=$this_hd,gpt4
		state=$this_hd,gpt5
		oem=$this_hd,gpt7

		root=$boot
		
		if load_env --file ($efi)/.grubenv_booting; then
			echo Loaded ($efi)/.grubenv_booting
			if [ "$booting" = "1" ];then
				echo Last boot failed.
				boot_failed="Last boot failed"
				booting=
			else
				echo Last boot successful.
			fi
		else
			echo Load failed: ($efi)/.grubenv_booting
			boot_failed="missing file, '($efi)/.grubenv_booting'"
		fi


		insmod /grub/x86_64-efi/terminfo.mod
		insmod /grub/x86_64-efi/serial.mod
		insmod /grub/x86_64-efi/eval.mod

		if serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1; then
			set serial_port=0
		else
			if serial --unit=1 --speed=115200 --word=8 --parity=no --stop=1; then
				set serial_port=1
			else
				if serial --unit=2 --speed=115200 --word=8 --parity=no --stop=1; then
					set serial_port=2
				fi
			fi
		fi
		if [ -n "$serial_port" ]; then
			terminal_input console serial_com$serial_port
			terminal_output console serial_com$serial_port
			console="console=ttyS$serial_port,115200n8"
		fi


		function boot_default_kernel {
			linux    /$VMLINUZ_FILE $VGA_ARGS $KERNEL_ARGS $console $ROOT_ARGS
			if [ -e /$INITRD_FILE-mod ];then
				initrd   /$INITRD_FILE-mod
			else
				initrd   /$INITRD_FILE
			fi
			booting=1
			save_env booting --file ($efi)/.grubenv_booting
			boot
		}


		search --set=installer --label RANCHEROS
		search --set=ros_efi --label ROS_EFI # installer's boot efi

		echo 1
		function boot_installer{
			root=$installer
			prefix=($root)/boot
			configfile $prefix/grub/grub.cfg
			echo "loading configfile, $prefix/grub/grub.cfg, failed."
			sleep 10
			boot_installer_failed=1
			false
		}

		echo 2

		function check_installation_terminated{
			echo cat ($efi)/.installing_$1_phase
			cat ($efi)/.installing_$1_phase
			if load_env --file ($efi)/.installing_$1_phase; then
				tmp='tmp=$installing_'$1'_phase'
				echo $tmp
				eval $tmp
				echo $tmp
				if [ -n "$tmp" ]; then
					echo "Installation terminated."
					sleep 10
					boot_failed="Installation terminated."
					return 1
				fi
			fi
			installing_$1_phase=1
			echo setting installing_$1_phase=1
			save_env installing_$1_phase --file ($efi)/.installing_$1_phase
			return 0
		}

		echo 3
		if [ -n "$chosen" ];then
			if ! regexp menu "$chosen";then 
				# chain loaded from other drive's grub
				boot_default_kernel
			else # menu selection has been chosen by previous menu
				set menu_chained=1
				timeout=
			fi
		else # no previous menu
			if [ "$cmdpath" != "($efi)/EFI/BOOT" ];then  # chained from grub booted by other drive
				chained=1
			else
				chained=
			fi
		fi
		


		echo 4

		while true; do
			if [ -n "$boot_failed" ];then
				timeout=
			else
				if [ -n "$installer" ]; then
					if [ -e ($efi)/.reboot ];then
						root=$installer
						prefix=($root)/boot
						configfile $prefix/grub/grub.cfg
					else
						if [ -e ($efi)/.grub_env_for_installing ]; then # starting reinstration
							# check 2nd phase or 3rd phase of installation
							if [ -e ($state)/state_root/var/lib/rancher/conf/cloud-config.yml ]; then 
								echo ($state)/state_root/var/lib/rancher/conf/cloud-config.yml found
								if [ -e ($state)/state_root/home ]; then # starting 3rd phase of installation
									if ! check_installation_terminated 3rd; then
										break
									fi
									boot_installer
								else
									boot_failed="Installation error."
								fi
								break
							else
								echo ($state)/state_root/var/lib/rancher/conf/cloud-config.yml not found
								if [ -e ($state)/state_root/home ]; then # has been rebooted for reinstalling
									echo ($state)/state_root/home found
									boot_installer
								else # 2nd phase of installation : boot by target disk
									if [ -n "$chained" ];then
										boot_default_kernel
									fi
									if ! check_installation_terminated 2nd; then
										break
									fi
									boot_default_kernel
								fi
								break
							fi
						fi
					fi
				fi
			fi
			break
		done
		echo 5
		function search_efi {
			for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
				g=(hd$i,gpt2)/efi/boot/grub.cfg
				l=(hd$i,gpt2)/.last_booted
				if [ -e $g ];then
					if [ "hd$i,gpt2" == "$efi" ];then
						this_disk=" [hd$i]"
						if [ -n $boot_failed ];then
							this_disk="$this_disk : $boot_failed"
						else
							if [ -e $l ];then
								this_disk="$this_disk : Last booted"
							fi
						fi
					else
						if [ -e $l ];then
							last_booted="$i"
						else
							if [ -z "$EFI_LIST" ];then
								EFI_LIST="$i"
							else
								EFI_LIST="$EFI_LIST $i"
							fi
						fi
					fi
				fi
			done
		}

		echo 6
		function disp_efi_menu{
			for i in $1; do
				ex_efi=hd$i,gpt2
				eval "menuentry \\\"Directly boot hard disk (hd$i)$2\\\" {
					prefix=($ex_efi)/efi/boot
					configfile $prefix/grub.cfg
					echo "Cannot load config file for hard disk (hd$i)."
					sleep 10
					false
				}"
				eval "menuentry \\\"Boot menu of hard disk (hd$i)$2\\\" {
					prev_prefix=\\$prefix
					prefix=($ex_efi)/efi/boot
					configfile $prefix/grub.cfg
					prefix=\\$prev_prefix
					chosen=escaped
					#while true;do
					#	configfile ($efi)/efi/boot/grub.cfg
					#	chosen=escaped
					#done
					false
				}"
			done
		}
		echo 7

		search_efi


		function disp_menu {
			eval "menuentry 'Burmilla OS ""$INITRD_VER $KERNEL_VER$this_disk""' {
				linux    /$VMLINUZ_FILE $VGA_ARGS $KERNEL_ARGS $console $ROOT_ARGS panic=10
				if [ -e /$INITRD_FILE-mod ];then
					initrd   /$INITRD_FILE-mod
				else
					initrd   /$INITRD_FILE
				fi
			}"
			if [ -n "$last_booted" ];then
				set default=1
				disp_efi_menu "$last_booted" " : Last booted"
			fi
			if [ -n "$installer" -a -z "$menu_chained" ]; then
				eval "menuentry 'Directly boot installer' {
					root=$installer
					prefix=(\$root)/boot
					configfile \$prefix/grub/grub.cfg
				}"
				eval "menuentry 'Display boot menu in installer' {
					prev_root=\$root
					root=$installer
					prev_prefix=\$prefix
					prefix=(\$root)/boot
					configfile \$prefix/grub/grub.cfg
					root=\$prev_root
					prefix=\$prev_prefix
					if [ -n \"$efi\" ];then
						chosen=escaped
						while true; do
							configfile ($efi)/efi/boot/grub.cfg
							chosen=escaped
						done
					else
						reboot
					fi
				}"
			fi
			disp_efi_menu "$EFI_LIST"
			eval "menuentry \"Burmilla OS $INITRD_VER $KERNEL_VER (debug)$this_disk\" {
			    linux    /$VMLINUZ_FILE vga=ask DEBUG=1 rancher.debug=true $KERNEL_ARGS $console $ROOT_ARGS ---
				if [ -e /$INITRD_FILE-mod ];then
					initrd   /$INITRD_FILE-mod
				else
					initrd   /$INITRD_FILE
				fi
			}"
		}

		if [ "$chosen" == "escaped" ]; then
			timeout=
		fi
		disp_menu
	END
FINAL

dbv $INITRD_FILE


if [ "$?" = "1" ];then
	exit 1
fi

if [ -z "$INITRD_FILE" ];then
	die 'missing $INITRD_FILE'
fi

ssh_sudo <<'FINAL'
	cat /installing/efipart/.installing_2nd_phase
	umount /installing/installer
	umount /installing/boot_dev
	umount /installing/state_top
	umount /installing/installer
	umount /installing/efipart
	sleep 5
	echo -e $green"rebooting by target disk ...."
	reboot
FINAL

# installation 2nd phase : boot by target disk

function reboot_by_passwd(){
	expect -c "
	set timeout 1
	spawn ssh -p 22 -o \"StrictHostKeyChecking no\" -o \"UserKnownHostsFile /dev/null\" -l rancher $INST_IP
	expect \"assword:\"
	send \"rancher\n\"
	expect \"rancher ~]$ \"
	send \"sudo reboot\n\"
	"
}


wait_sshd_start


while ! ssh_do echo; do
	green Switch to boot by target disk
	green rebooting ...
	reboot_by_passwd
	sleep 10
	wait_sshd_start
done


EFI_UUID_ARG_S=$(ssh_do cat /proc/cmdline| sed -r 's/^.*[[:space:]]efi=UUID=((\\|)['"'"'"]|)([0-9a-fA-F-]+)\1.*$/\3/g')
TARGET_DEV_S=/dev/$(
ssh_sudo <<'END'
	readlink -f /dev/disk/by-uuid/$(cat /proc/cmdline|sed -r 's/^.*[[:space:]]efi=UUID=((\\|)['"'"'"]|)([0-9a-fA-F-]+)\1.*$/\3/g')|sed -r 's/^\/dev\/([a-z]+)[0-9]+$/\1/g'
END
)
deb TARGET_DEV_S="'"$TARGET_DEV_S"'"
deb TARGET_DEV="'"$TARGET_DEV"'"

if [ "$TARGET_DEV" = "$TARGET_DEV_S" ]; then
	cyan_n Waiting initialization.
	while [ -z "`ssh_do ps ax | grep 'containerd --config /var/run/docker/containerd/containerd.toml'`" ]; do
		sleep 1
		cyan_n .
	done
	ssh_sudo <<'	END'
		if [ -n "$INSTALL_VIM" ];then
			install_vim
		fi
		mkdir -p /efipart
		mount $TARGET_DEV2 /efipart
		cp -f /efipart/.grubenv_empty /efipart/.installing_2nd_phase
		umount /efipart
		rmdir /efipart
		rm /var/lib/rancher/conf/cloud-config.d/user_config.yml
		do_install do_mount
		do_install blkid2
		do_install chain_bak
		do_install partNum2Dev
		green Switch to boot by installer
		reboot
	END
	wait_sshd_start
else
	die target disk not found
fi


# installation 3rd phase : boot by installer

install_ssh_key


if [ -n "$INSTALL_VIM" ];then
	ssh_do <<'	END'
		install_vim
	END
fi


ssh_do sudo mkdir -p /installing/state /installing/oem_part
ssh_do sudo mount $TARGET_DEV5 /installing/state
if [ -z "`ssh_do ls -ld /installing/state/home`" ];then
	die "Please boot from installed hard disk only ONCE."
fi
if [ -n "`ssh_do ls -ld /installing/state/home|grep oem`" ];then
	die "Already installed with oem disk."
fi

UF=/installing/oem_part/var/lib/rancher/conf/cloud-config.d/user_config.yml
ssh_sudo <<'FINAL'
	#!/bin/bash

	do_mount 4 /installing/boot_dev
 	create_initrd_mod
	ls -la /installing/boot_dev

	# patching os-config file
	if [ ! -x /usr/bin/yq ]; then
		if [ -n "`uname -a|grep armv7`" ]; then
			wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
		fi
		if [ -n "`uname -a|grep aarc64`" ]; then
			wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
		fi
		if [ -n "`uname -a|grep x86_64`" ]; then
			wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
		fi
	fi
	if [ ! -x /usr/bin/yq ];then
		echo -e $red"Cannot download /usr/bin/yq"$plain
		exit 1
	fi

	do_mount 7 /installing/oem_part
	mkdir -p /installing/oem_part/var/lib/rancher/conf/cloud-config.d
	if [ -z "$USER_CONFIG" -o ! -e "$UF" ]; then
		DATE=`TZ=$TZL date`
		write_env_file $UF << '	FEND'
			hostname: $HNAME_FULL
			date: $DATE
			rancher:
			  network:
			    dns:
			      nameservers:
			$DNS_SETTINGS
			    interfaces:
			      eth*:
			        dhcp: false
			      $NET_DEV:
			        address: $IP/$NETMASK
			        gateway: $GATEWAY
			  services:
			    console:
			      environment:
			        TZ: $TZL
			    syslog:
			      environment:
			        TZ: $TZL
			runcmd:
			- do_mount 5 -o subvol=/ /state_top_lvl
			- do_mount 7 -o subvol=/ /oem_top_lvl
			- do_mount 4 /boot
			- do_mount 2 /boot/efi
			- cp -f /boot/efi/.gruvenv_empty /boot/efi/.gruvenv_booting
			- rm -f /boot/efi/.grub_env_for_installing
			- swapon `cat /tmp/boot_drive`3
			- btrfs quota enable /state_top_lvl
			- btrfs quota enable /state_top_lvl/state_root
			- btrfs quota enable /oem_top_lvl
			- btrfs quota enable /oem_top_lvl/oem_root
			#cloud-config
			ssh_authorized_keys:
			- $KEY
		FEND
	else
		yq e -i ".hostname|=\"$HNAME_FULL\"" $UF
		yq e -i ".rancher.network.dns.nameservers|=$DNS_SETTINGS_YQ2" $UF
		yq e -i ".rancher.network.interfaces.$NET_DEV.address|=\"$IP/$NETMASK\"" $UF
		yq e -i ".rancher.network.interfaces.$NET_DEV.gateway|=\"$GATEWAY\"" $UF
		yq e -i ".rancher.services.console.environment.TZ|=\"$TZL\"" $UF
		yq e -i ".rancher.services.syslog.environment.TZ|=\"$TZL\"" $UF
		yq e -i ".date|=\"`date`\"" $UF
		c=""
		i=0
		pre="sudo sed -i 's/#Port 22/Port "
		post="/' /etc/ssh/sshd_config"
		while [ 1 ]; do
			case "`yq e '.write_files.['$i'].path' $UF`" in
				"/opt/rancher/bin/start.sh" )
					yq e '.write_files.['$i'].content' $UF > ./tmp_file
					while IFS= read line; do
						if [ "${line:0:${#pre}}" ==  "$pre" ]; then
							if [ "${line:$((${#line} - ${#post})):${#post}}" == "$post" ]; then
								line="$pre"$PORT"$post"
							fi
						fi
						echo "$line"
					done < ./tmp_file > ./tmp_file2
					yq e -i '.write_files.['$i'].content|="'"`cat ./tmp_file2`"'"' $UF
					break
					;;
				"null" )
					break
					;;
			esac
			i=$(( i + 1 ))
			if [ "$i" == "1000" ];then
				break
			fi
		done
		i=0
		while [ 1 ]; do
			k="`yq e '.ssh_authorized_keys.['$i']' $UF`"
			case "$k" in
				"$KEY" )
					break
					;;
				"null" )
					echo null
					yq e -i '.ssh_authorized_keys.['$i']|="'"$KEY"'"' $UF
					break
					;;
			esac
			i=$(( i + 1 ))
			if [ "$i" == "1000" ];then
				break
			fi
		done
	fi

	mkdir -p /installing/state/oem_top_lvl
	mkdir -p /installing/state/state_top_lvl

	[ ! -e /installing/oem_part/home ] && cp -af /installing/state/home /installing/oem_part
	[ ! -e /installing/oem_part/root ] && cp -af /installing/state/root /installing/oem_part
	mkdir -p /installing/oem_part/var
	[ ! -e /installing/oem_part/var/log ] && cp -af /installing/state/var/log /installing/oem_part/var
	mkdir -p /installing/oem_part/var/lib/rancher
	[ ! -e /installing/oem_part/var/lib/rancher/conf ] && cp -af /installing/state/var/lib/rancher/conf /installing/oem_part/var/lib/rancher

	rm -rf /installing/state/{root,opt,home,var/log,var/lib/rancher/conf}
	chmod 700 /installing/oem_part/root
	ln -s /usr/share/ros/oem/root /installing/state/root
	ln -s /usr/share/ros/oem/home /installing/state/home
	ln -s /usr/share/ros/oem/opt /installing/state/opt
	ln -s /usr/share/ros/oem/var/log /installing/state/var/log
	ln -s /usr/share/ros/oem/var/lib/rancher/conf /installing/state/var/lib/rancher/conf

	# ssh config directory
	mkdir -p /installing/oem_part/etc/ssh
	ssh_file=`find /installing/state -name "ssh_host_*_key*"| head -1`
	ssh_dir=${ssh_file%/*}
	if [ ! -e /installing/oem_part/etc/ssh/sshd_config ];then
		NEW_SSHD_CONF=1
	fi
	cp -an $ssh_dir /installing/oem_part/etc
	if [ -n "$NEW_SSHD_CONF" ];then
		sed -i 's/#Port 22/Port '$PORT'/' /installing/oem_part/etc/ssh/sshd_config
		sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /installing/oem_part/etc/ssh/sshd_config
	else
		if [ -n "$FORCE" ];then
			sed -i 's/#Port 22/Port '$PORT'/' /installing/oem_part/etc/ssh/sshd_config
			sed -i 's/Port[[:space:]]*[0-9][0-9]*/Port '$PORT'/' /installing/oem_part/etc/ssh/sshd_config
			echo -e $red`grep Port /installing/oem_part/etc/ssh/sshd_config`$plain
		else
			echo -e $purple"No force option."$plain
		fi
	fi
	echo -e $green"Rewirte sshd_config finished"$plain
	echo rm -rf $ssh_dir
	rm -rf $ssh_dir
	echo ln -sf /usr/share/ros/oem/etc/ssh $ssh_dir
	ln -sf /usr/share/ros/oem/etc/ssh $ssh_dir

	#time zone
	etc_timezone=`find /installing/state -name "timezone"| awk '{print $1}'`

	apt-get -qq update
	apt-get -qq -y install binutils

	echo PORT=$PORT
	echo TZ=$TZ
	echo TZL=$TZL
	found=
	for d in `find /installing/state -name zoneinfo`; do
		for f in `find $d`; do
			for t in `strings $f`; do
				if [ "$t" = "$TZL" ] ; then
					found=$f
					break
				fi
			done
			if [ -n "$found" ];then
				fn=${found##*/}
				prv=${found%/*}
				dstd=${prv#*/diff}
				mkdir -p /installing/oem_part/$dstd
				cp -a $found /installing/oem_part/$dstd
				mv $etc_timezone $etc_timezone.org
				ln -sf /usr/share/ros/oem/etc/timezone $etc_timezone
				ln -sf ..$dstd/$fn /installing/oem_part/etc/timezone
				break
			fi
		done
	done


	# create startup script
	mkdir -p /installing/oem_part/opt/rancher/bin
	write_script 0755 /installing/oem_part/opt/rancher/bin/start.sh <<'START_UP'
		#!/bin/bash
		# Do not edit this file
		# 
		source bashlib_y
		chain_bak -10 /var/log/boot/init.log /var/log/boot/init.log.0
		if [ ! -L /etc/ssh ];then
			info symlink /usr/share/ros/oem/etc/ssh /etc/ssh
			rm -rf /etc/ssh
			ln -sf /usr/share/ros/oem/etc/ssh /etc/ssh
			kill -HUP $(ps ax |grep 'sshd -D' | grep -v grep | awk '{ print $1 }')
		fi
		if [ ! -L /root ];then
			info symlink /usr/share/ros/oem/root /root
			rm -rf /root
			ln -sf /usr/share/ros/oem/root /root
		fi
		if [  ! -e /bin/env ];then
			ln -s /usr/bin/env /bin/env
		fi
		if [ ! -e /etc/profile.d/lang.sh ]; then
			echo export LANG=$LANG > /etc/profile.d/lang.sh
			echo export LC_CTYPE=$LC_CTYPE >> /etc/profile.d/lang.sh
			echo export LC_ALL=$LC_ALL >> /etc/profile.d/lang.sh
		fi
		if [ ! -e /etc/profile.d/timezone.sh ]; then
			echo export TZ=$TZL > /etc/profile.d/timezone.sh
		fi
		# get network parameters from target server booted by installer
		NET_DEV=`ip route show|grep default|awk '{print $5}'|head -1`
		if [ -z "$NET_DEV" ]; then
			die Cannot find net device for default route.
		fi
		DS=`cat /etc/resolv.conf| sed -e 's/[ \t]*#.*//' | grep "nameserver" | sed -e 's/^[ \t]*//' | awk '{print $2}'`
		DNS_SETTINGS=`echo "$DS" | sed -e 's/^/      - /'`
		DSX=""
		DSX2=""
		for i in $DS; do
			if [ -z "$DSX" ]; then
				DSX='"'$i'"'
				DSX2='\"'$i'\"'
			else
				DSX="$DSX",'"'$i'"'
				DSX2="$DSX2",'\"'$i'\"'
			fi
		done
		DNS_SETTINGS_YQ="[$DSX]"
		DNS_SETTINGS_YQ2="[$DSX2]"
		if [ -z "$DNS_SETTINGS" ]; then
			die Cannot find DNS setting.
		fi

		NETMASK=`ip address show dev $NET_DEV | grep 'inet ' | grep global | awk '{print $2}'| sed -e 's/.*\///'|head -1`
		IP=`ip address show dev $NET_DEV | grep 'inet ' | grep global | awk '{print $2}'| sed -e 's/\/.*//'|head -1`
		if [ -z "$NETMASK" ]; then
			die Cannot find net mask.
		else
			for i in 8 16 24; do
				if [ "$NETMASK" = "$i" ]; then
					netmask_ok=1
				fi
			done
			if [ -z "$netmask_ok" ];then
				die Unsupported netmask, $NETMASK
			fi
		fi
		GATEWAY=`ip route |egrep '^default via'|awk '{print $3}'|head -1`
		if [ -z "$GATEWAY" ]; then
			die Cannot find default gateway.
		fi

		USER_SETTINGS_FOR_GRUB_SOURCE="USER_SETTINGS='rancher.network.interfaces.$NET_DEV.address=$IP/$NETMASK rancher.network.interfaces.$NET_DEV.gateway=$GATEWAY rancher.network.dns.nameservers=$DNS_SETTINGS_YQ'"
		mkdir -p /oem_top_lvl/oem_root/opt/rancher/conf/grub
		kpF=/oem_top_lvl/oem_root/opt/rancher/conf/grub/grub_env_for_installer
		if [ ! -e $kpF ];then
			noKernelParam=1
		else
			if [ "$USER_SETTINGS_FOR_GRUB_SOURCE" != "`cat $kpF`" ]; then
				noKernelParam=1
			fi
		fi
		if [ -n "$noKernelParam" ];then
			chain_bak $kpF
			echo -n "$USER_SETTINGS_FOR_GRUB_SOURCE" > $kpF
			chmod +x $kpF
		fi

		mkdir -p /mnt_efi_test
		# clear booting flags on all sibling drives
		/sbin/blkid | grep LABEL=\"EFI\" | awk '{print substr($1, 1, length($1) - 1)}' | while read efi; do
			mount $efi /mnt_efi_test
			rm -f /mnt_efi_test/.last_booted
			umount /mnt_efi_test
		done
		do_mount 2 /mnt_efi_test
		touch /mnt_efi_test/.last_booted
		umount /mnt_efi_test
		rmdir /mnt_efi_test
		mkdir -p $(__FILE_DIR__)/startup.d
		ls $(__FILE_DIR__)/startup.d/*.sh 2>/dev/null|sort|while read sh;do
			if [ -n "$sh" ];then
				. $sh
			fi
		done
	START_UP
	deb wc start.sh=`wc /installing/oem_part/opt/rancher/bin/start.sh`
	deb wc start.sh\(awk 1\)=`wc /installing/oem_part/opt/rancher/bin/start.sh|awk '{print $1}'`
	if [ "`wc /installing/oem_part/opt/rancher/bin/start.sh|awk '{print $1}'`" = 1 ];then
		die "failed to create start.sh"
	fi


	# preserve user setting for grub
	mkdir -p /installing/oem_part/opt/rancher/conf/grub
	if [ "$USER_SETTINGS_FOR_GRUB_SOURCE" != "`cat /installing/oem_part/opt/rancher/conf/grub/grub_env_for_installer 2> /dev/null`" ]; then
		if [ -e /installing/oem_part/opt/rancher/conf/grub/grub_env_for_installer ];then
			chain_bak /installing/oem_part/opt/rancher/conf/grub/grub_env_for_installer
		fi
		echo -n "$USER_SETTINGS_FOR_GRUB_SOURCE" > /installing/oem_part/opt/rancher/conf/grub/grub_env_for_installer
		chmod +x /installing/oem_part/opt/rancher/conf/grub/grub_env_for_installer
	fi

	mkdir -p /installing/efipart
	mount $TARGET_DEV2  /installing/efipart
	rm -f /installing/efipart/.grub_env_for_installing
	umount /installing/efipart
	umount /installing/oem_part
	reboot

FINAL

