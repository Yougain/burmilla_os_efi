#!/bin/bash

source bashlib_y

require create_initrd_mod ssh_do write_script
require -s blkid2 do_mount initrd_support do_install chain_bak partNum2Dev args parse_func

apt_check(){
	local sudo
	if [ "`id -u`" != 0 ];then
		sudo=sudo
	fi
	if [ -z "`ls -A /var/lib/apt/lists`" ];then
		$sudo apt update
	fi
	local lst
	while (( "$#" )); do
		if ! dpkg -L $1 >/dev/null 2>&1;then
			lst+=($1)
		fi
		shift
	done
	$sudo apt-get install -y ${lst[@]}
}

# argument analysis
while (( "$#" )); do
	dbv
	if [ -n "$next_install_ssh_port" ];then
		next_install_ssh_port=""
		INSTALL_SSH_PORT=$1
		if ! [[ $1 =~ ^[0-9]+$ ]];then
			die "argument of '--install-ssh-port', '$1' is not digits."
		fi
	else
		case "$1" in
			"-f")
				FORCE=1
				;;
			"-y")
				ASK_YES_NO=yes
				;;
			"-n")
				ASK_YES_NO=no
				;;
			"-r")
				REINSTALL=1
				;;
			"--initialize-oem")
				INITIALIZE_OEM=1
				;;
			"--init-oem")
				INITIALIZE_OEM=1
				;;
			"--overwrite-oem")
				INITIALIZE_OEM=1
				;;
			"--install-vim")
				INSTALL_VIM=1
				;;
			"--install-ssh-port")
				next_install_ssh_port=1
				;;
			*)
				if [[ $1 =~ ^([A-Za-z_][A-Za-z0-9_]*)=(.*)$ ]]; then
					n="${BASH_REMATCH[1]}"
					a="${BASH_REMATCH[2]}"
					x=$n="`shellquote a`"
					if [ -z "$EXTRA_KPARAMS" ];then
						LINUX_EXTRA="$x"
					else
						LINUX_EXTRA="$LINUX_EXTRA $x"
					fi
					shift
					continue
				fi
				if [ "${1:0:1}" = "-" ];then
					die "unknown option, '$1'"
				fi
				if [[ $1 =~ .+=.+ ]];then
					TARGET_DEV_ATTR+=("$1")
					if [ -n "$TARGET_DEV" ];then
						die "cannot use both device file ($TARGET_DEV) and attribute expression ($1)"
					fi
					shift
					continue
				fi
				if [ -n "`echo $1| egrep '^[0-9]+$'`" ];then
					PORT=$1
					shift
					continue
				fi
				if [ -n "`echo $1| egrep '^[A-Za-z]'`" ];then
					CMD_HNAME=$1
					HNAME=$1
					if [ "${HNAME#*.}" = "`hostname -d`" ];then
						HNAME_FULL=$HNAME
						HNAME=${HNAME%%.*}
					else
						if [ -z "`echo $HNAME| grep '\.'`" ];then
							HNAME_FULL=$HNAME.`hostname -d`
						else
							HNAME_FULL=$HNAME
						fi
					fi
					shift
					continue
				fi
				if [ -n "`echo $1| grep '\:' |egrep '^[0-9A-Fa-f:]+$'`" ];then
					if [ -z "$INST_IP" ];then
						INST_IP=$1
					else
						IP=$1
					fi
					shift
					continue
				fi
				if [ -n "`echo $1| grep '\.' |egrep '^[0-9\.]+$'`" ];then
					if [ -z "$INST_IP" ];then
						INST_IP=$1
					else
						IP=$1
					fi
					shift
					continue
				fi
				if [ -n "`echo $1| egrep '^/dev/[a-z]+$'`" ];then
					if [ -n "$TARGET_DEV" ];then
						die "cannot use two devices, #{$TARGET_DEV} and $1"
					fi
					if [ -n "$TARGET_DEV_ATTR" ];then
						die "cannot use both device file ($1) and attribute expression (#{$TARGET_DEV_ATTR[@]})"
					fi
					TARGET_DEV=$1
					shift
					continue
				fi
				;;
		esac
	fi
	shift
done

dbv
function get_ssh_config_entry(){
	local ENT=`sed -e 's/[ \t]*#.*//' ~/.ssh/config | grep -oiPz "(?s)^\s*Host\s+$1(.*?^\s*Host\s|.*)"`
	local PORT=`echo "$ENT" | grep -oiPz "^\s*Port\s+\d+"| head -1 |awk '{print $2}'`
	local IP=`echo "$ENT" | grep -oiPz "^\s*HostName\s+[^\s]+"| head -1 |awk '{print $2}'`
	echo "$IP:$PORT"
}


function get_field2(){
	echo $@|awk '{print $2}'
}


# check IP and PORT in ~/.ssh/config
# load IP and PORT if missing in both command line and user_config.yml
function get_ssh_config_ip_from_name(){
	local HNAME=$1
	if [ -n "`get_ssh_config_entry $HNAME`" ];then
		# $HNAME entry found in ~/.ssh/config 
		local CONFIG_IP_LINE=`get_ssh_config_entry $HNAME |  grep -oiPz '^\s*HostName[\t ]+[\w\-\.]+'`
		if [ -z "$CONFIG_IP_LINE" ];then
			return 1
		else
			IP_IN_CONFIG=`get_field2 $CONFIG_IP_LINE`
			if [ -z $IP_IN_CONFIG ]; then
				return 1
			fi
		fi
		return 0
	else
		return 1
	fi
}
dbv

# indispensable arguments
if [ -z "$INST_IP" ]; then
	if [ -n "$CMD_HNAME" ];then
		CTMP=`get_ssh_config_entry $CMD_HNAME`
		if [ -n "$CTMP" ];then
			INST_IP=${CTMP//:*}
			INSTALLED_PORT=${CTMP##*:}
			dbv ssh $INST_IP -p $INSTALLED_PORT -l rancher -o ConnectTimeout=3 -o ConnectionAttempts=3 echo -n
			info testing ssh connection to $INST_IP:$INSTALLED_PORT
			test_drv="$(ssh $INST_IP -p $INSTALLED_PORT -l rancher -o ConnectTimeout=1 -o ConnectionAttempts=3 stat -f -c '%T' /opt)"
			if [ -z "test_drv" ];then
				die "cannot ssh $INST_IP -p $INSTALLED_PORT"
			fi
			if [ -n "test_drv" -a "$test_drv" != "ramfs" ]; then
				whiteBgRed_n "Server "
				cyanBgRed_n "'$CMD_HNAME'"
				whiteBgRed_n ", still working. Really overwrite it with new installation? "
				yellowBgRed_n  "[y/n]:"
				echo -n " "
				if ! ask_yes_no; then
					info "Terminated by user."
					exit 1
				fi
				ssh_param $INST_IP $INSTALLED_PORT -x -l rancher -o ConnectTimeout=3 -o ConnectionAttempts=3
				ssh_sudo <<'END'
					if [ -e /var/log/boot/init.log.0 ];then
						sfx=.0
					else
						sfx=
					fi
					BURMILLAOS_VER="`egrep '^\s*VERSION:\s+[^\s]+' /var/log/boot/init.log$sfx | awk '{print $2}'`"
					if [ -n "$BURMILLAOS_VER" ];then
						# search installer with relevant version
						devs=(`blkid2 LABEL=RANCHEROS`)
						for d in ${devs[@]}; do
							do_mount $d /installing/installer
							if source_env /installing/installer/boot/grub/VERSION; then
								info VERSION=$VERSION
								info BURMILLAOS_VER=$BURMILLAOS_VER
								if [ "$VERSION" = "$BURMILLAOS_VER" ];then
									store_env /boot/efi/TOPIC REINSTALL
									umount /installing/installer
									info rebooting
									sudo reboot >/dev/null
									RET=0
									exit 0
								fi
							else
								err cannot source /installing/installer/boot/grub/VERSION
							fi
							umount /installing/installer
						done
						RET=2
						exit 2
					else
						RET=1
						exit 1
					fi
END
				case "$RET" in
					0) # logon the target and reboot
						;;
					1)
						die "Kernel paramter without burmillaOS version."
						;;
					2)
						die "Installer disk with version, $KER_VERSION is not inserted on target machine."
						;;
						
					*) # Time out. Already booted by installer ?
						err "Unknown error. Already booted by installer ?"
						exit $?
						;;
				esac
			fi
		fi
	fi
fi
if [ -z "$INST_IP" ]; then
	err IP address is not found in command line nor in ~/.ssh/config. 
fi
KEY=`cat ~/.ssh/id_ed25519.pub 2>/dev/null`
if [ -z "$KEY" ];then
	err Cannot find public key in ~/.ssh/id_ed25519.pub.
fi
exit_if_err


if [ -z "$INSTALL_SSH_PORT" ];then
	INSTALL_SSH_PORT=22
fi

ssh_param $INST_IP $INSTALL_SSH_PORT -x -q -o "PasswordAuthentication no" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" -l rancher

# wait ssh connectable
wait_sshd_start

# install ssh key if not installed
if ! ssh_do echo; then
	if ! install_ssh_key; then
		die "Cannot log on as user, 'rancher' by password, 'rancher'.
"$cyan"Please enter following commands on console.
	sudo passwd rancher
	rancher
	rancher"
	fi
fi


if ssh_do ls -la /installing 2>/dev/null;then
	info "Clear terminated installing."
	for i in `ssh_sudo ls /installing`;do
		ssh_sudo umount /installing/$i
	done
	ssh_sudo rm -rf /installing
fi


# check booted from installer disk
if [ "`ssh_do sudo mount | grep /usr/bin/ros | awk '{print $1}'`" != "none" ]; then
	die Not booted from installer disk
fi


# check uefi-grub-enabled installer
if [ "`ssh_do sudo mount | grep /usr/bin/ros | awk '{print $1}'`" != "none" ]; then
	die Not booted from installer disk
fi

# check installer disk is same version for installer booted machine
ssh_sudo <<'END'
	dbv ${!SCRIPT_FILES[@]}
	apt_check fdisk
	version="`egrep -o '\s+VERSION:\s+[^ \]+' /var/log/boot/init.log | awk '{print $2}'`"
	dbv $version
	mkdir -p /installing/installer
	for d in `/sbin/blkid | grep LABEL=\"RANCHEROS\" | awk '{print substr($1, 0, index($1, ":") - 1 )}'`;do
		mount $d /installing/installer
		if [ -e /installing/installer/boot/grub/VERSION ];then
			if source /installing/installer/boot/grub/VERSION; then
				if [ "$VERSION" = "$version" ];then
					INST_DRIVE=$d
					break
				fi
			fi
		elif grep "BURMILLAOS_VER=\"$version\"" /installing/installer/boot/grub/grub.cfg >&2; then
			dbv
			INST_DRIVE=$d
			break
		else
			dbv
			grep "BURMILLAOS_VER" /installing/installer/boot/grub/grub.cfg >&2
			dbv Not detected
		fi
		umount /installing/installer
	done
END


# get network parameters from target server booted by installer
NET_DEV=`ssh_do ip route show|grep default|awk '{print $5}'|head -1`
if [ -z "$NET_DEV" ]; then
	die Cannot find net device for default route.
fi
DS="`ssh_do cat /etc/resolv.conf| sed -e 's/[ \t]*#.*//' | grep "nameserver" | sed -e 's/^[ \t]*//' | awk '{print $2}'`"
DNS_SETTINGS="`ssh_do cat /etc/resolv.conf| sed -e 's/[ \t]*#.*//' | grep "nameserver" | sed -e 's/^[ \t]*//' | awk '{print $2}' | sed -e 's/^/      - /'`"


function __set_dns__(){
	local DSX=""
	local DSX2=""
	for i in $DS; do
		if [ -z "$DSX" ]; then
			DSX='"'$i'"'
			DSX2='\"'$i'\"'
		else
			DSX="$DSX",'"'$i'"'
			DSX2="$DSX2",'\"'$i'\"'
		fi
	done
	DNS_SETTINGS_YQ="[$DSX]"
	DNS_SETTINGS_YQ2="[$DSX2]"
}
__set_dns__
unset -f __set_dns__

deb $DNS_SETTINGS_YQ2


if [ -z "$DNS_SETTINGS" ]; then
	die Cannot find DNS setting.
fi
NETMASK=`ssh_do ip address show dev $NET_DEV | grep 'inet ' | grep global | awk '{print $2}'| sed -e 's/.*\///'|head -1`
if [ -z "$NETMASK" ]; then
	die Cannot find net mask.
else
	for i in 8 16 24; do
		if [ "$NETMASK" = "$i" ]; then
			netmask_ok=1
		fi
	done
	if [ -z "$netmask_ok" ];then
		die Unsupported netmask, $NETMASK
	fi
fi
GATEWAY=`ssh_do ip route |egrep 'default via'|awk '{print $3}'|head -1`
if [ -z "$GATEWAY" ]; then
	die Cannot find default gateway.
fi


function extract_uc_params(){
	ssh_do sudo bash <<'END'
		F=/installing/oem_part/var/lib/rancher/conf/cloud-config.d/user_config.yml
		if [ -e $F ]; then
			if [ ! -x /usr/bin/yq ]; then
				if [ -n "`uname -a|grep armv7`" ]; then
					sudo wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
				fi
				if [ -n "`uname -a|grep aarc64`" ]; then
					sudo wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
				fi
				if [ -n "`uname -a|grep x86_64`" ]; then
					sudo wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
				fi
			fi
			if [ ! -x /usr/bin/yq ];then
				echo "ERROR:Cannot download /usr/bin/yq" >&2
			fi
			UC_PORT=`sudo yq .rancher.ssh.port $F`
			UC_HNAME_FULL=`sudo yq .hostname $F`
			UC_IPS=`sudo yq .rancher.network.interfaces $F| egrep -o "address:\s+[0-9.:]+" | awk '{print $2}'`
			if [ -n "`sudo grep state_root $F`" ]; then
				echo USER_CONFIG=1
				echo UC_PORT=$UC_PORT
				echo UC_HNAME_FULL=$UC_HNAME_FULL
				echo UC_IPS=$UC_IPS
			fi
		fi
END
}

part2Drv(){
	if [[ ${!1} =~ ^(.+)[0-9]+$ ]]; then
		eval "$1=${BASH_REMATCH[1]}"
	fi
}


ssh_sudo <<'END'
	apt_check btrfs-progs
	CMDLINE=`cat /proc/cmdline`
	if [[ $CMDLINE =~ \ ref_boot_uuid=([^\ ]+) ]];then
		BDRVs=(`blkid2 UUID=${BASH_REMATCH[1]}`)
	fi
	dbv ${BDRVs[@]}
	if [[ $CMDLINE =~ \ root=([^\ ]+) ]];then
		INST_DRIVE=`blkid2 ${BASH_REMATCH[1]}`
		part2Drv INST_DRIVE
	fi
	disks=(`blkid2 DEV_TYPE=disk`)
	dbv ${disks[@]}
	installers=(`blkid2 LABEL=RANCHEROS`)
	dbv ${installers[@]}
	j=0
	for i in ${installers[@]}; do
		if [[ $i =~ ^(.*[^0-9])[0-9]+$ ]];then
			installers[j]=${BASH_REMATCH[1]}
		fi
		((++j))
	done
	for d in ${disks[@]}; do
		if ! detect installers $d; then
			A_DISKS+=($d)
		fi
	done
	if [ -n "$TARGET_DEV_ATTR" ];then
		TARGET_DEVS=(`blkid2 ${TARGET_DEV_ATTR[@]}`)
		case ${#TARGET_DEVS[@]} in
			0)
				TARGET_DEV_ERRMSG="Target device for, (${TARGET_DEV_ATTR[@]}), not found."
				;;
			1)
				TARGET_DEV="${TARGET_DEVS[0]}"
				info "'"${TARGET_DEV_ATTR[@]}"'" is resolved to "'"$TARGET_DEV"'"
				;;
			*)
				TARGET_DEV_ERRMSG="Multiple devices for, (${TARGET_DEV_ATTR[@]}), found."
				;;
		esac
	fi
	if [ -n "$TARGET_DEV" ];then
		if ! detect A_DISKS "$TARGET_DEV"; then
			TARGET_DEV_ERRMSG="$TARGET_DEV is not installable."
		fi
	fi
	ADISK_MSG=
	for d in ${A_DISKS[@]}; do
		ADISK_MSG="$ADISK_MSG`blkid2 $d`
"
	done
END

				

if [ -n "$TARGET_DEV_ERRMSG" ];then
	err $TARGET_DEV_ERRMSG
	info "Available disks are:"
	echo "$ADISK_MSG."
	info "Terminated."
	exit 1
fi
dbv
if [ -n "$BDRVs" ];then
	for tDRV in ${BDRVs[@]}; do
		part2Drv tDRV
		ssh_sudo<<"END"
			do_mount --salvage-btrfs $tDRV"7" /installing/oem_part
END
		dbv $? $__SSH_DO_RET
		if [ $__SSH_DO_RET = 0 ];then
			REF_OEM_DRV=$DRV"7"
			PARAMS="`extract_uc_params`"
			eval "$PARAMS"
			ssh_sudo sudo umount /installing/oem_part
			if [ -n "$USER_CONFIG" ]; then
				info "user_config.yml found in '$DRV"7"'"
			fi
			DRV=$tDRV
			break
		fi
	done
fi

if [ -n "$TARGET_DEV" ];then
	if ! detect A_DISKS "$TARGET_DEV";then
		err "'$TARGET_DEV' is missing or not installable (maybe installer disk)."
		info "Available disks are:"
		echo "$ADISK_MSG."
		info "Terminated."
		exit 1
	fi
fi

if [ -n "$DRV" ];then
	if [ -n "$TARGET_DEV" ];then
		if [ "$DRV" != "$TARGET_DEV" ];then
			whiteBgRed "'$TARGET_DEV' is not the reference disk, '$DRV' for getting parameters (IP, hostname, etc) for installation."
			echo
			whiteBgRed_n "Still installing on '$TARGET_DEV' ? "
			yellowBgRed_n  "[y/n]: "
			echo -n " "
			if ask_yes_no; then
				info "Using '$TARGET_DEV', as target disk for installation."
			else
				whiteBgRed_n "Installing on '$DRV'? "
				yellowBgRed_n  "[y/n]: "
				if ask_yes_no; then
					TARGET_DEV=$DRV
					info "Using '$DRV', as target disk for installation."
				else
					info "No disk chosen. User terminated."
					info "Available disks are:"
					echo "$ADISK_MSG."
					info "Terminated."
					exit 1
				fi
			fi
		fi
	else
		whiteBgRed "Target disk is not specified in the command line arguments."
		whiteBgRed_n "Do you use the reference disk, '$DRV' as target disk for installation? "
		yellowBgRed_n  "[y/n]: "
		if ask_yes_no; then
			TARGET_DEV=$DRV
		else
			info "No disk specified."
			info "Available disks are:"
			echo "$ADISK_MSG."
			info "Terminated."
			exit 1
		fi
	fi
else
	if [ -n "$TARGET_DEV" ];then
		info "Using '$TARGET_DEV', as target disk for installation."
	else
		whiteBgRed "Target disk is not specified."
		if [ ${#A_DISKS[@]} != 0 ];then
			whiteBgRed_n "Still installing on '${A_DISKS[0]}' ? "
			yellowBgRed_n  "[y/n]: "
			if ask_yes_no; then
				TARGET_DEV=$DRV
			else
				info "Available disks are:"
				echo "$ADISK_MSG."
				info "Please specify one of them by command line argument."
				info "Terminated."
				exit 1
			fi
		else
			err "No installable disk(s) found."
			info "Available disks are:"
			echo "$ADISK_MSG."
			info "Please specify one of them by command line argument."
			info "Terminated."
			exit 1
		fi
	fi
fi


function reachable(){
	local mask=$2
	local gateway=$3
	local ip=$1
	local prefix
	case $mask in
		"24" )
			prefix=`echo $ip|grep -oP '^\d{1,3}\.\d{1,3}.\d{1,3}\.'`
			;;
		"16" )
			prefix=`echo $ip|grep -oP '^\d{1,3}\.\d{1,3}\.'`
			;;
		"8" )
			prefix=`echo $ip|grep -oP '^\d{1,3}\.'`
			;;
	esac
	if [ -z "$prefix" ]; then
		return 1
	fi
	local psize=${#prefix}
	if [ "${gateway:0:$psize}" = "$prefix" ]; then
		return 0
	else
		return 1
	fi
}


# set up ip address from command line or user_config.yml found in previous installation.
if [ -n "$IP" ]; then
	if [ -n "$UC_IPS" ]; then
		for i in $UC_IPS; do
			if [ $i == "$IP" ]; then
				UC_IP=$IP
				break
			fi
		done
		if [ -z "$UC_IP" ];then
			whiteBgRed_n "Do you overwrite ip address with new one, $cyan'$IP'$yellow over current ip, $cyan'$UC_IPS'$yellow defined in user_config.yml$plain"
			yellowBgRed_n "[y/n]"
			echo -n " "
			if ! ask_yes_no; then
				exit 1
			fi
		fi
	fi
	if ! reachable $IP $NETMASK $GATEWAY; then
		die "IP address, $cyan'$IP'$red is not accessible to gateway, $cyan'$GATEWAY/$NETMASK'$red."
	fi
else
	if [ -n "$UC_IPS" ]; then
		for i in $UC_IPS; do
			if reachable $i $NETMASK $GATEWAY; then
				info "Using ip address, '$i', defined in user_config.yml"
				IP=$i
				break
			fi
		done
	fi
fi


# set up ssh port number from command line or user_config.yml found in previous installation.
if [ -n "$PORT" ]; then
	if [ -n "$UC_PORT" ]; then
		if [ "$PORT" != "$UC_PORT" ];then
			whiteBgRed_n "Do you overwrite ssh port number with new one, $cyan'$PORT'$yellow over current ip, $cyan'$UC_PORT'$yellow defined in user_config.yml$plain"
			yellowBgRed_n "[y/n]"
			echo -n " "
			if ! ask_yes_no; then
				exit 1
			fi
		fi
	fi
else
	if [ -n "$UC_PORT" ]; then
		info "Using ssh port number, '$UC_PORT' defined in user_config.yml."
		PORT=$UC_PORT
	fi
fi


# set up host name from command line or user_config.yml found in previous installation.
if [ -n "$HNAME" ]; then
	if [ -n "$UC_HNAME_FULL" -a "$HNAME_FULL" != "$UC_HNAME_FULL" ]; then
		whiteBgRed_n "Do you overwrite host name with new name, $cyan'$UC_HNAME_FULL'$yellow in user_config.yml (original: $cyan'$HNAME_FULL'$yellow).$plain"
		yellowBgRed_n "[y/n]"
		echo -n " "
		if ! ask_yes_no; then
			exit 1
		fi
	fi
else
	if [ -n "$UC_HNAME_FULL" ]; then
		info "Using host name, '$UC_HNAME_FULL', defined in user_config.yml."
		HNAME=${UC_HNAME_FULL%%.*}
		HNAME_FULL=$UC_HNAME_FULL
	else
		whiteBgRed_n "Do you use host name, $cyan'burmilla'$yellow, befause missing host name in both command line and user_config.yml.$plain"
		yellowBgRed_n "[y/n]"
		echo -n " "
		if ! ask_yes_no; then
			exit 1
		fi
	fi
fi




# check ~/.ssh/config for hostname and ip address, port number

function get_field2(){
	echo $@|awk '{print $2}'
}


function write_ssh_config(){
	info "writing entry of $1 in ~/.ssh/config with $IP:$PORT"
	mkdir -m 700 -p ~/.ssh
	echo  >> ~/.ssh/config
	echo "Host $1
HostName $IP
User rancher
Port $PORT
" >> ~/.ssh/config
}


function rewrite_ssh_config(){
	warn "rewriting entry of $HNAME_FULL in ~/.ssh/config with $IP:$PORT"
	local insect=""
	local found=""
	while read line; do
		hln=`echo "$line"|grep -ioP "^\s*Host\s+[^#\s]+"|sed -e 's/[ \t]//g'`
		if [ "$hln" = "Host$1" ]; then
			insect=1
			found=1
		else
			if [ -n "$hln" ]; then
				insect=""
			fi
		fi
		if [ -n "$insect" ]; then
			line=`echo "$line"| sed -e 's/^\s*Port\s\s*[0-9][0-9]*/Port '$PORT'/ig'`
            line=`echo "$line"| sed -e 's/^\s*Hostname\s\s*[^\s][^\s]*/HostName '$IP'/ig'`
		fi
		echo "$line"
	done < ~/.ssh/config > ~/.ssh/config.new
	if [ -n "$found" ]; then
		if [ "`cat ~/.ssh/config`" != "`cat ~/.ssh/config.new`" ]; then
			mv -f ~/.ssh/config ~/.ssh/config.bak
			mv ~/.ssh/config.new ~/.ssh/config
			chmod 600 ~/.ssh/config
		fi
	else
		while read line; do
			mln=`echo "$line"|grep -ioP "^\s*Match\s+[^#\s]+"|sed -e 's/[ \t]//g'`
			if [ -n "$mln" -a -z "$found" ]; then
				found=1
				echo "Host $1
HostName $IP
User rancher
Port $PORT

"
			fi
			echo "$line"
		done < ~/.ssh/config > ~/.ssh/config.new
		if [ -z "$found" ]; then
			write_ssh_config $1
		else
			mv -f ~/.ssh/config ~/.ssh/config.bak
			mv ~/.ssh/config.new ~/.ssh/config
			chmod 600 ~/.ssh/config
		fi
	fi
}


function check_ip_and_port(){
	if [ -z "$IP" ];then
		die "Missing IP address for both in the command line and user_config.yml, and cannot find section, $cyan'Host $HNAME'$red in $cyan~./ssh/config$red, where a line like $cyan'HostName [ip address or resolvable host name]'$red should be found.$plain"
	fi
	if [ -z "$PORT" ];then
		RD=0
		while [ "$RD" -le 1024 -o  -n "`grep $RD/tcp /etc/services`" ]; do
			RD=$((RANDOM + RANDOM))
		done
		RANDOM_PORT=1
		PORT=$RD
		OW=1
		warn using randomly chosen port number, $PORT for ssh
	fi
}


function loadOrRewrite(){
	eval local hname='$'$1
	local OW
	if [ -z "$IP" -a -z "$PORT" ]; then
		local ent=`get_ssh_config_entry $hname`
		IP=${ent%:*}
		PORT=${ent#*:}
	else
		local ent=`get_ssh_config_entry $hname`
		local EIP=${ent%:*}
		local EPORT=${ent#*:}
		if [ -n "$IP" ]; then
			if [ -n "$EIP" ]; then
				if [ "$IP" != "$EIP" ]; then
					warn "ip address, '$IP' is different from relevant entry, ip adderss, '$EIP' of '$1' in ~/.ssh/config."
					whiteBgRed_n "Still installing on '$TARGET_DEV' ? "
					yellowBgRed_n  "[y/n]: "
					echo -n " "
					if ! ask_yes_no; then
						die "User terminated. Cannot coninue installation."
					else
						OW=1
					fi
				fi
			fi
		else
			if [ -n "$EIP" ]; then
				IP=$EIP
			fi
		fi
		if [ -n "$PORT" ]; then
			if [ -n "$EPORT" ]; then
				if [ "$PORT" != "$EPORT" ]; then
					warn "port number, '$PORT' is different from relevant entry, '$EPORT' of '$1' in ~/.ssh/config."
					whiteBgRed_n "Still installing on '$TARGET_DEV' ? "
					yellowBgRed_n  "[y/n]: "
					echo -n " "
					if ! ask_yes_no; then
						die "User terminated. Cannot coninue installation."
					else
						OW=1
					fi
				fi
			fi
		else
			if [ -n "$EPORT" ]; then
				PORT=$EPORT
			fi
		fi
	fi
	CMD_HNAME=$hname
	check_ip_and_port
	if [ -n "$OW" ]; then
		rewrite_ssh_config $hname
	fi
}


if [ -z "$CMD_HNAME" ]; then
	hnEnt=`get_ssh_config_entry $HNAME`
	hnfEnt=`get_ssh_config_entry $HNAME_FULL`
	if [ -n "$hnEnt" ]; then
		if [ -n "$hnfEnt" ]; then
			if [ "$hnEnt" = "$IP:$PORT" ]; then
				CMD_HNAME=$HNAME
			else # shorname entry not match for ip or port number
				if [ "$hnfEnt" = "$IP:$PORT" ]; then #long name match
					CMD_HNAME=$HNAME_FULL
				else # ip and port not matches both short and full name
					loadOrRewrite HNAME
				fi
			fi
		else # only short name entry exists
			if [ "$hnEnt" = "$IP:$PORT" ]; then
				CMD_HNAME=$HNAME
			else # shorname not match
				loadOrRewrite HNAME
			fi
		fi
	else
		if [ -n "$hnfEnt"]; then # only long name entry exists
			if [ "$hnfEnt" = "$IP:$PORT" ]; then
				CMD_HNAME=$HNAME_FULL
			else
				loadOrRewrite HNAME_FULL
			fi
		else # no entry found
			check_ip_and_port
			rewrite_ssh_config $HNAME
			CMD_HNAME=$HNAME
		fi
	fi
else
	hncEnt=`get_ssh_config_entry $CMD_HNAME`
	if [ -n "$hncEnt" ]; then
		if [ "$hncEnt" != "$IP:$PORT" ]; then
			loadOrRewrite CMD_HNAME
		fi
	else
		check_ip_and_port
		rewrite_ssh_config $CMD_HNAME
	fi
fi


##################

USER_SETTINGS_FOR_GRUB_SOURCE="USER_SETTINGS='rancher.network.interfaces.$NET_DEV.address=$IP/$NETMASK rancher.network.interfaces.$NET_DEV.gateway=$GATEWAY rancher.network.dns.nameservers=$DNS_SETTINGS_YQ'"
USER_SETTINGS_FOR_GRUB_SOURCE_FOR_INSTALLING="USER_SETTINGS='rancher.network.interfaces.$NET_DEV.address=$INST_IP/$NETMASK rancher.network.interfaces.$NET_DEV.gateway=$GATEWAY rancher.network.dns.nameservers=$DNS_SETTINGS_YQ'"


TARGET_DEV1="$TARGET_DEV"1
TARGET_DEV2="$TARGET_DEV"2
TARGET_DEV3="$TARGET_DEV"3
TARGET_DEV4="$TARGET_DEV"4
TARGET_DEV5="$TARGET_DEV"5
TARGET_DEV6="$TARGET_DEV"6
TARGET_DEV7="$TARGET_DEV"7


if [ -z "$USER_CONFIG" ]; then
	info Cannot find /var/lib/rancher/conf/cloud-config.d/user_config.yml on oem partition.
fi

ssh_sudo <<FIN
	apt_check apt-utils util-linux
FIN



function install_vim(){
	apt_check vim
	echo 'set t_Co=256
set fileencoding=japan
set fileencodings=utf-8
set tabstop=4
let $LANG='ja_JP.UTF-8'
set encoding=utf-8
set backspace=indent,eol,start

if &term == "xterm"
	let &t_ti = &t_ti . "\e[?2004h"
	let &t_te = "\e[?2004l" . &t_te
	let &pastetoggle = "\e[201~"

	function XTermPasteBegin(ret)
    	set paste
    	return a:ret
  	endfunction

	map <special> <expr> <Esc>[200~ XTermPasteBegin("i")
	imap <special> <expr> <Esc>[200~ XTermPasteBegin("")
	cmap <special> <Esc>[200~ <nop>
	cmap <special> <Esc>[201~ <nop>
endif
' > .vimrc
	sudo cp .vimrc /root
}


if [ -n "$INSTALL_VIM" ];then
	ssh_do <<'	END'
		install_vim
	END
fi


DISK_SIZE=`ssh_do -t sudo fdisk -l $TARGET_DEV \|grep \"Disk $TARGET_DEV\"\|awk \"{print $\"\"5}\"|grep -v boundary`
MEM_SIZE=`ssh_do -t cat /proc/meminfo\|grep MemTotal\|awk \"{print $\"\"2}\"`
DISK_SIZE=${DISK_SIZE%$'\r'}
MEM_SIZE=${MEM_SIZE%$'\r'}
BOOT_PART_SIZE="+3G"
RESERVED_PART_SIZE="+3G"
STATE_PART_SIZE="+10G"
if [ "$DISK_SIZE" -ge 2199023255552 ];then # over 2Tbytes
    SWAP_PART_SIZE="+64G"
else
	if [ "$DISK_SIZE" -ge 1099511627776 ];then # over 1Tbytes
    	SWAP_PART_SIZE="+64G"
	else
		BOOT_PART_SIZE="+1G"
		STATE_PART_SIZE="+1G"
		RESERVED_PART_SIZE="+1K"
		SWAP_PART_SIZE="+$MEM_SIZE"K
	fi
fi

if [ "$INST_DRIVE" = "" ];then
	die "Installer device is not detected. Stop installation."
fi

if [ "$DISK_SIZE" -le 1073741824 ];then
	die "size of $TARGET_DEV, less than 1G."
fi

# TZ environmental variable
__tz_set__(){
	local TZ_N=`date +"%Z"`
	local TZ_D=`date +"%z"`
	local TZ_DS
	local TZ_SS
	if [ "${TZ_D:0:1}" = "+" ];then
		TZ_DS="-"
		TZ_SS=
	else
		TZ_DS=""
		TZ_SS="-"
	fi
	local TZ_DH1="${TZ_D:1:1}"
	if [ "$TZ_DH1" = "0" ];then
		TZ_DH1=""
	fi
	local TZ_DH="$TZ_DH1${TZ_D:2:1}"
	local TZ_DM="${TZ_D:3:2}"
	if [ "$TZ_DM" = "00" ];then
		TZ_DM=""
	else
		TZ_DM=":${TZ_DM}"
	fi
	TZL="$TZ_N$TZ_DS$TZ_DH$TZ_DM"
	TZS=$TZ_SS$((TZ_DH * 3600 + TZ_DM * 60))
}
__tz_set__
unset -f __tz_set__

info "INSTALL FROM "$INST_DRIVE"
NET_INTERFACE="$NET_DEV"
IP=$IP
DNS_SETTINGS="$DNS_SETTINGS"
GATEWAY=$GATEWAY
NETMASK=$NETMASK
DISK_SIZE=$DISK_SIZE
MEM_SIZE=$MEM_SIZE
TZ=$TZL
PORT=$PORT"


#ssh_do sudo ros console switch ubuntu -f
sleep 5

#blkid2

ssh_sudo <<'FINAL'
	dbv ${!SCRIPT_FILES[@]}

	apt_check gdisk lvm2 dosfstools btrfs-progs parted util-linux cpio gzip fdisk strace 2> /dev/null
	for l in RANCHER_BOOT RANCHER_OEM RANCHER_STATE RANCHER_SWAP; do
		b2res="`blkid2 LABEL=$l > /dev/null`"
		if ! [[ $b2res =~ (^|\ )$TARGET_DEV($|\ )  ]]; then
			warn Partition, LABEL=$l, not found.
			part_not_found=1
		fi
	done
	if [ -n $part_not_found ];then
		whiteBgRed_n "Do you create new partition table on $TARGET_DEV?"
		yellowBgRed_n  "[y/n]: "
		if ! ask_yes_no;then
			die "User terminated."
		fi
		whiteBgRed_n "All data on $TARGET_DEV, will be lost."
		whiteBgRed_n "Still create new?"
		yellowBgRed_n  "[y/n]: "
		if ! ask_yes_no;then
			die "User terminated."
		fi
		dd if=/dev/zero of=$TARGET_DEV bs=1G count=1
		partprobe
		gdisk $TARGET_DEV <<"	EOF"
		2
		x
		l
		1
		m
		n
		1

		2047
		ef02
		x
		l
		2048
		m
		n
		2

		+256M
		ef00
		n
		3

		$SWAP_PART_SIZE
		8200
		n
		4

		$BOOT_PART_SIZE
		8300
		n
		5

		$STATE_PART_SIZE
		8300
		n
		6

		$RESERVED_PART_SIZE
		8300
		n
		7


		8300
		p
		w
		y
		EOF
		partprobe
		gdisk -l $TARGET_DEV
		sleep 1
		partprobe
		sleep 1
		mkswap -L RANCHER_SWAP $TARGET_DEV3 <<"	END"
		y
		END
		mkfs.vfat -F32 -n EFI $TARGET_DEV2 <<"	END"
		y
		END
	fi
	do_mount $TARGET_DEV7 /installing/oem_top
FINAL
if [ "$__SSH_DO_RET" = 1 ];then
	dbv
	whiteBgRed "Cannot mount OEM partition, '$TARGET_DEV7'."
	whiteBgRed_n "Format it?"
	yellowBgRed_n  "[y/n]: "
	if ! ask_yes_no; then
		die "User terminated. Cannot coninue installation."
	else
		ssh_sudo <<FINAL
	do_mount -v --salvage-btrfs $TARGET_DEV7 /installing/oem_top
FINAL
		if [ "$__SSH_DO_RET" = 0 ];then
			ssh_sudo umount /installing/oem_top
			whiteBgRed "'$TARGET_DEV7' is degraded but still redable."
			whiteBgRed_n "Really format it?"
			yellowBgRed_n  "[y/n]: "
			if ! ask_yes_no; then
				die "User terminated. Cannot coninue installation."
			else
				whiteBgRed "All data in '$TARGET_DEV7' will be lost."
				whiteBgRed_n "Really format it?"
				yellowBgRed_n  "[y/n]: "
				if ! ask_yes_no; then
					die "User terminated. Cannot coninue installation."
				fi
			fi
		fi
	fi
	ssh_sudo <<'FINAL'
		mkfs.btrfs -L RANCHER_OEM -f $TARGET_DEV7
		partprobe
		if [ -n "$REF_OEM_DRV" -a "$REF_OEM_DRV" != "$TARGET_DEV7" ];then
			info "copying $REF_OEM_DRV to $TARGET_DEV7 ..."
			do_mount --salvage-btrfs $REF_OEM_DRV /installing/oem_ref
			cp -av /installing/oem_ref/* /installing/oem_top
			umount /installing/oem_ref
			info "done"
		fi
		umount /installing/oem_top
FINAL
else
	ssh_sudo umount /installing/oem_top
fi
dbv
ssh_sudo <<'FINAL'
	# initial cloud-config.yml
	write_env_file cloud-config.yml <<'END'
		environment:
		  ROS_BTRFS_WRAPPER: 1
 		rancher:
		  network:
		    dns:
		      nameservers:
		$DNS_SETTINGS
		    interfaces:
		      eth*:
		        dhcp: false
		      $NET_DEV:
		        address: $INST_IP/$NETMASK
		        gateway: $GATEWAY
		ssh_authorized_keys:
		- $KEY
	END

	# install on $TARGET_DEV4 (initial state drive, no boot, no state, no oem drive) first
	# preload fullinstaller.tar.gz, or "ros install" fails
	system-docker load -i /installing/installer/rancheros/fullinstaller.tar.gz
	export ROS_BTRFS_WRAPPER=1
	info ros install --no-reboot -f -t gptsyslinux -c cloud-config.yml -d $TARGET_DEV -p $TARGET_DEV4;
	if ros install --no-reboot -f -t gptsyslinux -c cloud-config.yml -d $TARGET_DEV -p $TARGET_DEV4; then
		info ros insall finished
	else
		die ros install failed
	fi
	# move all files from installer's efi directory to $TARGET_DEV2 (efi drive).
	mkdir -p /installing/efipart
	mount $TARGET_DEV2 /installing/efipart
	cp -r /installing/installer/EFI /installing/efipart

	# move all files from $TARGET_DEV4 (initial state drive) to $TARGET_DEV5 (state drive) first
	mkdir -p /installing/boot_dev
	mount $TARGET_DEV4 /installing/boot_dev
	info ls /installing/boot_dev/var/lib/rancher/conf/cloud-config.d
	info "`ls /installing/boot_dev/var/lib/rancher/conf/cloud-config.d`"
	mkfs.btrfs -L RANCHER_STATE -f $TARGET_DEV5
	partprobe
	STATE_UUID_SUB=`/sbin/blkid $TARGET_DEV5 | awk '{print $4}'`
	if [ -z "$STATE_UUID_SUB" ];then
		die cannot detect sub uuid of state device, $TARGET_DEV5.
	fi
	STATE_UUID_SUB="`echo $STATE_UUID_SUB`"
	mkdir -p /installing/state_top
	mount $TARGET_DEV5 /installing/state_top
	btrfs subvolume create /installing/state_top/state_root
	echo btrfs subvolume set-default `btrfs subvolume list /installing/state_top|grep state_root|awk '{print $2}'`
	btrfs subvolume set-default `btrfs subvolume list /installing/state_top|grep state_root|awk '{print $2}'` /installing/state_top
	cp -a /installing/boot_dev/* /installing/state_top/state_root
	umount /installing/boot_dev
	# reformat to create boot drive
	mkfs.btrfs -L RANCHER_BOOT -f $TARGET_DEV4
	partprobe
	BOOT_UUID_SUB=`/sbin/blkid $TARGET_DEV4 | awk '{print $4}'`
	BOOT_UUID=$(eval "echo `/sbin/blkid $TARGET_DEV4 | awk '{print $3}'`")
	BOOT_UUID=${BOOT_UUID#UUID=}
	info BOOT_UUID=$BOOT_UUID
	if [ -z "$BOOT_UUID_SUB" ];then
		die cannot detect uuid of boot device, $TARGET_DEV4.
	fi
	BOOT_UUID_SUB="`echo $BOOT_UUID_SUB`"
	# install btrfs mount tool for best mounting for maybe degraded drive.
	do_install do_mount
	do_install partNum2Dev
	dbv `ls -la /usr/bin/bashlib_y`
	dbv `ls -la /usr/bin/do_mount`
	dbv `ls -la /usr/share/bashlib_y`
	# initialize oem drive if it does not exists, or remain contact
	mkdir -p /installing/oem_top
	if ! do_mount $TARGET_DEV7 -o subvol=/ /installing/oem_top; then
		initOEM=1
	fi
	if [ ! -e /dev/disk/by-label/RANCHER_OEM ];then
		initOEM=1
	fi
	if [ -n "$INITIALIZE_OEM" ]; then
		initOEM=1
	fi
	if [ -n "$initOEM" ];then
		mkfs.btrfs -L RANCHER_OEM -f $TARGET_DEV7
		partprobe
		OEM_UUID_SUB=`/sbin/blkid $TARGET_DEV7| awk '{print $4}'`
		if [ -z "$OEM_UUID_SUB" ];then
			die cannot detect uuid of state device, $TARGET_DEV7.
		fi
		OEM_UUID_SUB="`echo $OEM_UUID_SUB`"
		mount $TARGET_DEV7 /installing/oem_top
		btrfs subvolume create /installing/oem_top/oem_root
		echo btrfs subvolume set-default `btrfs subvolume list /installing/oem_top|grep oem_root|awk '{print $2}'` /installing/oem_top
		btrfs subvolume set-default `btrfs subvolume list /installing/oem_top|grep oem_root|awk '{print $2}'` /installing/oem_top
		cp -a /installing/state_top/state_root/opt /installing/oem_top/oem_root
		cp -a /installing/state_top/state_root/home /installing/oem_top/oem_root
		mkdir -p /installing/oem_top/oem_root/var/lib/rancher/conf
		cp -a /installing/state_top/state_root/var/lib/rancher/conf /installing/oem_top/oem_root/var/lib/rancher
		cp -a /installing/state_top/state_root/var/lib/kubelet /installing/oem_top/oem_root/var/lib
		cp -a /root /installing/oem_top/oem_root
		cp -a /installing/state_top/state_root/var/lib/user-docker /installing/oem_top/oem_root/var/lib
		cp -a /installing/state_top/state_root/var/lib/m-user-docker /installing/oem_top/oem_root/var/lib
		chmod 550 /installing/oem_top/oem_root/root
		mkdir -p /installing/oem_top/oem_root/root/.ssh
		chmod 700 /installing/oem_top/oem_root/root/.ssh
		cp -a /var/log /installing/oem_top/oem_root/var
		mkdir -p /installing/oem_top/oem_root/opt/rancher/conf/grub
		echo -n "USER_SETTINGS='rancher.network.interfaces.$NET_DEV.address=$IP/$NETMASK rancher.network.interfaces.$NET_DEV.gateway=$GATEWAY rancher.network.dns.nameservers=$DNS_SETTINGS_YQ'" > /installing/oem_top/oem_root/opt/rancher/conf/grub/USER_SETTINGS
		chmod +x /installing/oem_top/oem_root/opt/rancher/conf/grub/USER_SETTINGS
		mkdir -p /installing/oem_top/oem_root/etc
		cp -a /etc/ssh /installing/oem_top/oem_root/etc
		if [ -n "$TZ" ];then
			if [ -e /usr/share/zoneinfo/$TZ ];then
				ln -sf /usr/share/zoneinfo/$TZ /installing/oem_top/oem_root/etc/localtime
			else
				for f in `find /usr/share/zoneinfo`; do
					if [ -f "$f" ];then
						for t in `strings $f`; do
							if [ "$t" = "$TZ" ] ; then
								found=$f
								info $TZ found in $f
								break
							fi
						done
					fi
					if [ -n "$found" ];then
						if [ -e /etc/localtime ];then
							if ! diff /etc/localtime $found; then
								rm -f  /installing/oem_top/oem_root/etc/localtime
								ln -s $found /installing/oem_top/oem_root/etc/localtime
							fi
						else
							ln -s $found /installing/oem_top/oem_root/etc/localtime
						fi
						break
					fi
				done
			fi
			mkdir -p /installing/oem_top/oem_root/etc/profile.d
			echo "# Please do not edit this file. 
# Grub menu references the line, 'TZ=$TZ'.
TZ=$TZ
export TZ
" > /installing/oem_top/oem_root/etc/profile.d/timezone.sh
		fi
		cp -a /var/lib/{,m-}user-docker /installing/oem_top/oem_root/var/lib
		rm_all /installing/state_top/state_root/{root,opt,home,var/log}
		rm_all /installing/state_top/state_root/var/lib/rancher/conf
		rm_all /installing/state_top/state_root/var/lib/{,m-}user-docker
		umount /installing/oem_top
	else
		OEM_UUID_SUB=`/sbin/blkid $TARGET_DEV7| awk '{print $4}'`
		OEM_UUID_SUB="`echo $OEM_UUID_SUB`"
	fi
	EFI_UUID=`/sbin/blkid $TARGET_DEV2| awk '{print $4}'`
	EFI_UUID_ARG=${EFI_UUID:6:9}
	EFI_UUID="`echo $EFI_UUID`"
	echo EFI_UUID=$EFI_UUID
	echo EFI_UUID_ARG=$EFI_UUID_ARG
	# move all files from $TARGET_DEV4/boot (initial state drive) to $TARGET_DEV2 (boot drive).
	mount $TARGET_DEV4 /installing/boot_dev
	cp -a /installing/state_top/state_root/boot/* /installing/boot_dev
	# set up grub.cfg on EFI drive
	VMLINUZ_FILE=`cd /installing/installer/boot;ls -d vmlinuz-*`
	VMLINUZ_FILE_COUNT=`echo "$VMLINUZ_FILE" | wc | awk '{print $1}'`
	if [ "$VMLINUZ_FILE_COUNT" != "1" ];then
	    die cannot detect linux kernel in iso image, or multiple kernel detected.
	fi
	cp -a /installing/installer/boot/vmlinuz* /installing/boot_dev
	cp -a /installing/installer/boot/initrd* /installing/boot_dev
	cp -a /installing/installer/boot/grub /installing/boot_dev/
	rm -f /installing/boot_dev/grub/*.cfg
	ln -sf ../efi/EFI/boot/grub.cfg /installing/boot_dev/grub/grub.cfg
	rm -rf /installing/state_top/state_root/boot/*

	INITRD_FILE=`cd /installing/boot_dev;ls -d initrd-*|grep mod| grep btrfs`
	INITRD_FILE_COUNT=`echo "$INITRD_FILE" | wc | awk '{print $1}'`
	if [ "$INITRD_FILE_COUNT" != "1" ];then
	    die cannot detect patched initrd, or multiple initrd detected.
	fi
	echo INITRD_FILE=$INITRD_FILE
	INITRD_VER=${INITRD_FILE#*-}
	KERNEL_VER=${VMLINUZ_FILE#*-}


	GLOBAL_APPEND=`cat /installing/boot_dev/global.cfg | sed 's/ rancher.state.dev=[^ ]*//g' | sed 's/ console=ttyS[^ ]*//g' | sed 's/ rancher.autologin=ttyS[^ ]*//g'`
	GLOBAL_APPEND_ARGS=${GLOBAL_APPEND#APPEND *}

	KERNEL_ARGS="rancher.state.boot_mountopt=rw rancher.state.oem_mountopt=rw,subvol=/oem_root rancher.state.mountopt=rw,subvol=/state_root rancher.password=rancher $GLOBAL_APPEND_ARGS rw rootflags=rw,subvol=/state_root"
	VGA_SIZE=1024x768
	VGA_MODE=775
	VGA_ARGS="i915.force_probe vga=$VGA_MODE video=$VGA_SIZE"
	echo APPEND $VGA_ARGS $KERNEL_ARGS > /installing/global.cfg
	ROOT_ARGS="rancher.state.boot_dev=$BOOT_UUID_SUB rancher.state.oem_dev=$OEM_UUID_SUB rancher.state.dev=$STATE_UUID_SUB efi=$EFI_UUID"

	store_env /installing/efipart/TOPIC "" # empty
	
	BURMILLAOS_VER="`egrep '^\s*VERSION:\s+[^\s]+' /var/log/boot/init.log | awk '{print $2}'`"
	if [ -z "$BURMILLAOS_VER" ];then
		die cannot detect burmillaos version of installer
	fi

	store_env -s /installing/efipart/BOOT_UUID
	info BOOT_UUID=`cat /installing/efipart/BOOT_UUID`
	LINUX="$VMLINUZ_FILE BURMILLAOS_VER=$VERSION $VGA_ARGS $KERNEL_ARGS $ROOT_ARGS panic=10"
	LINUX_DEBUG="$VMLINUZ_FILE BURMILLAOS_VER=$VERSION vga=ask DEBUG=1 rancher.debug=true $KERNEL_ARGS $ROOT_ARGS"
	INITRD="$INITRD_FILE"
	VERSION="$BURMILLAOS_VER"
	echo VERSION="$VERSION"
	store_env -s /installing/boot_dev/LINUX-$VERSION
	store_env -s /installing/boot_dev/LINUX_DEBUG-$VERSION
	store_env -s /installing/boot_dev/LINUX_EXTRA
	store_env -s /installing/efipart/VERSION
FINAL


if [ "$?" = "1" ];then
	exit 1
fi


cat $(__FILE_DIR__)/grub.cfg | ssh_sudo tee /installing/efipart/EFI/BOOT/grub.cfg > /dev/null

dbv $INITRD_FILE


if [ -z "$INITRD_FILE" ];then
	die 'missing $INITRD_FILE'
fi


UF=/installing/state/var/lib/rancher/conf/cloud-config.d/user_config.yml
UFL=/installing/oem_part/var/lib/rancher/conf_lib/cloud-config.d/user_config.yml

ssh_sudo <<'FINAL'
	dbv ${!SCRIPT_FILES[@]}
	umount /installing/boot_dev
	umount /installing/state_top
	umount /installing/installer
	umount /installing/efipart
	mkdir -p /installing/oempart
	mount $TARGET_DEV7 /installing/oempart
	if [ -e /installing/oempart/var/log/burmilla_installation ];then
		chain_bak -10 /installing/oempart/var/log/burmilla_installation
	fi
	mkdir -p /installing/oempart/var/log/burmilla_installation/1
	cp -a /var/log/* /installing/oempart/var/log/burmilla_installation/1
	umount /installing/oempart

	apt_check btrfs-progs binutils
	
	if [ -x /usr/bin/btrfs -o -x /bin/btrfs ];then
		:
	else
		ls -la /bin/btrfs
		ls -la /usr/bin/btrfs
		die "btrfs not found"
	fi
	
	mount $TARGET_DEV5 /installing/state

	if ! mount $TARGET_DEV4 /installing/boot_dev; then
		die cannot mount
	fi
	ls -la /installing/boot_dev

	# patching os-config file
	if [ ! -x /usr/bin/yq ]; then
		if [ -n "`uname -a|grep armv7`" ]; then
			wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
		fi
		if [ -n "`uname -a|grep aarc64`" ]; then
			wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
		fi
		if [ -n "`uname -a|grep x86_64`" ]; then
			wget "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -q -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
		fi
	fi
	if [ ! -x /usr/bin/yq ];then
		echo -e $red"Cannot download /usr/bin/yq"$plain
		exit 1
	fi

	if ! mount $TARGET_DEV7 /installing/oem_part; then
		die cannot mount
	fi
	if [ -e "$UF" ];then
		info $UF found
	fi
	info USER_CONFIG=$USER_CONFIG
	DATE=`TZ=$TZL date`
	mkdir -p /installing/oem_part/var/lib/rancher/conf/cloud-config.d
	touch $UF
	yq e -i ".hostname=\"$HNAME_FULL\"" $UF
	yq e -i ".rancher.ssh.port=\"$PORT\"" $UF
	yq e -i ".rancher.network.dns.nameservers=$DNS_SETTINGS_YQ" $UF
	yq e -i ".rancher.network.interfaces.$NET_DEV.address=\"$IP/$NETMASK\"" $UF
	yq e -i ".rancher.network.interfaces.$NET_DEV.gateway=\"$GATEWAY\"" $UF
	yq e -i ".rancher.network.interfaces.eth*.dhcp=false" $UF
	for i__ in console syslog udev system-cron acpid ntp docker network; do
		yq e -i ".rancher.services.$i__.environment.TZ|=\"$TZL\"" $UF
	done
	unset __i
	i=0
	while [ 1 ]; do
		k="`yq e '.ssh_authorized_keys.['$i']' $UF`"
		case "$k" in
			"$KEY" )
				break
				;;
			"null" )
				echo null
				yq e -i '.ssh_authorized_keys.['$i']|="'"$KEY"'"' $UF
				break
				;;
		esac
		i=$(( i + 1 ))
		if [ "$i" == "1000" ];then
			break
		fi
	done
	if [ "`cat $UFL`" != "`cat $UF`" ];then
		chain_bak -10 $UF $UFL
	fi

	#local time
	#etc_localtime=`find /installing/state -name "localtime"| awk '{print $1}'`

	apt_check binutils

	echo PORT=$PORT
	echo TZ=$TZ
	echo TZL=$TZL


	# create startup script
	mkdir -p /installing/oem_part/opt/rancher/bin
	write_env_file 0755 /installing/oem_part/opt/rancher/bin/start.sh.0 <<'START_UP'
		#!/bin/bash
		# Do not edit this file
		# Please use ./startup.d/foo.sh
		source /opt/rancher/bin/bashlib_y
		require chain_bak do_mount
		
		chain_bak -10 /var/log/boot/init.log /var/log/boot/init.log.0
		if [  ! -e /bin/env ];then
			ln -s /usr/bin/env /bin/env
		fi
		if [ ! -e /etc/profile.d/lang.sh ]; then
			echo export LANG=$LANG > /etc/profile.d/lang.sh
			echo export LC_CTYPE=$LC_CTYPE >> /etc/profile.d/lang.sh
			echo export LC_ALL=$LC_ALL >> /etc/profile.d/lang.sh
		fi
		mkdir -p /mnt_efi_test
		# clear booting flags on all sibling drives
		/sbin/blkid | grep LABEL=\"EFI\" | awk '{print substr($1, 1, length($1) - 1)}' | while read efi; do
			mount $efi /mnt_efi_test
			rm -f /mnt_efi_test/LAST_BOOTED_VER
			umount /mnt_efi_test
		done
		/usr/bin/do_mount 2 /mnt_efi_test
		LAST_BOOTED_VER="`cat /proc/cmdline|egrep -o ' BURMILLAOS_VER=[^ ]+'|egrep -o '[^=]+$'`"
		echo "LAST_BOOTED_VER=$LAST_BOOTED_VER"  > /mnt_efi_test/LAST_BOOTED_VER
		umount /mnt_efi_test
		rmdir /mnt_efi_test
		
		mkdir -p $(__FILE_DIR__)/startup.d
		ls $(__FILE_DIR__)/startup.d/*.sh 2>/dev/null|sort|while read sh;do
			if [ -n "$sh" ];then
				. $sh
			fi
		done
	START_UP
	write_env_file 0755 /installing/oem_part/opt/rancher/bin/shutdown.sh.0 <<'SHUTDOWN'
		#!/bin/bash
		# Do not edit this file
		# Please use ./shutdown.d/foo.sh
		source /opt/rancher/bin/bashlib_y
		require chain_bak

		S_UF=/var/lib/racher/conf/cloud-config.d/user_config.yml
		S_HNAME_FULL=`yq e -i ".hostname" $S_UF`
		S_PORT=`yq e .rancher.ssh.port $S_UF`
		S_NAMESERVERS=(`yq e .rancher.network.dns.nameservers $S_UF|awk '{print substr($0, 3)}'`)
		for s_intf in `yq e .rancher.network.interfaces $S_UF|awk '{print substr($0, 3)}'`; do
			s_adr=`yq e .rancher.network.interfaces.$intf.address $S_UF`
			s_gw=`yq e .rancher.network.interfaces.$intf.gateway $S_UF`
			if [ -n "$adr" -a -n "$gw" ];then
				S_NET_DEV=$s_intf
				S_IP_NETMASK=$s_adr
				S_GATEWAY=$s_gw
				break
			fi
		done
		if [ -n "$S_NET_DEV" ];then
			S_DNS_SETTINGS_YQ="[`join , ${S_NAMESERVERS[@]}`]"
			S_USER_SETTINGS="rancher.network.interfaces.$S_NET_DEV.address=$S_IP_NETMASK rancher.network.interfaces.$S_NET_DEV.gateway=$S_GATEWAY rancher.network.dns.nameservers=$S_DNS_SETTINGS_YQ"
			if [ "`cat $S_UF`" != "$S_USER_SETTINGS" ]; then
				echo "$S_USER_SETTINGS" > /opt/rancher/conf/grub/USER_SETTINGS.0
				chain_bak -10 /opt/rancher/conf/grub/USER_SETTINGS{.0,}
			fi
		fi
		mkdir -p $(__FILE_DIR__)/shutdown.d
		ls $(__FILE_DIR__)/shutdown.d/*.sh 2>/dev/null|sort|while read sh;do
			if [ -n "$sh" ];then
				. $sh
			fi
		done
	SHUTDOWN
	if !cp -a write_script blkid2 do_mount chain_bak partNum2Dev args parse_func /installing/oem_part/opt/rancher/bin;then
		die missing file
	fi

	if [ "`cat /installing/oem_part/opt/rancher/bin/start.sh.0`" != "`cat /installing/oem_part/opt/rancher/bin/start.sh`" ];then
		chain_bak -10 --compare /installing/oem_part/opt/rancher/bin/start.sh.0 /installing/oem_part/opt/rancher/bin/start.sh
	fi
	if [ "`cat /installing/oem_part/opt/rancher/bin/shutdown.sh.0`" != "`cat /installing/oem_part/opt/rancher/bin/shutdown.sh`" ];then
		chain_bak -10 --compare /installing/oem_part/opt/rancher/bin/shutdown.sh.0 /installing/oem_part/opt/rancher/bin/shutdown.sh
	fi
	deb wc start.sh=`wc /installing/oem_part/opt/rancher/bin/start.sh`
	deb wc start.sh\(awk 1\)=`wc /installing/oem_part/opt/rancher/bin/start.sh|awk '{print $1}'`
	if [ "`wc /installing/oem_part/opt/rancher/bin/start.sh|awk '{print $1}'`" = 1 ];then
		die "failed to create start.sh"
	fi


	# preserve user setting for grub
	mkdir -p /installing/oem_part/opt/rancher/conf/grub
	if [ "$USER_SETTINGS_FOR_GRUB_SOURCE" != "`cat /installing/oem_part/opt/rancher/conf/grub/USER_SETTINGS 2> /dev/null`" ]; then
		if [ -e /installing/oem_part/opt/rancher/conf/grub/USER_SETTINGS ];then
			chain_bak -10 --compare /installing/oem_part/opt/rancher/conf/grub/USER_SETTINGS
		fi
		echo -n "$USER_SETTINGS_FOR_GRUB_SOURCE" > /installing/oem_part/opt/rancher/conf/grub/USER_SETTINGS
		chmod +x /installing/oem_part/opt/rancher/conf/grub/USER_SETTINGS
	fi

	mkdir -p /installing/efipart
	do_mount 2  /installing/efipart
	INITRD=$INITRD_FILE-mod
	rm -f /installing/efipart/TOPIC
	umount /installing/efipart
	umount /installing/oem_part

FINAL

ssh_sudo reboot
