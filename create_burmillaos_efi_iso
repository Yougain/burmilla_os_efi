#!/bin/bash

UB_CERT_URL=https://letsencrypt.org/certs/lets-encrypt-r3.pem
BM_RELEASE_URL=https://github.com/burmilla/os/releases
UB_RELEASE_URL=https://releases.ubuntu.com

function check_cmd {
	while (( "$#" )); do
		if [ -z "`sudo which $1 2>/dev/null`" ];then
			echo "Command, '$1' is not found. Please install"
			NO_CMD=1
		fi
		shift
	done
}


PATH=/sbin:$PATH

if [ -x "/usr/bin/apt-get" ];then
	sudo apt-get install -y gdisk genisoimage dosfstools mount parted xorriso grub-efi
fi

check_cmd fallocate gdisk losetup mkfs.fat mkisofs partprobe xorriso
if [ -n "$NO_CMD" ];then
	echo "Terminated."
	exit 1
fi


T=~/burmilla_os_iso

if [ ! -d $T ];then
	mkdir $T
fi

function vc { printf "%03d%03d%03d" $(echo "$1" | tr '.' ' '); }
function ver { 
	local tmp=${1:1}
	echo -n ${tmp%%-*}
}

VERSIONS=`wget $BM_RELEASE_URL --quiet -O - |egrep -o 'expanded_assets/v[0-9].*"'|awk '{sub(/.$/, "", $0);print substr($0,17)}'`
VERSIONS=`ls $T/ | grep -v efi | grep iso | grep burmillaos | sed -s 's/burmillaos-//;s/.iso//'`"
"$VERSIONS
echo "$VERSIONS" > /tmp/$0.ver
echo "$VERSIONS" | awk '{gsub(/^v/,"");gsub(/$/, ".2"); gsub(/-rc/,".1.");gsub(/-beta/,".0.");print}' | tr '.' ' ' | awk '{printf "%03d%03d%03d%03d%03d %01d\n", $1, $2, $3, $4, $5, $4}' > /tmp/$0.vernum
paste -d " " /tmp/$0.vernum /tmp/$0.ver | sort -r | uniq |awk '{print $3}' > /tmp/$0.list
VERSIONS=`cat /tmp/$0.list`

LATEST_STABLE=`echo "$VERSIONS"  | egrep -v '\-rc' | egrep -v '\-beta' | head -1`
LATEST_BETA=`echo "$VERSIONS" | egrep '\-beta' | head -1`
LATEST_RC=`echo "$VERSIONS" | egrep '\-rc' | head -1`

LATEST_STABLE_V=$(ver $LATEST_STABLE)
LATEST_BETA_V=$(ver $LATEST_BETA)
LATEST_RC_V=$(ver $LATEST_RC)


# argument analysis
while (( "$#" )); do
	case "$1" in
		"rc" )
			if [ $(vc $LATEST_STABLE_V) -ge $(vc $LATEST_RC_V) ];then
				echo "latest rc not found"
				exit 1
			fi
			ARG_FOUND=1
			BURMILLAOS_VER=$LATEST_RC
			;;
		"beta" )
			if [ $(vc $LATEST_STABLE_V) -ge $(vc $LATEST_BETA_V) ];then
				echo "latest beta not found"
				exit 1
			fi
			if [ $(vc $LATEST_RC_V) -ge $(vc $LATEST_BETA_V) ];then
				echo "latest beta not found"
				exit 1
			fi
			ARG_FOUND=1
			BURMILLAOS_VER=$LATEST_BETA
			;;
		"--overwrite-usb" )
			OVERWRITE_USB=1
			;;
		* )
			ARG_FOUND=1
			for i in $VERSIONS; do
				if [ "$i" = "$1" ];then
					BURMILLAOS_VER=$1
				fi
			done
	esac
	shift
done

if [ -z "$ARG_FOUND" ];then
	BURMILLAOS_VER=$LATEST_STABLE
fi

if [ -z "$BURMILLAOS_VER" ];then
	echo "Version, $1 is not found"
	echo "Available Versions:"
	echo "$VERSIONS"
	exit 1
fi

UB_CERT=$T/${UB_CERT_URL##*/}


function WG(){
	local outOpt
	local outFile
	local outOpt2
	for ag in $@;do
		if [ -n "$outOpt" ];then
			outFile=$ag
			break
		fi
		if [ "$ag" = "-O" ]; then
			outOpt=1
		fi
	done
	if [ -z "$outFile" ];then
		for ag in $@;do
			if [ -n "`echo $ag|grep -o '^(http|https|ftp)://'`" ];then
				outFile=${ag##*/}
				outOpt2="-O $outFile"
				break;
			fi
		done
	fi
	local nc
	local go
	case "$outFile" in
		"-")
			go=1
			;;
		"")
			echo "Error: argument error for wget $@. Exiting" >&2
			exit 1
			;;
		*)
			if [ ! -s "$outFile" ];then
				go=1
			fi
			nc=-nc
	esac
	
	if [ -n "$go" ]; then
		if ! wget $outOpt2 -q $nc $@;then
			echo "ERROR: wget $@ failed. Exiting." >&2
			exit 1
		fi
		if [ "$outFile" != "-" ]; then
			if [ ! -s "$outFile" ]; then
				echo "ERROR: 'wget $outOpt2 $nc $@' failed. Exiting." >&2
				exit 1
			fi
		fi
	fi
}


if [ ! -s $UB_CERT ]; then
	rm -f $UB_CERT.no_check $UB_CERT $UB_CERT.rechecked
	WG --no-check-certificate $UB_CERT_URL -O $UB_CERT.no_check
	WG --ca-certificate=$UB_CERT.no_check $UB_CERT_URL -O $UB_CERT
	WG --ca-certificate=$UB_CERT $UB_CERT_URL -O $UB_CERT.rechecked
	if ! diff $UB_CERT.rechecked $UB_CERT; then
		echo "ERROR: Abnormal certificate provided from $UB_CERT_URL. Exitting"
		exit 1
	fi
	rm -f $UB_CERT.no_check $UB_CERT.rechecked
fi

BURMILLAOS_VER=${BURMILLAOS_VER%$'\n'*}
echo BurmillaOS Version: $BURMILLAOS_VER
BURMILLA_ISO="$T"/burmillaos-$BURMILLAOS_VER.iso

LATEST_U=`WG --ca-certificate=$UB_CERT -O - $UB_RELEASE_URL/ 2>/dev/null|awk '/Ubuntu [0-9]+(\.[0-9]+)+ LTS/{print $0}'|head -1|awk '{match($0, /Ubuntu [0-9]+(\.[0-9]+)+ LTS \([^)]+\)/); print substr($0, RSTART, RLENGTH)}'`
LATEST_UV=`echo $LATEST_U | awk '{print $2}'`
UDIR=`WG --ca-certificate=$UB_CERT -O - $UB_RELEASE_URL/ 2>/dev/null|grep "$LATEST_U"|grep href| head -1|awk '{match($0,/href="[^"]+"/);print substr($0,RSTART+6,RLENGTH-7)}'`
UBUNTU_ISO="$T"/ubuntu-$LATEST_UV-live-server-amd64.iso
echo Ubuntu Version: $LATEST_UV

WG $BM_RELEASE_URL/download/$BURMILLAOS_VER/burmillaos-$BURMILLAOS_VER.iso -O $BURMILLA_ISO
WG --ca-certificate=$UB_CERT $UB_RELEASE_URL/$UDIR"ubuntu-$LATEST_UV-live-server-amd64.iso" -O $UBUNTU_ISO


UD="$T"/tmpubuntu
RD="$T"/tmpburmillaos
PD="$T"/tmpproduct
ED="$T"/tmpefiimg
ED2="$T"/tmpefiimg2
P_IMG="$T"/burmillaos-$BURMILLAOS_VER.efi.img
P_ISO="$T"/burmillaos-$BURMILLAOS_VER.efi.iso

echo $P_ISO

P_ISO_SIZE=$(stat -c%s $BURMILLA_ISO)
P_ISO_SIZE=$((P_ISO_SIZE + P_ISO_SIZE / 10))
P_ISO_SIZE_K=$((P_ISO_SIZE / 1024))

sudo umount $PD $UD $RD $ED $ED2
sudo rm -rf $PD $UD $RD $ED $ED2
mkdir -p $UD $RD $PD $ED $ED2
sudo mount $UBUNTU_ISO $UD
sudo mount $BURMILLA_ISO $RD

VMLINUZ_FILE=`ls -d $RD/boot/vmlinuz-*`
VMLINUZ_FILE_COUNT=`echo "$VMLINUZ_FILE" | wc | awk '{print $1}'`
if [ "$VMLINUZ_FILE_COUNT" != "1" ];then
	echo "cannot detect linux kernel in iso image, or multiple kernel detected."
	exit 1
fi
if [ "`ls -ld $RD/boot/initrd-$BURMILLAOS_VER | wc | awk '{print $1}'`" != "1" ];then
	echo "/boot/initrd-$BURMILLAOS_VER is missing in iso image."
	exit 1
fi
KERNEL_FILE=${VMLINUZ_FILE##*/}
sudo losetup -D `sudo losetup -a | grep $P_IMG | awk '{x=$1; sub(":","", x); print x}'`
if [ -e "$P_IMG" ];then
	rm $P_IMG
fi
fallocate -l "$P_ISO_SIZE_K"K $P_IMG
gdisk $P_IMG <<END
o
y
n



ef00
w
y
END
partprobe
LDEVH=`sudo losetup --partscan --show --find $P_IMG`
LDEV=$LDEVH"p1"
ls $LDEV
GLOBAL_APPEND=`cat $RD/boot/global.cfg` 
GLOBAL_APPEND_ARGS=${GLOBAL_APPEND#APPEND *}
KERNEL_ARGS="rancher.password=rancher $GLOBAL_APPEND_ARGS root=/dev/sdb1 panic=10"
VGA_ARGS="nomodeset vga=775 video=1024x768"

sudo mkfs.fat $LDEV
sudo mount $LDEV $PD

echo sudo cp -ar $RD/* $PD
sudo cp -ar $RD/* $PD
echo sudo cp -ar $UD/boot/grub $PD/boot/
sudo cp -ar $UD/boot/grub $PD/boot/
echo sudo cp -ar $UD/EFI $PD/
sudo cp -ar $UD/EFI $PD/

sudo cat - >> "$PD"/rancheros/Dockerfile.amd64 <<END
RUN mkdir /mnt2 || true
RUN mount -o degraded LABEL=RANCHER_STATE_SIBLING /mnt2 || true
RUN rm -f /mnt2/.reinstalling || true
RUN umount /mnt2 || true
END

#sudo cp "$T"/efiboot.img $PD/boot/isolinux/

cat - > "$T"/grub.cfg <<END


# check this grub has been chainloaded
search --set=installer --label RANCHEROS

if [ -z \$installer ];then
	echo "Cannot find disk label 'RANCHEROS'. Stop all."
	echo "Please do not modify label of installer disk."
	sleep 3000000
fi

root=\$installer,msdos1


if [ \$cmdpath == (\$installer,msdos2)/EFI/BOOT ];then
	set chained=0
else
	set chained=1  # chained from grub booted by hard disk
fi

# get preserved parameters for installer boot
if search --set=oem --label RANCHER_OEM_SIBLING; then
	set ev_f=(\$oem)/oem_root/opt/rancher/conf/grub/grub_env_for_installer
	if [ -e \$ev_f ]; then
		echo \$ev_f found
		source \$ev_f
	else
		echo \$ev_f not found
		set ev_f=(\$oem)/oem_root/var/lib/yougain/burmilla/grub_env_for_installer
		if [ -e \$ev_f ]; then
			echo \$ev_f found
			source \$ev_f
		else
			echo \$ev_f not found
		fi
	fi
else
	echo RANCHER_OEM_SIBLING not found
fi

# default parameters for installer boot
linux   /boot/$KERNEL_FILE $VGA_ARGS \$USER_SETTINGS $KERNEL_ARGS ---
initrd  /boot/initrd-$BURMILLAOS_VER

# check installed in hard disk
if search --set=state --label RANCHER_STATE_SIBLING; then
	set default=1 # default: boot from hard disk
else
	set default=0 # default: boot from installer
fi

# default timeout
set timeout=30


if [ \$chained == 1 ];then
	# if chainloaded, just boot up from installer
	echo "\$cmdpath == (\$installer)/EFI/BOOT"
	echo "chained='\$chained'"
	boot
	echo "Cannot continue.... Please reset."
	sleep 100000000
else # grub directly loaded
	# check undergoing installation
	if [ -n \$state ];then
		if [ -e (\$state)/state_root/.reinstalling ]; then
			echo (\$state)/state_root/.reinstalling found
			boot
		else
			if [ -e (\$state)/state_root/var/lib/rancher/conf/cloud-config.yml ]; then 
				echo (\$state)/state_root/var/lib/rancher/conf/cloud-config.yml found
				if [ -e (\$state)/state_root/home ]; then
					# 3rd phase of installation because /state_root/var/lib/rancher/conf is not a symbolick link
					boot
				else
					set timeout=
					set default=0
					ERR_MSG0=" (Somthing wrong: both '/home' and '/var/lib/rancher/conf/cloud-config.yml' exists during installation)"
				fi
			else # 2nd phase of installation : boot by target disk
				echo (\$state)/state_root/var/lib/rancher/conf/cloud-config.yml not found
				if [ -e (\$state)/state_root/home ]; then
					echo (\$state)/state_root/home found
					# normal boot (default: hard disk)
					set default=1
					set timeout=5
				else
					if search --no-floppy --set=efi --label EFI; then
						echo EFI partition found
						prefix=(\$efi)/efi/boot
						configfile \$prefix/grub.cfg
						echo "Cannot continue.... Please reset."
						sleep 100000000
					else
						set timeout=
						set default=1
						ERR_MSG1=" (Somthing wrong: cannot find EFI partition on target hard disk for second stage of installation)"
					fi
				fi
			fi
		fi
	fi
fi

loadfont unicode

set menu_color_normal=white/black
set menu_color_highlight=black/light-gray

menuentry "Install Burmilla $BURMILLAOS_VER \$ERR_MSG0" {
	boot
}
if [ -n \$state ]; then
	menuentry "Boot from installation detected on hard disk \$ERR_MSG1" {
		if search --no-floppy --set=efi --label EFI; then
			prefix=(\$efi)/efi/boot
			configfile \$prefix/grub.cfg
		else
			echo "Cannot find EFI partition of target hard disk for booting."
		fi
		echo "Cannot continue.... Please reset."
		sleep 100000000
	}
else
	default=0
fi
menuentry 'BIOS/UEFI Firmware Settings' {
    fwsetup
}
menuentry 'Test memory' {
    linux16 /boot/memtest86+.bin
}
menuentry "Install Burmilla $BURMILLAOS_VER (debug)" {
    linux   /boot/$KERNEL_FILE vga=ask rancher.debug=true \$USER_SETTINGS $KERNEL_ARGS ---
    initrd  /boot/initrd-$BURMILLAOS_VER
}
END

sudo cp -f "$T"/grub.cfg $PD/boot/grub/grub.cfg

BOOT_IMG_DATA=$ED
BOOT_IMG=$ED2/efi.img

sudo mkdir -p $(dirname $BOOT_IMG)

truncate -s 8M $BOOT_IMG
mkfs.vfat -n ROS_EFI $BOOT_IMG
sudo mount $BOOT_IMG $BOOT_IMG_DATA
sudo mkdir -p $BOOT_IMG_DATA/efi/boot

cat - > "$T"/early-config.cfg <<'END'
search --no-floppy --set=root --label RANCHEROS
configfile /boot/grub/grub.cfg
END

if [ -x /sbin/grub2-mkimage ];then
	GMK=grub2-mkimage
else
	GMK=grub-mkimage
fi

#if ! sudo $GMK \
#	-c "$T"/early-config.cfg \
#    -C xz \
#    -p '' \
#    -O x86_64-efi \
#    -o $BOOT_IMG_DATA/efi/boot/bootx64.efi \
#    boot linux search normal configfile \
#    part_gpt btrfs ext2 fat iso9660 loopback \
 #   test keystatus gfxmenu regexp probe \
 #   efi_gop efi_uga all_video gfxterm font \
 #   echo read ls cat png jpeg halt reboot; then
 #   	echo "ERROR: 'grub-mkimage' failed."
 #   	exit 1
#fi

sudo cp -av $UD/EFI/boot/*  $BOOT_IMG_DATA/efi/boot
sudo cp -av $PD/boot/grub/grub.cfg $BOOT_IMG_DATA/efi/boot

sudo umount $BOOT_IMG_DATA
sudo rm -rf $BOOT_IMG_DATA

echo iso boot from \"$BOOT_IMG\"

echo All files are prepared.


sudo rm -rf $PD/boot/isolinux
sudo rm -rf $PD/boot/linux-current.cfg


echo "$PD"/rancheros/Dockerfile.amd64
cat "$PD"/rancheros/Dockerfile.amd64

exit 1

sudo xorriso -as mkisofs \
    -iso-level 3 \
    -r -V RANCHEROS \
    -J -joliet-long \
    -append_partition 2 0xef $BOOT_IMG \
    -partition_cyl_align all \
    -o $P_ISO \
    $PD

echo Iso created.

sudo umount $UD $RD $PD
sudo losetup -D $LDEVH
rmdir $UD $RD $PD
rm -rf $ED2
rm $P_IMG

if [ -n "$OVERWRITE_USB" ];then
	if [ -x "`which usb_dev`" ];then
		UD="`usb_dev | egrep -o "/dev/sd." | head -1`"
		if [ -e "$UD" ];then
			sudo dd if=$P_ISO of=$UD bs=10M status=progress
		else
			echo Error: USB disk not found.
		fi
	else
		echo Error: command 'usb_dev' not found. 
	fi
fi

