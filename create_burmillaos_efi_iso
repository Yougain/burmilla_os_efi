#!/bin/bash


source bashlib_y

if [ "`id -u`" != 0 -o -z "$SUDO_USER" ];then
	cmd="DEBUG=$DEBUG $0 $@"
	exec sudo bash -c "$cmd"
fi

require write_script vercmp

ask_yes_no_color whiteBgRed yellowBgRed


UB_CERT_URL=https://letsencrypt.org/certs/lets-encrypt-r3.pem
BM_RELEASE_URL=https://github.com/burmilla/os/releases
UB_RELEASE_URL=https://releases.ubuntu.com/jammy

PATH="$(realpath .):$PATH"

function check_cmd {
	while (( "$#" )); do
		if [ -z "`sudo which $1 2>/dev/null`" ];then
			errmsg "Command, '$1' is not found. Please install"
			NO_CMD=1
		fi
		shift
	done
}

PATH=/sbin:$PATH

for e in fallocate gdisk losetup mkfs.fat mkisofs xorriso ; do
	if [ -z "`sudo which $e`" ];then
		sudo apt-get -q install -y gdisk genisoimage dosfstools mount parted xorriso
	fi
done

check_cmd fallocate gdisk losetup mkfs.fat mkisofs xorriso #partprobe
if [ -n "$NO_CMD" ];then
	die "Terminated."
fi


T=$SCRIPT_TMP_DIR
ISO_DIR=/home/$SUDO_USER/burmilla_os_iso


F_VERSIONS=`wget $BM_RELEASE_URL --quiet -O - |egrep -o 'expanded_assets/v[0-9].*"'|awk '{sub(/.$/, "", $0);print substr($0,17)}'`
NON_EFI_BTRFS_VERSIONS=(`ls /home/$SUDO_USER/burmilla_os_iso | grep -v efi | grep iso | grep burmillaos | sed -s 's/burmillaos-//;s/.iso//'`)

LATEST_STABLE=$(latest_ver `echo "$F_VERSIONS"|grep -v rc|grep -v beta`)
LATEST_BETA=$(latest_ver `echo "$F_VERSIONS"|grep rc`)
LATEST_RC=$(latest_ver `echo "$F_VERSIONS"|grep beta`)

if vercmp $LATEST_STABLE $LATEST_BETA;then
	LATEST_BETA=
fi

if vercmp $LATEST_RC $LATEST_BETA;then
	LATEST_BETA=
fi

if vercmp $LATEST_STABLE $LATEST_RC;then
	LATEST_RC=
fi

# argument analysis
while (( "$#" )); do
	case "$1" in
		"rc" )
			if [ -z "$LATEST_RC" ];then
				die "latest rc not found"
			fi
			BURMILLAOS_VER=$LATEST_RC-btrfs-$LATEST_B_VERSION
			;;
		"beta" )
			if [ -z "$LATEST_BETA" ];then
				die "latest beta not found"
			fi
			BURMILLAOS_VER=$LATEST_BETA-btrfs-$LATEST_B_VERSION
			;;
		"--overwrite-usb" )
			OVERWRITE_USB=1
			;;
		"--skip-rebuild" )
			SKIP_REBUILD=1
			;;
		"--skip-recreate" )
			SKIP_RECREATE=1
			;;
		"--force" )
			FORCE=1
			ASK_YES_NO=y
			;;
		"--no-recompile" )
			NO_RECOMPILE=1
			;;
		"--just-compiled" )
			JUST_COMPILED=1
			;;
		"-y")
			ASK_YES_NO=y
			;;
		"--write-usb-only")
			SKIP_RECREATE=1
			;;
		* )
			BURMILLAOS_VER=$1
			if ! [[ $1 =~ -btrfs- ]];then
				info build $1
				su $SUDO_USER -c "./build_burmillaos $1"
				BURMILLAOS_VER=$1-btrfs-$LATEST_B_VERSION
			elif ! detect NON_EFI_BTRFS_VERSIONS $1; then
				die cannot find $1.
			fi
			;;
	esac
	shift
done


match_iso(){
	eval "rver_$2="
	eval "bver_$2="
	if [[ $1 =~ burmillaos-((v[0-9]+(\.[0-9]+)+)(-(rc|beta)[0-9]+(\.[0-9]+)*|))-btrfs-([0-9]+(\.[0-9]+)+)\.iso ]];then
		eval "rver_$2=\"${BASH_REMATCH[1]}\""
		eval "bver_$2=\"${BASH_REMATCH[7]}\""
		return 0
	else
		return 1
	fi
}

get_top_iso(){
	top_iso=
	local current
	for f in /home/$SUDO_USER/burmilla_os_iso/burmillaos-*.iso; do
		if match_iso "$f"; then
			if [ -z "$current" ];then
				current="$f"
			else
				if $1 $f $current; then
					current="$f"
				fi
			fi
		fi
	done
	top_iso="$current"
}

for pfx in r b; do
	eval '
		by_'$pfx'ver(){
			match_iso $1 a
			match_iso $2 b
			if vercmp $'$pfx'ver_a $'$pfx'ver_b; then
				return 0
			else
				return 1
			fi
		}
	'
done

by_timestamp(){
	[ "$1" -nt "$2" ]
}

get_top_iso by_rver

dbv $top_iso

match_iso $top_iso t
dbv $rver_t


if [ -n "$NO_RECOMPILE" ];then
	get_top_iso by_bver
elif [ -n "$JUST_COMPILED" ];then
	get_top_iso by_timestamp
fi
dbv $top_iso
if [ -n "$top_iso" ];then
	match_iso $top_iso m
	dbv $rver_m
	if vercmp $rver_t $rver_m;then
		if ! ask_yes_no "'$rver_m-btrfs-$bver_m' is not based on latest version of Burmilla OS, '$rver_t'.\nStill compile it?"; then
			die "User terminated."
		fi
	fi
	LATEST_B_VERSION=$bver_m
else
	LATEST_B_VERSION=`cat version|awk '{print $1}'`
fi

echo $LATEST_B_VERSION


if [ -z "$BURMILLAOS_VER" ]; then
	BURMILLAOS_VER=$LATEST_STABLE-btrfs-$LATEST_B_VERSION
fi
if [ "$LATEST_STABLE-btrfs-$LATEST_B_VERSION" = "$BURMILLAOS_VER" ]; then
	if ! detect NON_EFI_BTRFS_VERSIONS $BURMILLAOS_VER; then
		su $SUDO_USER -c "./build_burmillaos"
	fi
fi
NON_EFI_BTRFS_VERSIONS=(`ls /home/$SUDO_USER/burmilla_os_iso | grep -v efi | grep iso | grep burmillaos | sed -s 's/burmillaos-//;s/.iso//'`)
if ! detect NON_EFI_BTRFS_VERSIONS $BURMILLAOS_VER; then
	die "cannot build $BURMILLAOS_VER"
fi



#UB_CERT=$T/${UB_CERT_URL##*/}


function WG(){
	local outOpt
	local outFile
	local outOpt2
	for ag in $@;do
		if [ -n "$outOpt" ];then
			outFile=$ag
			break
		fi
		if [ "$ag" = "-O" ]; then
			outOpt=1
		fi
	done
	if [ -z "$outFile" ]; then
		for ag in $@;do
			if [ -n "`echo $ag|grep -o '^(http|https|ftp)://'`" ];then
				outFile=${ag##*/}
				outOpt2="-O $outFile"
				break;
			fi
		done
	fi
	local nc
	local go
	case "$outFile" in
		"-")
			go=1
			;;
		"")
			die "argument error for wget $@. Exiting" >&2
			;;
		*)
			if [ ! -s "$outFile" ];then
				go=1
			fi
			nc=-nc
	esac
	
	if [ -n "$go" ]; then
		sudo rm -f $outFile
		if ! wget $outOpt2 -q $nc $@;then
			die "wget $@ failed. Exiting." >&2
		fi
		if [ "$outFile" != "-" ]; then
			if [ ! -s "$outFile" ]; then
				die "'wget $outOpt2 $nc $@' failed. Exiting." >&2
			fi
		fi
	fi
}


#if [ ! -s $UB_CERT ]; then
#	rm -f $UB_CERT.no_check $UB_CERT $UB_CERT.rechecked
#	WG --no-check-certificate $UB_CERT_URL -O $UB_CERT.no_check
#	WG --ca-certificate=$UB_CERT.no_check $UB_CERT_URL -O $UB_CERT
#	WG --ca-certificate=$UB_CERT $UB_CERT_URL -O $UB_CERT.rechecked
#	if ! diff $UB_CERT.rechecked $UB_CERT; then
#		echo "ERROR: Abnormal certificate provided from $UB_CERT_URL. Exitting"
#		exit 1
#	fi
#	rm -f $UB_CERT.no_check $UB_CERT.rechecked
#fi

BURMILLAOS_VER=${BURMILLAOS_VER%$'\n'*}
info BurmillaOS Version: $BURMILLAOS_VER
BURMILLA_ISO="$ISO_DIR"/burmillaos-$BURMILLAOS_VER.iso

LATEST_U=`WG --no-check-certificate -O - $UB_RELEASE_URL/ 2>/dev/null|awk '/Ubuntu [0-9]+(\.[0-9]+)+ LTS/{print $0}'|head -1|awk '{match($0, /Ubuntu [0-9]+(\.[0-9]+)+ LTS \([^)]+\)( Beta|)/); print substr($0, RSTART, RLENGTH - 1)}'`
LATEST_UV=`echo $LATEST_U | awk '{print $2}'`
if [ "${LATEST_U##*)}" = " Beta" ];then
	beta="-beta"
fi
LATEST_UV=`echo $LATEST_U | awk '{print $2}'`
#UDIR=`WG --no-check-certificate -O - $UB_RELEASE_URL/ 2>/dev/null|grep "$LATEST_U"|grep href| head -1|awk '{match($0,/href="[^"]+"/);print substr($0,RSTART+6,RLENGTH-7)}'`

#LATEST_UV=22.04.4
#UDIR=jammy/

UBUNTU_ISO="$ISO_DIR"/ubuntu-$LATEST_UV$beta-live-server-amd64.iso
info Ubuntu Version: $LATEST_UV

if [ ! -e "$BURMILLA_ISO" ];then
	die cannot find burmillaos-$BURMILLAOS_VER.iso
fi
if [ ! -e "$UBUNTU_ISO" -o ! -s "$UBUNTU_ISO"  ];then
	sudo rm -f "$UBUNTU_ISO"
	info Downloading ubuntu-$LATEST_UV$beta-live-server-amd64.iso ...
	WG --no-check-certificate $UB_RELEASE_URL/$UDIR"ubuntu-$LATEST_UV$beta-live-server-amd64.iso" -O $UBUNTU_ISO
	info done
fi


UD="$T"/tmpubuntu
RD="$T"/tmpburmillaos
PD="$T"/tmpproduct
ED="$T"/tmpefiimg
ED2="$T"/tmpefiimg2
P_IMG="$T"/burmillaos-$BURMILLAOS_VER.efi.img
P_ISO="$ISO_DIR"/burmillaos-$BURMILLAOS_VER.efi.iso

info $P_ISO

if [ -z "$SKIP_RECREATE" ];then

#require create_initrd_mod write_script
#create_initrd_mod $BURMILLAOS_VER
#if [ -z "$INITRD_FILE" ];then
#	die initrd file, not detected
#fi
#INITRD_SIZE=$(stat -c%s $INITRD_FILE-mod)

require create_initrd_mod
pushd "$T"
if [ -n "$DEBUG" ];then
	export DEBUG
fi

create_initrd_mod
popd
INITRD_FILE_MOD="`ls -d \"$T\"/initrd-*`"
INITRD_FILE_MOD_SIZE=$(stat -c%s $INITRD_FILE_MOD)


P_ISO_SIZE=$(stat -c%s $BURMILLA_ISO)
P_ISO_SIZE=$((P_ISO_SIZE + INITRD_FILE_MOD_SIZE + P_ISO_SIZE / 10))
P_ISO_SIZE_K=$((P_ISO_SIZE / 1024))

sudo umount $PD $UD $RD $ED $ED2
sudo rm -rf $PD $UD $RD $ED $ED2
mkdir -p $UD $RD $PD $ED $ED2
sudo mount $UBUNTU_ISO $UD
sudo mount $BURMILLA_ISO $RD

VMLINUZ_FILE=`ls -d $RD/boot/vmlinuz-*`
VMLINUZ_FILE_COUNT=`echo "$VMLINUZ_FILE" | wc | awk '{print $1}'`
if [ "$VMLINUZ_FILE_COUNT" != "1" ];then
	die "cannot detect linux kernel in iso image, or multiple kernel detected."
fi
if [ "`ls -ld $RD/boot/initrd-$BURMILLAOS_VER | wc | awk '{print $1}'`" != "1" ];then
	die "/boot/initrd-$BURMILLAOS_VER is missing in iso image."
fi
KERNEL_FILE=${VMLINUZ_FILE##*/}
sudo losetup -D `sudo losetup -a | grep $P_IMG | awk '{x=$1; sub(":","", x); print x}'`
if [ -e "$P_IMG" ];then
	rm $P_IMG
fi
fallocate -l "$P_ISO_SIZE_K"K $P_IMG
gdisk $P_IMG <<END
o
y
n



ef00
w
y
END
#partprobe
LDEVH=`sudo losetup --partscan --show --find $P_IMG`
LDEV=$LDEVH"p1"
ls $LDEV
GLOBAL_APPEND=`cat $RD/boot/global.cfg|sed "s/ console=ttyS[^ ]*//g"|sed "s/ rancher.autologin=ttyS[^ ]*//g"` 
GLOBAL_APPEND_ARGS=${GLOBAL_APPEND#APPEND *}
KERNEL_ARGS="rancher.password=rancher $GLOBAL_APPEND_ARGS"
VGA_ARGS="nomodeset vga=775 video=1024x768"

sudo mkfs.fat $LDEV
sudo mount $LDEV $PD

echo sudo cp -ar $RD/* $PD
sudo cp -ar $RD/* $PD
echo sudo cp -ar $UD/boot/grub $PD/boot/
sudo cp -ar $UD/boot/grub $PD/boot/
cp $INITRD_FILE_MOD $PD/boot/


echo sudo cp -ar $UD/EFI $PD/
sudo cp -ar $UD/EFI $PD/

#sudo bash -c 'cat - >> "'$PD'"/rancheros/Dockerfile.amd64 <<END
#RUN mkdir /mnt2 || true
#RUN mount -o degraded LABEL=RANCHER_STATE_SIBLING /mnt2 || true
#RUN rm -f /mnt2/.reinstalling || true
#RUN umount /mnt2 || true
#END'
#
#echo /rancheros/Dockerfile.amd64
#cat $PD/rancheros/Dockerfile.amd64

replace_debug(){
	local lnc=1
	local f=${1##*/}
	local IFS=""
	while read -r ln;do
		echo -E "$ln" | sed -E 's/^([ \t]*debug[ \t])/\1'$f:$lnc' /g'
		((++lnc))
	done < $1
}


replace_debug $(__FILE_DIR__)/grub.cfg > $PD/boot/grub/grub.cfg

ISO_UUID_ARG="`date -u +%Y-%m-%d-%H-%M-%S-00`"
ISO_UUID="UUID=$ISO_UUID_ARG"
ISO_MOD_DATE=`echo -n $ISO_UUID_ARG|sed s/-//g`


VERSION=$BURMILLAOS_VER
LINUX="$KERNEL_FILE panic=10 $VGA_ARGS BURMILLAOS_VER=$BURMILLAOS_VER $KERNEL_ARGS root=$ISO_UUID"
store_env -s $PD/boot/grub/LINUX
LINUX_DEBUG="$KERNEL_FILE vga=ask rancher.debug=true DEBUG=1 BURMILLAOS_VER=$BURMILLAOS_VER $KERNEL_ARGS root=$ISO_UUID"
store_env -s $PD/boot/grub/LINUX_DEBUG
store_env -s $PD/boot/grub/VERSION

INITRD="initrd-$BURMILLAOS_VER"-mod
store_env -s $PD/boot/grub/INITRD
info INITRD=$INITRD
info $PD/boot/grub/INITRD : `cat $PD/boot/grub/INITRD`


BOOT_IMG_DATA=$ED
BOOT_IMG=$ED2/efi.img

sudo mkdir -p $(dirname $BOOT_IMG)

truncate -s 8M $BOOT_IMG
mkfs.vfat -n ROS_EFI $BOOT_IMG
sudo mount $BOOT_IMG $BOOT_IMG_DATA
sudo mkdir -p $BOOT_IMG_DATA/efi/boot
sudo mkdir -p $BOOT_IMG_DATA/boot/grub
sudo cp -av $PD/boot/grub/grub.cfg $BOOT_IMG_DATA/boot/grub
#sudo cp -av $PD/boot/grub $BOOT_IMG_DATA/boot
sudo cp -av $UD/EFI/boot/*  $BOOT_IMG_DATA/efi/boot
sudo cp -av $PD/boot/grub/grub.cfg $BOOT_IMG_DATA/efi/boot

sudo umount $BOOT_IMG_DATA
sudo rm -rf $BOOT_IMG_DATA

echo iso boot from \"$BOOT_IMG\"

echo All files are prepared.


sudo rm -rf $PD/boot/isolinux
sudo rm -rf $PD/boot/linux-current.cfg

sudo xorriso -as mkisofs \
    -iso-level 3 \
    --modification-date=$ISO_MOD_DATE \
    -r -V RANCHEROS \
    -J -joliet-long \
    -append_partition 2 0xef $BOOT_IMG \
    -partition_cyl_align all \
    -o $P_ISO \
    $PD

echo Iso created.



#sudo umount $UD $RD $PD
sudo losetup -D $LDEVH
#rmdir $UD $RD $PD
#rm -rf $ED2
rm $P_IMG

fi

new_ver(){
	vercmp "${2#*-btrfs-}" "${!1#*-btrfs-}"
	case $? in
	0) # new
		eval "$1=\"\$2\""
		;;
	2) # same
		if vercmp "${2%%-btrfs-*}" "${!1%%-btrfs-*}"; then
			eval "$1=\"\$2\""
		fi
		;;
	esac
}

if [ -n "$OVERWRITE_USB" ];then
	if [ -x "`which usb_dev`" ];then
		UD=(`usb_dev | egrep -o "/dev/sd." | uniq`)
		UD_INSTALLERS=()
		UD_OTHERS=()
		UD_OTHERS_LABEL=()
		for u in "${UD[@]}"; do
			if [ -n "`blkid \"$u\"1 | grep 'LABEL=\"RANCHEROS\" TYPE=\"iso9660\"'`" ];then
				UD_INSTALLERS+=($u)
			elif [ -z "`blkid \"$u\"7 | grep 'LABEL=\"RANCHER_OEM_SIBLING\"'`" ];then
				UD_OTHERS+=($u)
				i=`blkid "$u" | egrep -o 'LABEL="[^"]*"'`
				if [ -n "$i" ];then
					UD_OTHERS_LABEL+=(" ($i)")
				else
					UD_OTHERS_LABEL+=("")
				fi
			fi
		done
		write_iso(){
			if [ -z "$FORCE" ]; then
				whiteBgRed_n "Really overwrite? "
				yellowBgRed_n  "[y/n]:"
				echo -n " "
				if ask_yes_no; then
					FORCE=1
				else
					info "Terminated by user."
				fi
			fi
			if [ -n "$FORCE" ]; then
				info dd if=$P_ISO of=$1 bs=10M status=progress
				sudo dd if=$P_ISO of=$1 bs=10M status=progress
			fi
		}
		if [ "${#UD_INSTALLERS[@]}" -ge 1 ];then
			mkdir -p $SCRIPT_TMP_DIR/test_usb
			for u in "${UD_INSTALLERS[@]}"; do
				mount $u $SCRIPT_TMP_DIR/test_usb
				if [ -f "$SCRIPT_TMP_DIR/test_usb/boot/grub/VERSION" ];then
					O_VER=`cat $SCRIPT_TMP_DIR/test_usb/boot/grub/VERSION`
					O_VER=`eval echo ${O_VER#*=}`
					info installer $u \($O_VER\) found.
					if [ -n "$VER_NEW" ];then
						if new_ver VER_NEW $O_VER; then
							TO_OVERWRITE=$u
						fi
					else
						VER_NEW=$O_VER
						TO_OVERWRITE=$u
					fi
				fi
				umount $SCRIPT_TMP_DIR/test_usb
			done
			if [ -n "$TO_OVERWRITE" ];then
				info Writing $BURMILLAOS_VER over $O_VER \($TO_OVERWRITE\).
				write_iso $TO_OVERWRITE
				exit $?
			fi
		fi
		if [ "${#UD_OTHERS[@]}" = 1 ]; then
			if [ -e "${UD_OTHERS[0]}" ];then
				info Writing $BURMILLAOS_VER over ${UD_OTHERS[0]}${UD_OTHERS_LABEL[0]}.
				write_iso ${UD_OTHERS[0]}
			else
				echo Error: USB disk not found.
			fi
		else
			echo Error: Multiple USB disk, $UD_OTHERS found. Please detach extra USB disk.
		fi
	else
		echo Error: command 'usb_dev' not found. 
	fi
fi

