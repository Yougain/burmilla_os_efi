#!/bin/bash


SCRIPT_PATH=$(dirname "$(realpath -s "$0")")
. $SCRIPT_PATH/bashlib_y

if [ "`id -u`" != 0 -o -z "$SUDO_USER" ];then
	die "not sudo"
fi

UB_CERT_URL=https://letsencrypt.org/certs/lets-encrypt-r3.pem
BM_RELEASE_URL=https://github.com/burmilla/os/releases
UB_RELEASE_URL=https://releases.ubuntu.com

PATH="$(realpath .):$PATH"

function check_cmd {
	while (( "$#" )); do
		if [ -z "`sudo which $1 2>/dev/null`" ];then
			errmsg "Command, '$1' is not found. Please install"
			NO_CMD=1
		fi
		shift
	done
}


PATH=/sbin:$PATH

if [ -x "/usr/bin/apt-get" ];then
	sudo apt-get -q install -y gdisk genisoimage dosfstools mount parted xorriso
fi

check_cmd fallocate gdisk losetup mkfs.fat mkisofs xorriso #partprobe
if [ -n "$NO_CMD" ];then
	die "Terminated."
fi


T=/home/$SUDO_USER/burmilla_os_iso

if [ ! -d $T ];then
	mkdir $T
fi

function vc { printf "%03d%03d%03d" $(echo "$1" | tr '.' ' '); }
function ver { 
	local tmp=${1:1}
	echo -n ${tmp%%-*}
}

F_VERSIONS=`wget $BM_RELEASE_URL --quiet -O - |egrep -o 'expanded_assets/v[0-9].*"'|awk '{sub(/.$/, "", $0);print substr($0,17)}'`
VERSIONS=`ls $T/ | grep -v efi | grep iso | grep burmillaos | sed -s 's/burmillaos-//;s/.iso//'`"
"$F_VERSIONS
echo "$VERSIONS" > $SCRIPT_TMP_DIR/$0.ver
echo "--`cat $SCRIPT_TMP_DIR/$0.ver`--"
echo "$VERSIONS" | awk '{gsub(/^v/,"");gsub(/$/, ".2"); gsub(/-rc/,".1.");gsub(/-beta/,".0.");print}' | tr '.' ' ' | awk '{printf "%03d%03d%03d%03d%03d %01d\n", $1, $2, $3, $4, $5, $4}' > $SCRIPT_TMP_DIR/$0.vernum
paste -d " " $SCRIPT_TMP_DIR/$0.vernum $SCRIPT_TMP_DIR/$0.ver | sort -r | uniq |awk '{print $3}' > $SCRIPT_TMP_DIR/$0.list
VERSIONS=`cat $SCRIPT_TMP_DIR/$0.list`

LATEST_STABLE=`echo "$VERSIONS"  | egrep -v '\-rc' | egrep -v '\-beta' | head -1`
LATEST_BETA=`echo "$VERSIONS" | egrep '\-beta' | head -1`
LATEST_RC=`echo "$VERSIONS" | egrep '\-rc' | head -1`

LATEST_STABLE_V=$(ver $LATEST_STABLE)
LATEST_BETA_V=$(ver $LATEST_BETA)
LATEST_RC_V=$(ver $LATEST_RC)


# argument analysis
while (( "$#" )); do
	case "$1" in
		"rc" )
			if [ $(vc $LATEST_STABLE_V) -ge $(vc $LATEST_RC_V) ];then
				die "latest rc not found"
			fi
			ARG_FOUND=1
			BURMILLAOS_VER=$LATEST_RC
			;;
		"beta" )
			if [ $(vc $LATEST_STABLE_V) -ge $(vc $LATEST_BETA_V) ];then
				die "latest beta not found"
			fi
			if [ $(vc $LATEST_RC_V) -ge $(vc $LATEST_BETA_V) ];then
				die "latest beta not found"
			fi
			ARG_FOUND=1
			BURMILLAOS_VER=$LATEST_BETA
			;;
		"--overwrite-usb" )
			OVERWRITE_USB=1
			;;
		"now" )
			ARG_FOUND=1
			isofile=`ls -t "$T"/burmillaos-*.iso | grep -v .efi.iso | head -1`
			tmp=${isofile##*burmillaos-}
			BURMILLAOS_VER=${tmp%.iso}
			;;
		* )
			ARG_FOUND=1
			echo "$T"/burmillaos-$1.iso
			if [ -e "$T"/burmillaos-$1.iso ];then
				BURMILLAOS_VER=$1
			else
				for i in $VERSIONS; do
					if [ "$i" = "$1" ];then
						BURMILLAOS_VER=$1
					fi
				done
			fi
	esac
	shift
done

if [ -z "$ARG_FOUND" ];then
	BURMILLAOS_VER=$LATEST_STABLE
fi

if [ -z "$BURMILLAOS_VER" ];then
	echo -e  $error"Version, $1 is not found"$normal
	info "Available Versions:"
	echo -e $cyan"$VERSIONS"$normal
	exit 1
fi

UB_CERT=$T/${UB_CERT_URL##*/}


function WG(){
	local outOpt
	local outFile
	local outOpt2
	for ag in $@;do
		if [ -n "$outOpt" ];then
			outFile=$ag
			break
		fi
		if [ "$ag" = "-O" ]; then
			outOpt=1
		fi
	done
	if [ -z "$outFile" ]; then
		for ag in $@;do
			if [ -n "`echo $ag|grep -o '^(http|https|ftp)://'`" ];then
				outFile=${ag##*/}
				outOpt2="-O $outFile"
				break;
			fi
		done
	fi
	local nc
	local go
	case "$outFile" in
		"-")
			go=1
			;;
		"")
			die "argument error for wget $@. Exiting" >&2
			;;
		*)
			if [ ! -s "$outFile" ];then
				go=1
			fi
			nc=-nc
	esac
	
	if [ -n "$go" ]; then
		rm $outFile
		if ! wget $outOpt2 -q $nc $@;then
			die "wget $@ failed. Exiting." >&2
		fi
		if [ "$outFile" != "-" ]; then
			if [ ! -s "$outFile" ]; then
				die "'wget $outOpt2 $nc $@' failed. Exiting." >&2
			fi
		fi
	fi
}


#if [ ! -s $UB_CERT ]; then
#	rm -f $UB_CERT.no_check $UB_CERT $UB_CERT.rechecked
#	WG --no-check-certificate $UB_CERT_URL -O $UB_CERT.no_check
#	WG --ca-certificate=$UB_CERT.no_check $UB_CERT_URL -O $UB_CERT
#	WG --ca-certificate=$UB_CERT $UB_CERT_URL -O $UB_CERT.rechecked
#	if ! diff $UB_CERT.rechecked $UB_CERT; then
#		echo "ERROR: Abnormal certificate provided from $UB_CERT_URL. Exitting"
#		exit 1
#	fi
#	rm -f $UB_CERT.no_check $UB_CERT.rechecked
#fi

BURMILLAOS_VER=${BURMILLAOS_VER%$'\n'*}
info BurmillaOS Version: $BURMILLAOS_VER
BURMILLA_ISO="$T"/burmillaos-$BURMILLAOS_VER.iso

#LATEST_U=`WG --ca-certificate=$UB_CERT -O - $UB_RELEASE_URL/ 2>/dev/null|awk '/Ubuntu [0-9]+(\.[0-9]+)+ LTS/{print $0}'|head -1|awk '{match($0, /Ubuntu [0-9]+(\.[0-9]+)+ LTS \([^)]+\)/); print substr($0, RSTART, RLENGTH)}'`
LATEST_U=`WG --no-check-certificate -O - $UB_RELEASE_URL/ 2>/dev/null|awk '/Ubuntu [0-9]+(\.[0-9]+)+ LTS/{print $0}'|head -1|awk '{match($0, /Ubuntu [0-9]+(\.[0-9]+)+ LTS \([^)]+\)/); print substr($0, RSTART, RLENGTH)}'`
LATEST_UV=`echo $LATEST_U | awk '{print $2}'`
#UDIR=`WG --ca-certificate=$UB_CERT -O - $UB_RELEASE_URL/ 2>/dev/null|grep "$LATEST_U"|grep href| head -1|awk '{match($0,/href="[^"]+"/);print substr($0,RSTART+6,RLENGTH-7)}'`
UDIR=`WG --no-check-certificate -O - $UB_RELEASE_URL/ 2>/dev/null|grep "$LATEST_U"|grep href| head -1|awk '{match($0,/href="[^"]+"/);print substr($0,RSTART+6,RLENGTH-7)}'`
UBUNTU_ISO="$T"/ubuntu-$LATEST_UV-live-server-amd64.iso
info Ubuntu Version: $LATEST_UV

if [ ! -e $BURMILLA_ISO ];then
	for i in $F_VERSION;do
		if [ "$i" = "$BURMILLAOS_VER" ];then
			info download $BURMILLAOS_VER
			WG $BM_RELEASE_URL/download/$BURMILLAOS_VER/burmillaos-$BURMILLAOS_VER.iso -O $BURMILLA_ISO
			break
		fi
	done
	if [ ! -e $BURMILLA_ISO ];then
		die cannot download burmillaos-$BURMILLAOS_VER.iso
	fi
fi
#WG --ca-certificate=$UB_CERT $UB_RELEASE_URL/$UDIR"ubuntu-$LATEST_UV-live-server-amd64.iso" -O $UBUNTU_ISO
WG --no-check-certificate $UB_RELEASE_URL/$UDIR"ubuntu-$LATEST_UV-live-server-amd64.iso" -O $UBUNTU_ISO


UD="$T"/tmpubuntu
RD="$T"/tmpburmillaos
PD="$T"/tmpproduct
ED="$T"/tmpefiimg
ED2="$T"/tmpefiimg2
P_IMG="$T"/burmillaos-$BURMILLAOS_VER.efi.img
P_ISO="$T"/burmillaos-$BURMILLAOS_VER.efi.iso

info $P_ISO


#require create_initrd_mod write_script
require write_script
#create_initrd_mod $BURMILLAOS_VER
#if [ -z "$INITRD_FILE" ];then
#	die initrd file, not detected
#fi
#INITRD_SIZE=$(stat -c%s $INITRD_FILE-mod)

P_ISO_SIZE=$(stat -c%s $BURMILLA_ISO)
#P_ISO_SIZE=$((INITRD_SIZE + P_ISO_SIZE + P_ISO_SIZE / 10))
P_ISO_SIZE=$((P_ISO_SIZE + P_ISO_SIZE / 10))
P_ISO_SIZE_K=$((P_ISO_SIZE / 1024))

sudo umount $PD $UD $RD $ED $ED2
sudo rm -rf $PD $UD $RD $ED $ED2
mkdir -p $UD $RD $PD $ED $ED2
sudo mount $UBUNTU_ISO $UD
sudo mount $BURMILLA_ISO $RD

VMLINUZ_FILE=`ls -d $RD/boot/vmlinuz-*`
VMLINUZ_FILE_COUNT=`echo "$VMLINUZ_FILE" | wc | awk '{print $1}'`
if [ "$VMLINUZ_FILE_COUNT" != "1" ];then
	die "cannot detect linux kernel in iso image, or multiple kernel detected."
fi
if [ "`ls -ld $RD/boot/initrd-$BURMILLAOS_VER | wc | awk '{print $1}'`" != "1" ];then
	die "/boot/initrd-$BURMILLAOS_VER is missing in iso image."
fi
KERNEL_FILE=${VMLINUZ_FILE##*/}
sudo losetup -D `sudo losetup -a | grep $P_IMG | awk '{x=$1; sub(":","", x); print x}'`
if [ -e "$P_IMG" ];then
	rm $P_IMG
fi
fallocate -l "$P_ISO_SIZE_K"K $P_IMG
gdisk $P_IMG <<END
o
y
n



ef00
w
y
END
#partprobe
LDEVH=`sudo losetup --partscan --show --find $P_IMG`
LDEV=$LDEVH"p1"
ls $LDEV
GLOBAL_APPEND=`cat $RD/boot/global.cfg|sed "s/ console=ttyS[^ ]*//g"|sed "s/ rancher.autologin=ttyS[^ ]*//g"` 
GLOBAL_APPEND_ARGS=${GLOBAL_APPEND#APPEND *}
KERNEL_ARGS="rancher.password=rancher $GLOBAL_APPEND_ARGS root=LABEL=RANCHEROS"
VGA_ARGS="nomodeset vga=775 video=1024x768"

sudo mkfs.fat $LDEV
sudo mount $LDEV $PD

echo sudo cp -ar $RD/* $PD
sudo cp -ar $RD/* $PD
echo sudo cp -ar $UD/boot/grub $PD/boot/
sudo cp -ar $UD/boot/grub $PD/boot/


echo sudo cp -ar $UD/EFI $PD/
sudo cp -ar $UD/EFI $PD/

#sudo bash -c 'cat - >> "'$PD'"/rancheros/Dockerfile.amd64 <<END
#RUN mkdir /mnt2 || true
#RUN mount -o degraded LABEL=RANCHER_STATE_SIBLING /mnt2 || true
#RUN rm -f /mnt2/.reinstalling || true
#RUN umount /mnt2 || true
#END'
#
#echo /rancheros/Dockerfile.amd64
#cat $PD/rancheros/Dockerfile.amd64

cp $(__FILE_DIR__)/grub.cfg "$T"/grub.cfg

sudo cp -f "$T"/grub.cfg $PD/boot/grub/grub.cfg

ISO_UUID_ARG="`date -u +%Y-%m-%d-%H-%M-%S-00`"
ISO_UUID="UUID=$ISO_UUID_ARG"
ISO_MOD_DATE=`echo -n $ISO_UUID_ARG|sed s/-//g`


VERSION=$BURMILLAOS_VER
LINUX="$KERNEL_FILE panic=10 $VGA_ARGS BURMILLAOS_VER=$BURMILLAOS_VER $KERNEL_ARGS root=$ISO_UUID"
store_env -s $PD/boot/grub/LINUX
LINUX_DEBUG="$KERNEL_FILE vga=ask rancher.debug=true DEBUG=1 BURMILLAOS_VER=$BURMILLAOS_VER $KERNEL_ARGS root=$ISO_UUID"
store_env -s $PD/boot/grub/LINUX_DEBUG
store_env -s $PD/boot/grub/VERSION

require create_initrd_mod
pushd $PD/boot
create_initrd_mod
popd

INITRD="initrd-$BURMILLAOS_VER"-mod
store_env -s $PD/boot/grub/INITRD
info INITRD=$INITRD
info $PD/boot/grub/INITRD : `cat $PD/boot/grub/INITRD`


BOOT_IMG_DATA=$ED
BOOT_IMG=$ED2/efi.img

sudo mkdir -p $(dirname $BOOT_IMG)

truncate -s 8M $BOOT_IMG
mkfs.vfat -n ROS_EFI $BOOT_IMG
sudo mount $BOOT_IMG $BOOT_IMG_DATA
sudo mkdir -p $BOOT_IMG_DATA/efi/boot

cat - > "$T"/early-config.cfg <<'END'
search --no-floppy --set=root --label RANCHEROS
configfile /boot/grub/grub.cfg
END


sudo cp -av $UD/EFI/boot/*  $BOOT_IMG_DATA/efi/boot
sudo cp -av $PD/boot/grub/grub.cfg $BOOT_IMG_DATA/efi/boot

sudo umount $BOOT_IMG_DATA
sudo rm -rf $BOOT_IMG_DATA

echo iso boot from \"$BOOT_IMG\"

echo All files are prepared.


sudo rm -rf $PD/boot/isolinux
sudo rm -rf $PD/boot/linux-current.cfg

sudo xorriso -as mkisofs \
    -iso-level 3 \
    --modification-date=$ISO_MOD_DATE \
    -r -V RANCHEROS \
    -J -joliet-long \
    -append_partition 2 0xef $BOOT_IMG \
    -partition_cyl_align all \
    -o $P_ISO \
    $PD

echo Iso created.

#sudo umount $UD $RD $PD
sudo losetup -D $LDEVH
#rmdir $UD $RD $PD
#rm -rf $ED2
rm $P_IMG

if [ -n "$OVERWRITE_USB" ];then
	if [ -x "`which usb_dev`" ];then
		UD="`usb_dev | egrep -o "/dev/sd." | uniq`"
		if [ "`echo \"$UD\"|wc|awk '{print $1}'`" = 1 ]; then
			if [ -e "$UD" ];then
				sudo dd if=$P_ISO of=$UD bs=10M status=progress
			else
				echo Error: USB disk not found.
			fi
		else
			echo Error: Multiple USB disk, $UD found. Please detach extra USB disk.
		fi
	else
		echo Error: command 'usb_dev' not found. 
	fi
fi

