#!/bin/bash


SCRIPT_PATH=$(dirname "$(realpath -s "$0")")
. $SCRIPT_PATH/bashlib_y

if [ "`id -u`" != 0 -o -z "$SUDO_USER" ];then
	die "not sudo"
fi

UB_CERT_URL=https://letsencrypt.org/certs/lets-encrypt-r3.pem
BM_RELEASE_URL=https://github.com/burmilla/os/releases
UB_RELEASE_URL=https://releases.ubuntu.com



function check_cmd {
	while (( "$#" )); do
		if [ -z "`sudo which $1 2>/dev/null`" ];then
			errmsg "Command, '$1' is not found. Please install"
			NO_CMD=1
		fi
		shift
	done
}


PATH=/sbin:$PATH

if [ -x "/usr/bin/apt-get" ];then
	sudo apt-get -q install -y gdisk genisoimage dosfstools mount parted xorriso
fi

check_cmd fallocate gdisk losetup mkfs.fat mkisofs xorriso #partprobe
if [ -n "$NO_CMD" ];then
	die "Terminated."
fi


T=/home/$SUDO_USER/burmilla_os_iso

if [ ! -d $T ];then
	mkdir $T
fi

function vc { printf "%03d%03d%03d" $(echo "$1" | tr '.' ' '); }
function ver { 
	local tmp=${1:1}
	echo -n ${tmp%%-*}
}

VERSIONS=`wget $BM_RELEASE_URL --quiet -O - |egrep -o 'expanded_assets/v[0-9].*"'|awk '{sub(/.$/, "", $0);print substr($0,17)}'`
VERSIONS=`ls $T/ | grep -v efi | grep iso | grep burmillaos | sed -s 's/burmillaos-//;s/.iso//'`"
"$VERSIONS
echo "$VERSIONS" > $SCRIPT_TMP_DIR/$0.ver
echo "--`cat $SCRIPT_TMP_DIR/$0.ver`--"
echo "$VERSIONS" | awk '{gsub(/^v/,"");gsub(/$/, ".2"); gsub(/-rc/,".1.");gsub(/-beta/,".0.");print}' | tr '.' ' ' | awk '{printf "%03d%03d%03d%03d%03d %01d\n", $1, $2, $3, $4, $5, $4}' > $SCRIPT_TMP_DIR/$0.vernum
paste -d " " $SCRIPT_TMP_DIR/$0.vernum $SCRIPT_TMP_DIR/$0.ver | sort -r | uniq |awk '{print $3}' > $SCRIPT_TMP_DIR/$0.list
VERSIONS=`cat $SCRIPT_TMP_DIR/$0.list`

LATEST_STABLE=`echo "$VERSIONS"  | egrep -v '\-rc' | egrep -v '\-beta' | head -1`
LATEST_BETA=`echo "$VERSIONS" | egrep '\-beta' | head -1`
LATEST_RC=`echo "$VERSIONS" | egrep '\-rc' | head -1`

LATEST_STABLE_V=$(ver $LATEST_STABLE)
LATEST_BETA_V=$(ver $LATEST_BETA)
LATEST_RC_V=$(ver $LATEST_RC)


# argument analysis
while (( "$#" )); do
	case "$1" in
		"rc" )
			if [ $(vc $LATEST_STABLE_V) -ge $(vc $LATEST_RC_V) ];then
				die "latest rc not found"
			fi
			ARG_FOUND=1
			BURMILLAOS_VER=$LATEST_RC
			;;
		"beta" )
			if [ $(vc $LATEST_STABLE_V) -ge $(vc $LATEST_BETA_V) ];then
				die "latest beta not found"
			fi
			if [ $(vc $LATEST_RC_V) -ge $(vc $LATEST_BETA_V) ];then
				die "latest beta not found"
			fi
			ARG_FOUND=1
			BURMILLAOS_VER=$LATEST_BETA
			;;
		"--overwrite-usb" )
			OVERWRITE_USB=1
			;;
		* )
			ARG_FOUND=1
			echo "$T"/burmillaos-$1.iso
			if [ -e "$T"/burmillaos-$1.iso ];then
				BURMILLAOS_VER=$1
			else
				for i in $VERSIONS; do
					if [ "$i" = "$1" ];then
						BURMILLAOS_VER=$1
					fi
				done
			fi
	esac
	shift
done

if [ -z "$ARG_FOUND" ];then
	BURMILLAOS_VER=$LATEST_STABLE
fi

if [ -z "$BURMILLAOS_VER" ];then
	echo -e  $error"Version, $1 is not found"$normal
	info "Available Versions:"
	echo -e $cyan"$VERSIONS"$normal
	exit 1
fi

UB_CERT=$T/${UB_CERT_URL##*/}


function WG(){
	local outOpt
	local outFile
	local outOpt2
	for ag in $@;do
		if [ -n "$outOpt" ];then
			outFile=$ag
			break
		fi
		if [ "$ag" = "-O" ]; then
			outOpt=1
		fi
	done
	if [ -z "$outFile" ]; then
		for ag in $@;do
			if [ -n "`echo $ag|grep -o '^(http|https|ftp)://'`" ];then
				outFile=${ag##*/}
				outOpt2="-O $outFile"
				break;
			fi
		done
	fi
	local nc
	local go
	case "$outFile" in
		"-")
			go=1
			;;
		"")
			die "argument error for wget $@. Exiting" >&2
			;;
		*)
			if [ ! -s "$outFile" ];then
				go=1
			fi
			nc=-nc
	esac
	
	if [ -n "$go" ]; then
		rm $outFile
		if ! wget $outOpt2 -q $nc $@;then
			die "wget $@ failed. Exiting." >&2
		fi
		if [ "$outFile" != "-" ]; then
			if [ ! -s "$outFile" ]; then
				die "'wget $outOpt2 $nc $@' failed. Exiting." >&2
			fi
		fi
	fi
}


#if [ ! -s $UB_CERT ]; then
#	rm -f $UB_CERT.no_check $UB_CERT $UB_CERT.rechecked
#	WG --no-check-certificate $UB_CERT_URL -O $UB_CERT.no_check
#	WG --ca-certificate=$UB_CERT.no_check $UB_CERT_URL -O $UB_CERT
#	WG --ca-certificate=$UB_CERT $UB_CERT_URL -O $UB_CERT.rechecked
#	if ! diff $UB_CERT.rechecked $UB_CERT; then
#		echo "ERROR: Abnormal certificate provided from $UB_CERT_URL. Exitting"
#		exit 1
#	fi
#	rm -f $UB_CERT.no_check $UB_CERT.rechecked
#fi

BURMILLAOS_VER=${BURMILLAOS_VER%$'\n'*}
info BurmillaOS Version: $BURMILLAOS_VER
BURMILLA_ISO="$T"/burmillaos-$BURMILLAOS_VER.iso

#LATEST_U=`WG --ca-certificate=$UB_CERT -O - $UB_RELEASE_URL/ 2>/dev/null|awk '/Ubuntu [0-9]+(\.[0-9]+)+ LTS/{print $0}'|head -1|awk '{match($0, /Ubuntu [0-9]+(\.[0-9]+)+ LTS \([^)]+\)/); print substr($0, RSTART, RLENGTH)}'`
LATEST_U=`WG --no-check-certificate -O - $UB_RELEASE_URL/ 2>/dev/null|awk '/Ubuntu [0-9]+(\.[0-9]+)+ LTS/{print $0}'|head -1|awk '{match($0, /Ubuntu [0-9]+(\.[0-9]+)+ LTS \([^)]+\)/); print substr($0, RSTART, RLENGTH)}'`
LATEST_UV=`echo $LATEST_U | awk '{print $2}'`
#UDIR=`WG --ca-certificate=$UB_CERT -O - $UB_RELEASE_URL/ 2>/dev/null|grep "$LATEST_U"|grep href| head -1|awk '{match($0,/href="[^"]+"/);print substr($0,RSTART+6,RLENGTH-7)}'`
UDIR=`WG --no-check-certificate -O - $UB_RELEASE_URL/ 2>/dev/null|grep "$LATEST_U"|grep href| head -1|awk '{match($0,/href="[^"]+"/);print substr($0,RSTART+6,RLENGTH-7)}'`
UBUNTU_ISO="$T"/ubuntu-$LATEST_UV-live-server-amd64.iso
info Ubuntu Version: $LATEST_UV

WG $BM_RELEASE_URL/download/$BURMILLAOS_VER/burmillaos-$BURMILLAOS_VER.iso -O $BURMILLA_ISO
#WG --ca-certificate=$UB_CERT $UB_RELEASE_URL/$UDIR"ubuntu-$LATEST_UV-live-server-amd64.iso" -O $UBUNTU_ISO
WG --no-check-certificate $UB_RELEASE_URL/$UDIR"ubuntu-$LATEST_UV-live-server-amd64.iso" -O $UBUNTU_ISO


UD="$T"/tmpubuntu
RD="$T"/tmpburmillaos
PD="$T"/tmpproduct
ED="$T"/tmpefiimg
ED2="$T"/tmpefiimg2
P_IMG="$T"/burmillaos-$BURMILLAOS_VER.efi.img
P_ISO="$T"/burmillaos-$BURMILLAOS_VER.efi.iso

info $P_ISO

P_ISO_SIZE=$(stat -c%s $BURMILLA_ISO)
P_ISO_SIZE=$((P_ISO_SIZE + P_ISO_SIZE / 10))
P_ISO_SIZE_K=$((P_ISO_SIZE / 1024))

sudo umount $PD $UD $RD $ED $ED2
sudo rm -rf $PD $UD $RD $ED $ED2
mkdir -p $UD $RD $PD $ED $ED2
sudo mount $UBUNTU_ISO $UD
sudo mount $BURMILLA_ISO $RD

VMLINUZ_FILE=`ls -d $RD/boot/vmlinuz-*`
VMLINUZ_FILE_COUNT=`echo "$VMLINUZ_FILE" | wc | awk '{print $1}'`
if [ "$VMLINUZ_FILE_COUNT" != "1" ];then
	die "cannot detect linux kernel in iso image, or multiple kernel detected."
fi
if [ "`ls -ld $RD/boot/initrd-$BURMILLAOS_VER | wc | awk '{print $1}'`" != "1" ];then
	die "/boot/initrd-$BURMILLAOS_VER is missing in iso image."
fi
KERNEL_FILE=${VMLINUZ_FILE##*/}
sudo losetup -D `sudo losetup -a | grep $P_IMG | awk '{x=$1; sub(":","", x); print x}'`
if [ -e "$P_IMG" ];then
	rm $P_IMG
fi
fallocate -l "$P_ISO_SIZE_K"K $P_IMG
gdisk $P_IMG <<END
o
y
n



ef00
w
y
END
#partprobe
LDEVH=`sudo losetup --partscan --show --find $P_IMG`
LDEV=$LDEVH"p1"
ls $LDEV
GLOBAL_APPEND=`cat $RD/boot/global.cfg|sed "s/ console=ttyS[^ ]*//g"|sed "s/ rancher.autologin=ttyS[^ ]*//g"` 
GLOBAL_APPEND_ARGS=${GLOBAL_APPEND#APPEND *}
KERNEL_ARGS="rancher.password=rancher $GLOBAL_APPEND_ARGS root=LABEL=RANCHEROS"
VGA_ARGS="nomodeset vga=775 video=1024x768"

sudo mkfs.fat $LDEV
sudo mount $LDEV $PD

echo sudo cp -ar $RD/* $PD
sudo cp -ar $RD/* $PD
echo sudo cp -ar $UD/boot/grub $PD/boot/
sudo cp -ar $UD/boot/grub $PD/boot/



require create_initrd_mod
create_initrd_mod for_installer
if [ -z "$INITRD_FILE" ];then
	die initrd file, not detected
fi
cp $INITRD_FILE-mod.new $PD/boot/$INITRD_FILE-mod

echo sudo cp -ar $UD/EFI $PD/
sudo cp -ar $UD/EFI $PD/

#sudo bash -c 'cat - >> "'$PD'"/rancheros/Dockerfile.amd64 <<END
#RUN mkdir /mnt2 || true
#RUN mount -o degraded LABEL=RANCHER_STATE_SIBLING /mnt2 || true
#RUN rm -f /mnt2/.reinstalling || true
#RUN umount /mnt2 || true
#END'
#
#echo /rancheros/Dockerfile.amd64
#cat $PD/rancheros/Dockerfile.amd64

write_grub_script "$T"/grub.cfg <<'END'

	# check this grub has been chainloaded

	if [ -z "$installer" ];then
		echo finding installer device ...
		search --set=installer --label RANCHEROS;
		if [ -n "$installer" ];then
			echo installer device found ($installer).
		else
			echo installer device is missing.
		fi
	fi

	if [ -z "$installer" ];then
		echo "Cannot find disk label 'RANCHEROS'. Stop all."
		echo "Please do not modify label of this installer disk."
		sleep 3000000
	fi

	root=$installer,msdos1
	insmod /boot/grub/x86_64-efi/eval.mod

	if [ -z "$serial_port" ];then
		insmod /boot/grub/x86_64-efi/terminfo.mod
		insmod /boot/grub/x86_64-efi/serial.mod
		if serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1; then
			set serial_port=0
		else
			if serial --unit=1 --speed=115200 --word=8 --parity=no --stop=1; then
				set serial_port=1
			else
				if serial --unit=2 --speed=115200 --word=8 --parity=no --stop=1; then
					set serial_port=2
				fi
			fi
		fi
		if [ -n "$serial_port" ]; then
			terminal_input console serial_com$serial_port
			terminal_output console serial_com$serial_port
			set SERIAL_ARGS="rancher.autologin=ttyS$serial_port console=ttyS$serial_port,115200n8"
		fi
	fi

	if [ "$cmdpath" == "($installer,msdos2)/EFI/BOOT" ];then
		set chained=0
	else
		set chained=1  # chained from grub booted by hard disk
	fi


	function preserve_oem_user_settings {
		if [ -z "$u0" ];then u0="$USER_SETTINGS"; return; fi;
		if [ "$u0" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u1" ];then u1="$USER_SETTINGS"; return; fi;
		if [ "$u1" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u2" ];then u2="$USER_SETTINGS"; return; fi;
		if [ "$u2" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u3" ];then u3="$USER_SETTINGS"; return; fi;
		if [ "$u3" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u4" ];then u4="$USER_SETTINGS"; return; fi;
		if [ "$u4" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u5" ];then u5="$USER_SETTINGS"; return; fi;
		if [ "$u5" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u6" ];then u6="$USER_SETTINGS"; return; fi;
		if [ "$u6" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u7" ];then u7="$USER_SETTINGS"; return; fi;
		if [ "$u7" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u8" ];then u8="$USER_SETTINGS"; return; fi;
		if [ "$u8" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u9" ];then u9="$USER_SETTINGS"; return; fi;
		if [ "$u9" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u10" ];then u10="$USER_SETTINGS"; return; fi;
		if [ "$u10" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u11" ];then u11="$USER_SETTINGS"; return; fi;
		if [ "$u11" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u12" ];then u12="$USER_SETTINGS"; return; fi;
		if [ "$u12" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u13" ];then u13="$USER_SETTINGS"; return; fi;
		if [ "$u13" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u14" ];then u14="$USER_SETTINGS"; return; fi;
		if [ "$u14" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u15" ];then u15="$USER_SETTINGS"; return; fi;
		if [ "$u15" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u16" ];then u16="$USER_SETTINGS"; return; fi;
		if [ "$u16" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u17" ];then u17="$USER_SETTINGS"; return; fi;
		if [ "$u17" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u18" ];then u18="$USER_SETTINGS"; return; fi;
		if [ "$u18" == "$USER_SETTINGS" ]; then return; fi
		if [ -z "$u19" ];then u19="$USER_SETTINGS"; return; fi;
		if [ "$u19" == "$USER_SETTINGS" ]; then return; fi
	}


	function search_oem_user_settings {
		echo in search_oem_user_settings
		for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
			u=(hd$i,gpt7)/oem_root/opt/rancher/conf/grub/grub_env_for_installer
			if [ -e $u ];then
				echo u($i)=$u
				echo readable
				source $u
				echo USER_SETTINGS="$USER_SETTINGS"
				preserve_oem_user_settings
			fi
		done
		for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; do
			if [ "$setting_num" == "nxt" ];then
				setting_num=$i
				break
			fi
			eval "echo eval \"\$u$i\""
			if eval "[ -z \"\$u$i\"]";then
				setting_num=nxt
			fi
		done
		USER_SETTINGS=
	}


	function search_efi_user_settings_during_installation {
		for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
			u=(hd$i,gpt2)/.grub_env_for_installing
			if [ -e $u ];then
				source $u
				INSTALLING=$i
				break
			fi
			u=(hd$i,gpt2)/.reboot
			if [ -e $u ];then
				REBOOTING=$i
				break
			fi
		done
	}


	function search_efi {
		for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; do
			u=(hd$i,gpt2)/efi/boot/grub.cfg # not case sensitive
			l=(hd$i,gpt2)/.last_booted
			if [ -e $u ];then
				if [ -e $l ];then
					last_booted="$i"
				else
					if [ -z "$EFI_LIST" ];then
						EFI_LIST="$i"
					else
						EFI_LIST="$EFI_LIST $i"
					fi
				fi
			fi
		done
	}


	search_efi_user_settings_during_installation
	if [ -z "$USER_SETTINGS" ];then
		search_oem_user_settings
	fi


	search_efi


	# default parameters for installer boot
	function boot_default_kernel {
		linux   /boot/$KERNEL_FILE $VGA_ARGS $USER_SETTINGS $KERNEL_ARGS $SERIAL_ARGS ---
		if [ -e /boot/initrd-$BURMILLAOS_VER-mod ];then
			initrd  /boot/initrd-$BURMILLAOS_VER-mod
		else
			initrd  /boot/initrd-$BURMILLAOS_VER
		fi
		echo set default kernel and initrd
		echo booting ...
		boot
	}
	
	# boot hd
	function boot_hd {
		prefix=($efi)/efi/boot
		configfile $prefix/grub.cfg
		echo "Cannot continue.... Please reset."
		sleep 100000000
	}

	# default timeout

	if [ -n "$EFI_LIST" -o "$last_booted" ]; then
		set timeout=5
		set default=$setting_num # default: boot from hard disk
	else
		set timeout=30
		set default=0 # default: boot from installer
	fi

	function check_installation_terminated{
		if load_env --file ($efi)/.installing_$1_phase; then
			tmp="tmp=\$installing_"$1"_phase"
			eval $tmp
			if [ -n "$tmp" ]; then
				inst_failed="Installation terminated."
				return 1
			fi
		fi
		installing_$1_phase=1
		save_env installing_$1_phase --file ($efi)/.installing_$1_phase
		return 0
	}

	function check_last_boot_failed{
		boot_failed=
		if load_env --file ($efi)/.grubenv_booting; then
			echo Loaded ($efi)/.grubenv_booting
			if [ "$booting" = "1" ];then
				echo Last boot failed.
				boot_failed="last boot failed"
				booting=
			else
				echo Last boot successful.
			fi
		else
			echo Load failed: ($efi)/.grubenv_booting
			boot_failed="missing file, '($efi)/.grubenv_booting'"
		fi
	}

	while true; do
		if ! regexp menu "$chosen";then
			if [ "$chained" == 1 ];then
				# if chainloaded, just boot up from installer
				echo "$cmdpath == ($installer)/EFI/BOOT"
				echo "chained='$chained'"
				boot_default_kernel
				echo "Cannot continue.... Please reset."
				sleep 100000000
			else # grub directly loaded
				# check undergoing installation
				if [ -n "$INSTALLING" ]; then
					echo installing flag found
					state=hd$INSTALLING,gpt5
					efi=hd$INSTALLING,gpt2
					if [ -e ($state)/state_root/var/lib/rancher/conf/cloud-config.yml ]; then 
						echo ($state)/state_root/var/lib/rancher/conf/cloud-config.yml found
						if [ -e ($state)/state_root/home ]; then
							# 3rd phase of installation because /state_root/var/lib/rancher/conf is not a symbolick link
							if ! check_installation_terminated 3rd; then
								break
							fi
							boot_default_kernel
						else
							inst_failed="Installation error."
							break
						fi
					else 
						echo ($state)/state_root/var/lib/rancher/conf/cloud-config.yml not found
						if [ -e ($state)/state_root/home ]; then # has been rebooted for reinstalling
							echo ($state)/state_root/home found
							boot_default_kernel
						else # 2nd phase of installation : boot by target disk
							echo ($state)/state_root/home not found
							if ! check_installation_terminated 2nd; then
								break
							fi
							boot_hd
						fi
					fi
				fi
				if [ -n "$REBOOTING" ]; then
					echo rebooting flag found
					state=hd$REBOOTING,gpt5
					efi=hd$REBOOTING,gpt2
					echo ($state)/state_root/home not found
					boot_hd
				fi
			fi
		else
			set menu_chained=1
			timeout=
		fi
		break
	done

	loadfont unicode

	set menu_color_normal=white/black
	set menu_color_highlight=black/light-gray


	function disp_each_setting_menu {
		if regexp --set 1:tmp_ip "address=([^ ]+)" "$1"; then
			ip=" ($tmp_ip)"
		else
			ip=" (dhcp)"
		fi
		if regexp debug "$karg_add"; then
			deb=" (debug)"
		else
			deb=""
		fi
		eval "menuentry \"Install/Rescue Burmilla $BURMILLAOS_VER$ip$deb\" {
			linux   /boot/$KERNEL_FILE $karg_add $1 $KERNEL_ARGS rancher.autologin=ttyS$serial_port console=ttyS$serial_port,115200n8 ---
			if [ -e /boot/initrd-$BURMILLAOS_VER-mod ];then
				initrd  /boot/initrd-$BURMILLAOS_VER-mod
			else
				initrd  /boot/initrd-$BURMILLAOS_VER
			fi
		}"
	}


	function disp_all_setting_menu{
		echo disp_all_setting_menu
		for u in "$u0" "$u1" "$u2" "$u3" "$u4" "$u5" "$u6" "$u7" "$u8" "$u9" "$u10" "$u11" "$u12" "$u13" "$u14" "$u15" "$u16" "$u17" "$u18" "$u19"; do
			if [ -n "$u" ]; then
				echo has content
				echo u="\"$u\""
				disp_each_setting_menu "$u"
			fi
		done
		disp_each_setting_menu
	}


	function disp_each_efi_menu{
		efi=hd$1,gpt2
		check_last_boot_failed
		ann=" "
		if [ "$INSTALLING" = "$1" ];then
			ann="! "
		else
			if [ -n "$boot_failed" ];then
				booot_failed_found=1
				ann="? "
			else
				if [ "$last_booted" = "$1" ];then
					ann="* "
				fi
			fi
		fi
		eval "menuentry \"$ann Directly boot hard disk (hd$1)\" {
			prefix=($efi)/efi/boot
			configfile ($efi)/efi/boot/grub.cfg
			echo Cannot continue.... Please reset.
			sleep 100000000
		}"
		eval "menuentry \"$ann Boot menu of hard disk (hd$1)\" {
			prev_prefix=\$prefix
			prefix=($efi)/efi/boot
			configfile ($efi)/efi/boot/grub.cfg
			prefix=\$prev_prefix
			chosen=escaped
			while true;do
				configfile ($installer)/boot/grub/grub.cfg
				chosen=escaped
			done
		}"
	}


	function disp_efi_menu{
		if [ -n "$last_booted" ];then
			disp_each_efi_menu $last_booted
		fi
		for i in $EFI_LIST; do
			disp_each_efi_menu $i
		done
	}


	function disp_menu {
		karg_add="panic=10 $VGA_ARGS"
		disp_all_setting_menu
		if [ -n "$EFI_LIST" -o -n "$last_booted" ];then
		 	if [ -z "$menu_chained" ]; then
				disp_efi_menu
			else
				default=0
			fi
		else
			default=0
		fi
		menuentry 'BIOS/UEFI Firmware Settings' {
		    fwsetup
		}
		menuentry 'Test memory' {
		    linux16 /boot/memtest86+.bin
		}
		karg_add="vga=ask rancher.debug=true"
		disp_all_setting_menu # for debug
		menuentry ' ' {
			false
		}
		menuentry ' ' {
			false
		}
		menuentry ' ' {
			false
		}
		if [ -n "$last_booted" ];then
			menuentry "* Last booted." {
				false
			}
		fi
		if [ -n "$inst_failed" ];then
			menuentry "! $inst_failed" {
				false
			}
		fi
		if [ -n "$booot_failed_found" ];then
			menuentry "? Last boot failed." {
				false
			}
		fi
	}
	if [ "$chosen" == "escaped" ]; then
		timeout=
	fi
	disp_menu
	
END

sudo cp -f "$T"/grub.cfg $PD/boot/grub/grub.cfg

BOOT_IMG_DATA=$ED
BOOT_IMG=$ED2/efi.img

sudo mkdir -p $(dirname $BOOT_IMG)

truncate -s 8M $BOOT_IMG
mkfs.vfat -n ROS_EFI $BOOT_IMG
sudo mount $BOOT_IMG $BOOT_IMG_DATA
sudo mkdir -p $BOOT_IMG_DATA/efi/boot

cat - > "$T"/early-config.cfg <<'END'
search --no-floppy --set=root --label RANCHEROS
configfile /boot/grub/grub.cfg
END


sudo cp -av $UD/EFI/boot/*  $BOOT_IMG_DATA/efi/boot
sudo cp -av $PD/boot/grub/grub.cfg $BOOT_IMG_DATA/efi/boot

sudo umount $BOOT_IMG_DATA
sudo rm -rf $BOOT_IMG_DATA

echo iso boot from \"$BOOT_IMG\"

echo All files are prepared.


sudo rm -rf $PD/boot/isolinux
sudo rm -rf $PD/boot/linux-current.cfg

sudo xorriso -as mkisofs \
    -iso-level 3 \
    -r -V RANCHEROS \
    -J -joliet-long \
    -append_partition 2 0xef $BOOT_IMG \
    -partition_cyl_align all \
    -o $P_ISO \
    $PD

echo Iso created.

sudo umount $UD $RD $PD
sudo losetup -D $LDEVH
rmdir $UD $RD $PD
rm -rf $ED2
rm $P_IMG

if [ -n "$OVERWRITE_USB" ];then
	if [ -x "`which usb_dev`" ];then
		UD="`usb_dev | egrep -o "/dev/sd." | head -1`"
		if [ -e "$UD" ];then
			sudo dd if=$P_ISO of=$UD bs=10M status=progress
		else
			echo Error: USB disk not found.
		fi
	else
		echo Error: command 'usb_dev' not found. 
	fi
fi

