#!/bin/bash


source $(dirname "$(realpath -s "$0")")/bashlib_y

require ssh_do

if [ "$#" != 2 ]; then
	info "Usage: $0 SERVER_NAME DISK_DEVICE(ex. /dev/sda)"
	die "Too less or too much arguments."
fi


if ! ssh_param $1; then
	die "cannot connect to $1."
fi


ssh_sudo <<'SCRIPT_END'

	if [ ! -x "`which gdisk`" ]; then
		apt-get install -y gdisk
	fi
	if [ ! -x "`which btrfs`" ]; then
		apt-get install -y btrfs-progs
	fi
	if [ ! -x "`which partprobe`" ]; then
		apt-get install -y parted
	fi



	if [ "$A2" = "" ];then
		die "Argument missing."
	fi


	if [ "${A2:0:7}" != "/dev/sd" -o "${1:8}" != "" ];then
		die "cannot use device, $A2."
	fi
	if [ ! -e "$A2" ];then
		die "$A2 is not existing."
	fi

	TARGET_DISK=$A2
	BOOT_DEV_NAME=$(readlink -f /dev/disk/by-uuid/`cat /proc/cmdline|egrep -o 'efi=UUID=[\\"0-9a-fA-F-]+'|egrep -o '[0-9a-fA-F-]{3,}'`|awk 'match($1,/[0-9]+$/){print substr($1,0,length($1)-RLENGTH);}'|awk 'match($1,/^\/dev\//){print substr($1,6,length($1)-5);}') # should be OEM disk  (symlinked)

	if [ -z "$BOOT_DEV_NAME" ];then
		die "cannot detect boot disk"
	fi

	BOOT_DISK=/dev/$BOOT_DEV_NAME
	if ! [[ "$BOOT_DISK" =~ ^/dev/sd[a-z]$ ]]; then
		die "boot disk, '$BOOT_DISK' is not a /dev/sd? device."
	fi
	if ! [[ "$TARGET_DISK" =~ ^/dev/sd[a-z]$ ]]; then
		die "target disk is not a /dev/sd? device."
	fi

	if [ "$BOOT_DISK" = "$1" ]; then
		die "'$1' is same as boot disk."
	fi

	function sectors(){
		local GRES="`gdisk $1 2>&1 <<EOF
	p
	q
	EOF`"
		dbv "$GRES"
		local tmp=`echo -E "$GRES"|grep "Found invalid MBR and corrupt GPT. What do you want to do?"`
		if [ -n "$tmp" ];then
			GRES="`gdisk $1 2>&1 <<EOF
	1
	p
	q
	EOF`"
		fi
		echo "$GRES"|grep "Command (? for help): Disk "|awk '{print $7 " " $8 " " $9 " " $10}'
	}
	
	dbv "$BOOT_DISK"
	dbv "$A2"

	BOOT_DISK_S_LINE=`sectors $BOOT_DISK`
	TARGET_DISK_S_LINE=`sectors $A2`
	
	dbv "$BOOT_DISK_S_LINE"
	dbv "$TARGET_DISK_S_LINE"
	
	BOOT_DISK_SSIZE=`echo $BOOT_DISK_S_LINE|awk '{print $1}'`
	TARGET_DISK_SSIZE=`echo $TARGET_DISK_S_LINE|awk '{print $1}'`
	BOOT_DISK_SZ=`echo $BOOT_DISK_S_LINE|awk '{print $3 " " $4}'`
	TARGET_DISK_SZ=`echo $TARGET_DISK_S_LINE|awk '{print $3 " " $4}'`
	
	if ! [[ "$BOOT_DISK_SSIZE" =~ ^[0-9]+$ ]];then
		die "cannot get sector size of $BOOT_DISK"
	fi
	if ! [[ "$TARGET_DISK_SSIZE" =~ ^[0-9]+$ ]];then
		die "cannot get sector size of $TARGET_DISK"
	fi

	if [ $TARGET_DISK_SSIZE -lt $BOOT_DISK_SSIZE ];then
		die "Target disk ($TARGET_DISK) sector size, $TARGET_DISK_SSIZE is less than boot disk ($BOOT_DISK) sector size, $BOOT_DISK_SSIZE."
	fi

	echo "BOOT DISK  : $BOOT_DISK, $BOOT_DISK_SSIZE sectors ($BOOT_DISK_SZ)"
	echo "TARGET DISK: $TARGET_DISK, $TARGET_DISK_SSIZE sectors ($TARGET_DISK_SZ)"

	dd if=/dev/zero of=$TARGET_DISK bs=1G count=1
	partprobe

	#copy partition table
	GRES="`gdisk $BOOT_DISK <<EOH
	x
	u
	$TARGET_DISK
	y
	q
	EOH`"
	partprobe
	
	#randomize guiid of target disk
	gdisk $TARGET_DISK <<EOF
	x
	f
	w
	EOF

	echo "$GRES"|egrep -o '^The operation.*|writing.*'
	partprobe

	# copy bios boot partition
	echo copying "$BOOT_DISK"1 to "$TARGET_DISK"1 ...
	dd if="$BOOT_DISK"1 of="$TARGET_DISK"1
	echo done
	# copy efi partition
	echo copying "$BOOT_DISK"2 to "$TARGET_DISK"2 ...
	dd if="$BOOT_DISK"2 of="$TARGET_DISK"2
	echo done

	#randomize uuid of efi partition
	EUUID=`xxd -u -l 2 -p /dev/urandom`-`xxd -u -l 2 -p /dev/urandom`
	printf "\x${EUUID:7:2}\x${EUUID:5:2}\x${EUUID:2:2}\x${EUUID:0:2}" \
	| dd bs=1 seek=67 count=4 conv=notrunc of="$TARGET_DISK"2
	partprobe
	if ! mkswap -L RANCHER_SWAP_SIBLING "$TARGET_DISK"3; then
		echo "cannot create swap partition"
		exit 1
	fi

	dd if=/dev/zero of="$TARGET_DISK"4 bs=100M count=1
	dd if=/dev/zero of="$TARGET_DISK"5 bs=100M count=1
	dd if=/dev/zero of="$TARGET_DISK"7 bs=100M count=1

SCRIPT_END

if [ "$?" != "0" ];then
	die "ssh failed"
fi

ssh_reboot

ssh_sudo <<'SCRIPT_END'

# copy boot partition to new disk (optional)
# mkdir -p /tmp/{src,dst}
# mount "$BOOT_DISK"4 /tmp/src
# mount "$TARGET_DISK"4 /tmp/dst
#cp -av /tmp/src/* /tmp/dst
# umount /tmp/src /tmp/dst

# remove missing device
btrfs device delete missing /boot
btrfs device delete missing /state_top_lvl
btrfs device delete missing /oem_top_lvl

# add new device
btrfs device add "$TARGET_DISK"4 /boot
btrfs device add "$TARGET_DISK"5 /state_top_lvl
btrfs device add "$TARGET_DISK"7 /oem_top_lvl

partprobe
EFI_UUID=`/sbin/blkid "$TARGET_DISK"2 | awk '{print $4}'`
EFI_UUID_ARG=${EFI_UUID:6:9}
OEM_UUID_SUB=`/sbin/blkid "$TARGET_DISK"7 | awk '{print $4}'`
BOOT_UUID_SUB=`/sbin/blkid "$TARGET_DISK"4 | awk '{print $4}'`
STATE_UUID_SUB=`/sbin/blkid "$TARGET_DISK"5 | awk '{print $4}'`

mkdir -p /efi2
mount "$TARGET_DISK"2 /efi2

sed -i "s/rancher\.state\.boot_dev=\"[-A-F0-9]*\"/rancher.state.boot_dev=\\\"$BOOT_UUID_SUB\\\"/g" /efi2/EFI/boot/grub.cfg
sed -i "s/rancher\.state\.oem_dev=\"[-A-F0-9]*\"/rancher.state.oem_dev=\\\"$OEM_UUID_SUB\\\"/g" /efi2/EFI/boot/grub.cfg
sed -i "s/rancher\.state\.dev=\"[-A-F0-9]*\"/rancher.state.dev=\\\"$STATE_UUID_SUB\\\"/g" /efi2/EFI/boot/grub.cfg
sed -i "s/efi=UUID=\"[-A-F0-9]*\"/efi=UUID=\\\"$EFI_UUID_ARG\\\"/g" /efi2/EFI/boot/grub.cfg

umount "$TARGET_DISK"2
rmdir /efi2

# select raid mode and start balancing
function bstart(){
	local uuid=`blkid $1 | awk '{print $3}' | egrep -o "=[0-9a-fA-F\"-]*" | egrep -o "[0-9a-fA-F-]*"`
	echo \"$uuid\"
	btrfs filesystem show $uuid
	local dnum=`btrfs filesystem show $uuid | egrep -o "Total devices [0-9]*" | awk '{print $3}'`
	case "$dnum" in
		"2" )
			echo btrfs balance start --force -mconvert=raid1 -dconvert=raid1 -sconvert=raid1 $2
			btrfs balance start --force -mconvert=raid1 -dconvert=raid1 -sconvert=raid1 $2
			;;
		"3" )
			echo btrfs balance start --force -mconvert=raid1c3 -dconvert=raid1c3 -sconvert=raid1c3 $2
			btrfs balance start --force -mconvert=raid1c3 -dconvert=raid1c3 -sconvert=raid1c3 $2
			;;
		"4" )
			echo btrfs balance start --force -mconvert=raid1c4 -dconvert=raid1c4 -sconvert=raid1c4 $2
			btrfs balance start --force -mconvert=raid1c4 -dconvert=raid1c4 -sconvert=raid1c4 $2
			;;
	esac
}

bstart "$TARGET_DISK"4 /boot
bstart "$TARGET_DISK"5 /state_top_lvl
bstart "$TARGET_DISK"7 /oem_top_lvl


SCRIPT_END



