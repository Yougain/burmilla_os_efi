# bash source


function _reg_b_device(){
	local force
	if [ "$1" = -f ];then
		force=1
		shift
	elif [ "$2" = -f ];then
		force=1
	fi
	if [ -b "$1" ];then
		local rl
		if [ -L "$1" ];then
			rl="$(readlink -f "$1")"
			if [ -z "$rl" ];then
				die
				return
			fi
		else
			rl="$1"
		fi
		local dev_id=`stat -c "%T:%t" "$rl"`
		local cur_dev_path=${dev_path[$dev_id]}
		if [ -z "$cur_dev_path" -o "$force" ];then
			dev_path[$dev_id]="$1"
		else
			if [ ${#cur_dev_path} -lt ${#1} ];then
				dev_path[$dev_id]="$1"
			fi
		fi
		dbv $dev_id
		dbv $1
		dbv ${dev_path[$dev_id]}
	fi
}


function blkid2(){
	dbv
	declare -A dev_path
	recursive_path _reg_b_device /dev
	local key
	local devs

	local args=()
	info blkid2 $@
	__readlink(){
		for i in "$@"; do
			readlink -f $i
		done
	}
	local local=$RANDOM$RANDOM$RANDOM
	local PATH=/sbin:/usr/sbin:/bin:/usr/bin

	local opts=()
	local get_sibling
	while (( "$#" )); do
		if [ "${1:0:1}" = "-" ];then
			opts+=("$1")
			if [ $1 = "--get-siblings" ];then
				get_sibling=1
			fi
		else
			args+=("$1")
		fi
		shift
	done

	if [ ${#args[@]} -ge 2 ];then
		die "multiple arguments specified"
	fi
	
	
	
	local i

	if [ -d /dev/disk/by-id ];then
		local IDnDEVs_id=(`ls /dev/disk/by-id`)
		local IDnDEVs_dev=($(__readlink `ls /dev/disk/by-id/*`))
		local IDnDEVs_n=${#IDnDEVs_id[@]}
	else
		warn "/dev/disk/by-id not found"
	fi
	
	if [ -d /dev/disk/by-path ];then
		local PATHnDEVs_path=(`ls /dev/disk/by-path`)
		local PATHnDEVs_dev=($(__readlink `ls /dev/disk/by-path/*`))
		local PATHnDEVs_n=${#PATHnDEVs_path[@]}
	else
		warn "/dev/disk/by-path not found"
	fi

	declare -A local blkids

	local blkids_arr
	split blkids_arr "`blkid`" "
"
	dbv
	local_fun add_blist <<'	}'
		dbv
		local dev=${1%:*}
		dbv
		local tmp="$@"
		dbv $tmp
		blkids[$dev]="$tmp "
		dbv
	}
	dbv
	local i
	for i in "${blkids_arr[@]}"; do
		dbv $i
		local_call add_blist $i
	done
	
	local dev

	for dev in ${!blkids[@]}; do
		_reg_b_device -f $dev
	done
	for key in ${!dev_path[@]};do
		devs+=("${dev_path[$key]}")
	done
	dbv ${devs[@]}
	local label
	
	__contain_entry(){
		dbv $2 $3
		if [ $1 = *" $2=$3 "* ];then
			return 0
		elif [ $1 = *" $2=\"$3\" "* ];then
			return 0
		elif [ $1 = *" $2='$3' "* ];then
			return 0
		fi
		return 1
	}
	
	local bc

	dbv 11111
	local_fun by_lsblk << '	}'
		local AttName
		local val
		dbv $1 $2
		if [ -n "$2" ];then
			AttName="$2"
		else
			AttName="$1"
		fi
		for dev in ${devs[@]}; do
			val="$(lsblk -o $1 $dev | sed -n 2p)"
			if [ -n "$val" ]; then
				dbv $AttName "$val"
				bc=${blkids[$dev]}
				if ! __contain_entry bc $AttName "$val"; then
					if [ -z "$bc" ];then
						bc="$dev:"
					fi
					blkids[$dev]="$bc $AttName=\"$(echo "$val"|xargs)\""
					dbv ${blkids[$dev]}
				fi
			fi
		done
	}
	dbv
	local_call by_lsblk TYPE DEV_TYPE # DEV_TYPE=disk or partition
	local item
	for item in NAME KNAME PKNAME VENDOR MODEL SERIAL WWN REV; do
		local_call by_lsblk $item
	done

	if [ -n "$IDnDEVs_n" ];then
		for ((i = 0; i < $IDnDEVs_n ; i++)); do
			dev=${IDnDEVs_dev[$i]}
			bc=${blkids[$dev]}
			if [ -z "$bc" ];then
				bc="$dev: "
			fi
			blkids[$dev]="$bc ID=\""${IDnDEVs_id[$i]}'"'
		done
	fi
	if [ -n "$PATHnDEVs_n" ];then
		if [ -d /dev/disk/by-path ];then
			for ((i = 0; i < $PATHnDEVs_n ; i++)); do
				dev=${PATHnDEVs_dev[$i]}
				bc=${blkids[$dev]}
				if [ -z "$bc" ];then
					bc="$dev: "
				fi
				blkids[$dev]="$bc PATH=\""${PATHnDEVs_path[$i]}'"'
			done
		fi
	fi
	declare -A local uuid_list
	declare -A local dev2VarNameSibs
	local varNameSibs # use transformed uuid (tr - _) as variable name for array of siblings
	for dev in "${!blkids[@]}"; do
		dbv $dev
		dbv ${blkids[$dev]}
		if [[ "${blkids[$dev]}" =~ \ UUID=\"([0-9a-fA-F]+(-[0-9a-fA-F]+)*)\"\  ]]; then
			varNameSibs=UUID_$(echo ${BASH_REMATCH[1]}|tr - _|tr '[:upper:]' '[:lower:]')
			dbv $varNameSibs
			dbv ${!uuid_list[@]}
			if [ -z "${uuid_list[$varNameSibs]}" ];then
				uuid_list[$varNameSibs]=1
			fi
			eval $varNameSibs'+=('$dev')'
			dev2VarNameSibs[$dev]=$varNameSibs
		fi
	done


	if [ "${#args}" = 0 ];then
		for bc in "${blkids[@]}";do
			echo "${bc}"
		done | sort
		return 0
	else
		local matched=()
		local_fun detectSymbol <<'		}'
			dbv "$@"
			local _arg="$1"
			dbv $_arg
			shift
			local _dev=${1%:*}
			shift
			dbv "$_dev"
			dbv "$@"
			if [ "$_dev" = "$_arg" ];then
				matched+=($_dev)
				return 0
			fi
			local _arg_val="${_arg#*=}"
			local _arg_key
			if [ ${#_arg_val} != ${#_arg} ];then
				_arg_key=${_arg%%=*}
			fi
			local a
			local q
			local a_key
			dbv $_arg_key
			dbv $_arg_val
			if [ -n "$_arg_key" ];then
				dbv "$@"
				for a in "$@";do
					dbv $a
					for q in "" "'" "\"";do
						dbv $a = $_arg_key="$q$_arg_val$q"
						if [ "$a" = $_arg_key="$q$_arg_val$q" ];then
							matched+=($_dev)
							return 0
						fi
					done
				done
				dbv
			else
				for a in "$@";do
					a_key=${a%%=*}
					for q in "" "'" "\"";do
						dbv $a = $a_key="$q$_arg_val$q"
						if [ "$a" = $a_key="$q$_arg_val$q" ];then
							matched+=($_dev)
							return 0
						fi
					done
				done
			fi
			return 1
		}
		dbv "${args[0]}"
		for bc in "${blkids[@]}";do
			eval "bc=($bc)"
			dbv ${bc[@]}
			local_call detectSymbol "${args[0]}" "${bc[@]}"
		done
		if [ "${#matched}" = 0 ];then
			die No matching device found
		fi
		local mdev
		if [ -n "$get_sibling" ];then
			local varNameSibs1
			for mdev in "${matched[@]}"; do
				dbv $mdev
				if [ -z "$varNameSibs1" ]; then
					varNameSibs1=${dev2VarNameSibs[$mdev]}
					if [ -z "$varNameSibs1" ];then
						die "matched device, '$mdev' has no uuid."
					fi
				else
					if [ "$varNameSibs1" != "${dev2VarNameSibs[$mdev]}" ];then
						die "matched devices has different uuids."
					fi
				fi
			done
			eval echo '${'$varNameSibs1'[@]}'
		else
			dbv ${!blkids[@]}
			for mdev in "${matched[@]}"; do
				if [ "$mdev" == "${args[0]}" ];then
					echo ${blkids[$mdev]}
				else
					echo $mdev
				fi
			done
			dbv
		fi
	fi
	return 0
}


