# bash source


function blkid2(){
	local args=()
	info blkid2 $@
	__readlink(){
		for i in "$@"; do
			readlink -f $i
		done
	}
	local local=$RANDOM$RANDOM$RANDOM
	local PATH=/sbin:/usr/sbin:/bin:/usr/bin

	local opts=()
	local get_sibling
	while (( "$#" )); do
		if [ "${1:0:1}" = "-" ];then
			opts+=("$1")
			if [ $1 = "--get-siblings" ];then
				get_sibling=1
			fi
		else
			args+=("$1")
		fi
		shift
	done

	if [ ${#args[@]} -ge 2 ];then
		die "multiple arguments specified"
	fi

	if [ ! -e /dev/btrfs-control ];then
		if [ "`id -u`" = 0 ];then
			mknod /dev/btrfs-control c 10 234
		fi
	fi
	if [ "`id -u`" = 0 ];then
		btrfs device scan > /dev/null 2>/dev/null
	fi

	local i

	local IDnDEVs_id=(`ls /dev/disk/by-id`)
	local IDnDEVs_dev=($(__readlink `ls /dev/disk/by-id/*`))
	local IDnDEVs_n=${#IDnDEVs_id[@]}
	
	if [ -d /dev/disk/by-path ];then
		local PATHnDEVs_path=(`ls /dev/disk/by-path`)
		local PATHnDEVs_dev=($(__readlink `ls /dev/disk/by-path/*`))
		local PATHnDEVs_n=${#IDnPATHs_path[@]}
	fi

	declare -A local blkids

	local blkids_arr
	split blkids_arr "`blkid`" "
"
	local_fun add_blist <<'	}'
		local dev=$1
		blkids[$dev]="$@"
	}
	local i
	for i in "${blkids_arr[@]}"; do
		local_call add_blist $i
	done

	local dev
	local bc
	for ((i = 0; i < $IDnDEVs_n ; i++)); do
		dev=${IDnDEVs_dev[$i]}:
		bc=${blkids[$dev]}
		if [ -n "$bc" ];then
			blkids[$dev]="$bc ID=\""${IDnDEVs_id[$i]}'"'
		fi
	done
	if [ -d /dev/disk/by-path ];then
		for ((i = 0; i < $PATHnDEVs_n ; i++)); do
			dev=${PATHnDEVs_dev[$i]}
			bc=${blkids[$dev]}
			if [ -n "$bc" ];then
				blkids[$dev]="$bc PATH=\""${PATHnDEVs_path[$i]}'"'
			fi
		done
	fi
	
	declare -A local uuid_list
	declare -A local dev2VarNameSibs
	local varNameSibs # use transformed uuid (tr - _) as variable name for array of siblings
	for dev in "${blkids[@]}"; do
		if [[ "${blkids[$dev]}" =~ \ UUID=\"([0-9a-fA-F]+(-[0-9a-fA-F]+)*)\"\  ]]; then
			varNameSibs=UUID_$(echo ${BASH_REMATCH[1]}|tr - _)
			if [ -z "${uuid_list[$uuid]}" ];then
				uuid_list[$varNameSibs]=1
				eval 'local '$varNameSibs'+=('$dev')'
			fi
			eval $varNameSibs'+=('$dev')'
			dev2VarNameSibs[$dev]=$varNameSibs
		fi
	done

	if [ "${#args}" = 0 ];then
		for bc in "${blkids[@]}";do
			echo "${bc}"
		done | sort
		return 0
	else
		local matched=()
		local_fun detectSymbol <<'		}'
			local _arg=$1
			shift
			local _dev=${1%:}
			shift
			dbv $_dev
			if [ "$_dev" = "$_arg" ];then
				matched+=($_dev)
				return 0
			fi
			local _arg_val="${_arg#*=}"
			local _arg_key
			if [ ${#_arg_val} != ${#_arg} ];then
				_arg_key=${_arg%%=*}
			fi
			local a
			local q
			local a_key
			if [ -n "$_arg_key" ];then
				for a in "$@";do
					for q in "" "'" "\"";do
						if [ "$a" = $_arg_key="$q$_arg_val$q" ];then
							matched+=($_dev)
							return 0
						fi
					done
				done
			else
				for a in "$@";do
					a_key=${a%%=*}
					for q in "" "'" "\"";do
						if [ "$a" = $a_key="$q$_arg_val$q" ];then
							matched+=($_dev)
							return 0
						fi
					done
				done
			fi
			return 1
		}
		for bc in "${blkids[@]}";do
			dbv $bc
			local_call detectSymbol "${args[0]}" "$bc"
		done
		if [ "${#matched}" = 0 ];then
			die No matching device found
		fi
		local mdev
		if [ -n "$get_sibling" ];then
			local varNameSibs1
			for mdev in "${matched[@]}"; do
				if [ -z "$varNameSibs1" ]; then
					varNameSibs1=${dev2VarNameSibs[$mdev]}
					if [ -z "$varNameSibs1" ];then
						die "matched device, '$mdev' has no uuid."
					fi
				else
					if [ "$varNameSibs1" != "${dev2VarNameSibs[$mdev]}" ];then
						die "matched devices has different uuids."
					fi
				fi
			done
			eval echo '${'$varNameSibs'[@]}'
		else
			for mdev in "${matched[@]}"; do
				echo ${blkids[$mdev]}
			done
		fi
		return 1
	fi
	return 0
}


