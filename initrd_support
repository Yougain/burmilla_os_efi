# bash source


after_save_cmd_line(){
	__readlink(){
		for i in "$@"; do
			readlink -f $i
		done
	}
	local found
	if [ -n "`__readlink /proc/*/exe 2>/dev/null| egrep '/udevd$'`" ]; then
		found=1
	fi
	if [ -z "$found" ]; then
		udevd  --daemon --resolve-names=never
		udevadm trigger --action=add --type=subsystems
		udevadm trigger --action=add --type=devices
		udevadm trigger --action=change --type=devices
		udevadm settle
		mkdir -p /run/udev
		touch /run/dev/queue
		info udev started
		sleep 5
	fi
}


before_sysinit(){
	killall udevd
	info killall udevd: result = $?
	info udev stopped
	info /opt is on $(stat -f -c '%T' /opt)
	if [ -n "$INITRD_MOUNT" -a "$(stat -f -c '%T' /opt)" = "ramfs" ];then
		mkdir -p /opt/initrd
		mount --bind / /opt/initrd
	fi
	info / is on $(stat -f -c '%T' /)
	if [ "$(stat -f -c '%T' /)" = "ramfs" ];then
		local found
		for f in `find /usr/share/zoneinfo`; do
			for t in `strings $f`; do
				if [ "$t" = "$TZ" ] ; then
					found=$f
					info $TZ found in $f
					break
				fi
			done
			if [ -n "$found" ];then
				mv -f /etc/localtime /etc/localtime.org
				cp -f $found /etc/localtime
				info cp $found /etc/localtime
				break
			fi
		done
		mkdir -p /var/lib/rancher/conf/cloud-config.d
		if [ -n "$TZ" ]; then
			cat - > /var/lib/rancher/conf/cloud-config.d/user_config.yml <<END
rancher:
  services:
    console:
      volumes:
      - /etc/localtime:/opt/initrd/etc/localtime
      environment:
        TZ: $TZ
    syslog:
      environment:
        TZ: $TZ
    udev:
      environment:
        TZ: $TZ
    system-cron:
      environment:
        TZ: $TZ
    acpid:
      environment:
        TZ: $TZ
    ntp:
      environment:
        TZ: $TZ
    docker:
      environment:
        TZ: $TZ
    network:
      environment:
        TZ: $TZ
runcmd:
- cp /opt/initrd/etc/localtime /etc
END
		fi
	fi
	info Using /usr/share/ros/os-config.yml on `which_dev_on /usr/share/ros/os-config.yml`.
	USER_DOCKER_IMAGE=`yq ".rancher.services.docker.image" /usr/share/ros/os-config.yml`
	USER_DOCKER_VERSION=${USER_DOCKER_IMAGE#*:}
	USER_DOCKER_IMAGE_TO_LOAD=/usr/share/ros/os-docker-$USER_DOCKER_VERSION.tar.gz
	if [ ! -e "$USER_DOCKER_IMAGE_TO_LOAD" ];then
		err "cannot find $USER_DOCKER_IMAGE_TO_LOAD"
	fi
	info Using $USER_DOCKER_IMAGE_TO_LOAD on `which_dev_on $USER_DOCKER_IMAGE_TO_LOAD`.
	system-docker load -i $USER_DOCKER_IMAGE_TO_LOAD
}



