# bash source


after_save_cmd_line(){
	__readlink(){
		for i in "$@"; do
			readlink -f $i
		done
	}
	local found
	if [ -n "`__readlink /proc/*/exe 2>/dev/null| egrep '/udevd$'`" ]; then
		found=1
	fi
	if [ -z "$found" ]; then
		udevd  --daemon --resolve-names=never
		udevadm trigger --action=add --type=subsystems
		udevadm trigger --action=add --type=devices
		udevadm trigger --action=change --type=devices
		udevadm settle
		mkdir -p /run/dev
		mkdir -p /run/udev
		#touch /run/dev/queue
		info udev started
		sleep 5
	fi
}


before_sysinit(){
	yFile=/usr/share/ros/os-config.yml
	UF=/var/lib/rancher/conf/cloud-config.d/user_config.yml
    _set_volume(){
    	# TODO: heck file is existing, directory or not.
    	suffix=
        while (($#));do
        	if ! [[ $1 =~ : ]];then
        		suffix=$1
        		shift
        		continue
        	fi
            vpath=${1%:*}
            target=${1#*:}
            if [ `yq e '(.rancher.services.'$vpath'.volumes[]|select(. == "*:'$target'")) != null' $yFile` = "true" ]; then
                echo non-null $vpath:$target
                yq -i e '(.rancher.services.'$vpath'.volumes[]|select(. == "*:'$target'")) = "'$prefix$target$suffix:$target'" ' $yFile
            else
                echo $vpath:$target
                yq -i e '(.rancher.services.'$vpath'.volumes += ["'$prefix$target$suffix:$target'"] )' $yFile
            fi
            shift
        done
    }
    set_oem_volume(){
        prefix=$OR
        _set_volume $@
    }
    set_volume(){
        prefix=""
        _set_volume $@
    }
    _set_volume_p(){
        prefix="$1"
        shift
        _set_volume $@
    }

	killall udevd
	info killall udevd: result = $?
	info udev stopped
	if [ -e /opt ];then
		info /opt is on $(stat -f -c '%T' /opt)
	else
		info /opt is missing
	fi
	info / is on $(stat -f -c '%T' /)
	OR=/usr/share/ros/oem
	if [ ! -e "$OR" ];then
		do_mount -v --salvage-btrfs 7 /usr/share/ros/oem
	fi
	if [ "$(stat -f -c '%T' /)" = "ramfs" ];then # boot from installer
		installer_boot=1
	fi
	if [ -n "$installer_boot" -o -n "$DEBUG" -o -n "$INITRD_MOUNT" ];then
		mkdir -p /usr/share/ros/initrd
		mount --bind / /usr/share/ros/initrd
	fi
	if [ -n "$installer_boot" ];then # boot from installer
		ln -s / /usr/share/ros/.oem_link # mimic root by using ramdisk because do not use oem
		if [ -e $OR/var/lib/rancher/conf ];then # use oem drive
			mkdir -p /var/lib/rancher
			mkdir -p /etc/profile.d
			ln -sf $OR/var/log /var
			cp -af $OR/var/lib/rancher/conf /var/lib/rancher
			ln -sf $OR/etc/localtime /etc
			ln -sf $OR/etc/ssh /etc
			ln -sf $OR/etc/profile.d/timezone.sh /etc/profile.d
			yq e -i 'del(.runcmd)' $UF # no need when booting by installer
		elif [ -n "$TZ" ]; then # boot by installer with oem drive missing
			touch $UF
			for i__ in console syslog udev system-cron acpid ntp docker network; do
				yq e -i ".rancher.services.$i__.environment.TZ|=\"$TZ\"" $UF
			done
		fi
		d_ssh=
	else # normal boot
		do_mount 2 /boot/efi
		do_mount 3
		if do_mount 5 -o subvol=/ /usr/share/ros/.state_top_lvl; then
			btrfs quota enable /usr/share/ros/.state_top_lvl
			btrfs quota enable /usr/share/ros/.state_top_lvl/state_root
		fi
		if do_mount 7 -o subvol=/ /usr/share/ros/.oem_top_lvl; then
			btrfs quota enable /usr/share/ros/.oem_top_lvl
			btrfs quota enable /usr/share/ros/.oem_top_lvl/oem_root
		fi
		d_ssh=$OR
	fi
	if [ "${BURMILLAOS_VER%%.*}" = "v1" ];then
		if [ ! -e $d_ssh/etc/ssh/sshd_config-1 ];then
			sed -e '/^HostKeyAlgorithms/s/^/# /' $d_ssh/etc/ssh/sshd_config > $d_ssh/etc/ssh/sshd_config-1
			sed -ie '/^Include \/etc\/ssh\/sshd_config.d/s/^/# /' $d_ssh/etc/ssh/sshd_config-1
		fi
		set_volume_p "$d_ssh" -1 console:/etc/ssh/sshd_config
	fi
	info Using /usr/share/ros/os-config.yml on `which_dev_on /usr/share/ros/os-config.yml`.
	USER_DOCKER_IMAGE=`yq ".rancher.services.docker.image" /usr/share/ros/os-config.yml`
	USER_DOCKER_VERSION=${USER_DOCKER_IMAGE#*:}
	USER_DOCKER_IMAGE_TO_LOAD=/usr/share/ros/os-docker-$USER_DOCKER_VERSION.tar.gz
	if [ ! -e "$USER_DOCKER_IMAGE_TO_LOAD" ];then
		err "cannot find $USER_DOCKER_IMAGE_TO_LOAD"
	else
		info Using $USER_DOCKER_IMAGE_TO_LOAD on `which_dev_on $USER_DOCKER_IMAGE_TO_LOAD`.
		system-docker load -i $USER_DOCKER_IMAGE_TO_LOAD
	fi
	if [ -e /boot/initrd-ext_source ];then
		. /boot/initrd-ext_source
	fi
}



