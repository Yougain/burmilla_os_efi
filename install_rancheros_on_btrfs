#!/bin/bash


while (( "$#" )); do
	if [ -n "`echo $1| egrep '^[0-9]+$'`" ];then
		PORT=$1
	fi
	if [ -n "`echo $1| egrep '[A-Za-z]'`" ];then
		HNAME=$1
		if [ "${HNAME#*.}" = "`hostname -d`" ];then
			HNAME_FULL=$HNAME
			HNAME=${HNAME%%.*}
		else
			if [ -z "`echo $HNAME| grep '\.'`"];then
				HNAME_FULL=$HNAME.`hostname -d`
			else
				HNAME_FULL=$HNAME
			fi
		fi
	fi
	if [ -n "`echo $1| grep '\:' |egrep '^[0-9A-Fa-f:]+$'`" ];then
		if [ -z "$INST_IP" ];then
			INST_IP=$1
		else
			IP=$1
		fi
	fi
	if [ -n "`echo $1| grep '\.' |egrep '^[0-9\.]+$'`" ];then
		if [ -z "$INST_IP" ];then
			INST_IP=$1
		else
			IP=$1
		fi
	fi
	shift
done


if [ -z "$HNAME" ]; then
	HNAME="rancher"
fi

function get_ssh_config_entry(){
	sed -e 's/[ \t]*#.*//' ~/.ssh/config | grep -oiPz "(?s)^\s*Host\s$HNAME(.*?^\s*Host\s|.*)"
}

function get_field2(){
	echo $@|awk '{print $2}'
}

error="\033[31mError"
red="\033[31m"
green="\033[32m"
cyan="\033[36m"
plain="\033[m"
warning="\033[33mWarining"
yellow="\033[33m"

if [ -n "`get_ssh_config_entry`" ];then
	CONFIG_ENTRY=1
	CONFIG_IP_LINE=`get_ssh_config_entry |  grep -oiPz '^\s*HostName[\t ]+[\w\-\.]+'`
	if [ -z "$CONFIG_IP_LINE" ];then
		echo -e "$error: cannot find a line, $cyan'HostName [ip address or resolvable host name]'$red in the entry of $cyan'Host $HNAME'$red in $cyan~/.ssh/config$red.$plain"
		exit 1
	else
		IP_IN_CONFIG=`get_field2 $CONFIG_IP_LINE`
		if [ -n "$IP" ];then
			if [ "$IP" != "$IP_IN_CONFIG" ];then
				echo -e "$error: Already different ip address or resolvable host name specified in $cyan'~/.ssh/config'$red with an entry of $cyan'Host $HNAME'$red, by the line $cyan'`echo $CONFIG_IP_LINE`'$plain."
				exit 1
			fi
		else
			IP=$IP_IN_CONFIG
		fi
	fi
	CONFIG_PORT_LINE=`get_ssh_config_entry |  grep -oiPz '^\s*Port\s+[0-9]+'`
	if [ -z "$CONFIG_PORT_LINE" ];then
		PORT_IN_CONFIG=22
	else
		PORT_IN_CONFIG=`get_field2 $CONFIG_PORT_LINE`
	fi
		if [ -n "$PORT" ];then
			if [ "$PORT" != "$PORT_IN_CONFIG" ];then
				echo -ne "$error: cannot specify ssh port, $cyan'$PORT'$red in the command line, because $cyan~/.ssh/config$red has an entry of $cyan'Host $HNAME'$red "
				if [ -n "$CONFIG_PORT_LINE" ]; then
					echo -e "with a line, $cyan'`echo $CONFIG_PORT_LINE`'$red.$plain"
				else
					echo -e "without line, $cyan'Port xxxxx'$red, implying usage of default port,$cyan 22$red.$plain"
				fi
			fi
			exit 1
		else
			PORT=$PORT_IN_CONFIG
		fi
	if [ -z "$CONFIG_PORT_LINE" ];then
		PORT=22
	else
		PORT=`get_field2 $CONFIG_PORT_LINE`
	fi
else
	if [ -z "$IP" ]; then
		IP=$INST_IP
	fi
	if [ -z "$IP" ];then
		echo -e "\033[31m$error: Missing IP address for installation in the command line and cannot find section, $cyan'Host $HNAME'$red in $cyan~./ssh/config$red, where a line like $cyan'HostName [ip address or resolvable host name]'$red should be found.$plain"
		exit 1
	fi
	if [ -z "$PORT" ];then
		RD=0
		while [ "$RD" -le 1024 -o  -n "`grep $RD/tcp /etc/services`" ]; do
			RD=$((RANDOM + RANDOM))
		done
		echo -e "$warning: SSH port number not specified. Use a randomly chosen port number, $cyan$RD$yellow.$plain"
		PORT=$RD
	fi
	mkdir -m 700 -p ~/.ssh
	echo "Host $HNAME
	HostName $IP
	User rancher
	Port $PORT
" >> ~/.ssh/config
fi

KEY=`cat ~/.ssh/id_ed25519.pub 2>/dev/null`
if [ -z "$KEY" ];then
	echo -e "\033[31mError: Cannot find public key in ~/.ssh/id_ed25519.pub. exit.\033[m"
	exit 1
fi

if [ -z "$INST_IP" ];then
	INST_IP=$IP
fi

function ssh_inst(){
	ssh -p 22 -o "PasswordAuthentication no" -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" -l rancher $INST_IP $@
}


if ! ssh_inst echo; then
	expect -c "
set timeout 1
spawn ssh -p 22 -o \"StrictHostKeyChecking no\" -o \"UserKnownHostsFile /dev/null\" -l rancher $INST_IP
expect \"assword:\"
send \"rancher\n\"
expect \"rancher ~]$ \"
send \"mkdir ~/.ssh\n\"
expect \"rancher ~]$ \"
send \"chmod 700 ~/.ssh\n\"
expect \"rancher ~]$ \"
send \"echo $KEY > ~/.ssh/authorized_keys\n\"
expect \"rancher ~]$ \"
send \"exit\"
"
else
	echo -e "$error: RancherOS is already installed?"
fi


if ! ssh_inst echo; then
	echo -e "$error: Cannot logon as user, 'rancher' by password, 'rancher'"
	echo "Please enter following commands on console"
	echo -e $cyan"sudo passwd rancher
rancher
rancher$plain"
	exit 1
fi

DNS_SETTINGS=`ssh_inst cat /etc/resolv.conf| sed -e 's/[ \t]*#.*//' | grep "nameserver" | sed -e 's/^[ \t]*//' | awk '{print $2}' | sed -e 's/^/      - /'`
GATEWAY=`ssh_inst route -n |egrep '^0\.0\.0\.0'|awk '{print $2}'|head -1`
NETMASK=`ssh_inst ip address show dev eth0 | grep 'inet ' | grep global | awk '{print $2}'| sed -e 's/.*\///'|head -1`

DISK_SIZE=`ssh_inst -t sudo bash -c "'"sudo fdisk -l /dev/sda \|grep \"Disk /dev/sda\"\|awk \"{print $\"\"5}\""'"|grep -v boundary`
MEM_SIZE=`ssh_inst -t bash -c "'"cat /proc/meminfo\|grep MemTotal\|awk \"{print $\"\"2}\""'"`
DISK_SIZE=${DISK_SIZE%$'\r'}
MEM_SIZE=${MEM_SIZE%$'\r'}


if [ "$DISK_SIZE" -ge 1099511627776 ];then # over 1Tbytes
    SWAP_PART_SIZE="+64G"
else
	SWAP_PART_SIZE="+$MEM_SIZE"K
fi

# TZ environmental variable
TZ_N=`date +"%Z"`
TZ_D=`date +"%z"`
if [ "${TZ_D:0:1}" = "+" ];then
	TZ_DS="-"
else
	TZ_DS=""
fi
TZ_DH1="${TZ_D:1:1}"
if [ "$TZ_DH1" = "0" ];then
	TZ_DH1=""
fi
TZ_DH="$TZ_DH1${TZ_D:2:1}"
TZ_DM="${TZ_D:3:2}"
if [ "$TZ_DM" = "00" ];then
	TZ_DM=""
else
	TZ_DM=":${TZ_DM}"
fi
TZL="$TZ_N$TZ_DS$TZ_DH$TZ_DM"

echo -e $cyan
echo DNS_SETTINGS="$DNS_SETTINGS"
echo GATEWAY=$GATEWAY
echo NETMASK=$NETMASK
echo DISK_SIZE=$DISK_SIZE
echo MEM_SIZE=$MEM_SIZE
echo TZ=$TZL
echo IP=$IP
echo PORT=$PORT
echo -e $plain


ssh_inst sudo ros console switch ubuntu -f
sleep 5
ssh_inst bash -c "cat - > __install_rancher" <<FINAL
#!/bin/bash
apt-get update; apt-get install -y gdisk lvm2 dosfstools btrfs-tools parted
dd if=/dev/zero of=/dev/sda bs=1G count=1
partprobe
gdisk /dev/sda <<EOF
2
x
l
1
m
n
1

2047
ef02
x
l
2048
m
n
2

+256M
ef00
n
3

$SWAP_PART_SIZE
8200
n
4

+1G
8300
n
5


8300
p
w
y
EOF
partprobe
gdisk -l /dev/sda
mkswap -L RANCHER_SWAP /dev/sda3 <<END
y
END
mkfs.vfat -F32 -n EFI /dev/sda2 << END
y
END
echo -n "
hostname: $HNAME_FULL
rancher:
  network:
    dns:
      nameservers:
$DNS_SETTINGS
    interfaces:
      eth*:
        dhcp: false
      eth0:
        address: $IP/$NETMASK
        gateway: $GATEWAY
  services:
    console:
      environment:
        TZ: \"$TZL\"
    syslog:
      environment:
        TZ: \"$TZL\"
write_files:
  - path: /opt/rancher/bin/start.sh
    permissions: \"0755\"
    owner: root
    content: |
      #!/bin/bash
      sudo sed -i 's/#Port 22/Port $PORT/' /etc/ssh/sshd_config
      sudo kill -HUP \\\$(ps ax |grep 'sshd -D' | grep -v grep | awk '{ print \\\$1 }')
      sudo echo LANG=en_US.UTF-8 >> /etc/profile.d/lang.sh
      sudo echo LC_CTYPE=en_US.UTF-8 >> /etc/profile.d/lang.sh
      sudo echo LC_ALL=en_US.UTF-8 >> /etc/profile.d/lang.sh
mounts:
- - /dev/sda5
  - /
  - btrfs
  - \"subvol=/state_root,defaults,noatime\"
- - /dev/sda5
  - /btrfs_top_lvl
  - btrfs
  - \"subvol=/,defaults,noauto,noatime\"
- - /dev/sda4
  - /boot
  - btrfs
  - \"\"
- - /dev/sda2
  - /boot/efi
  - vfat
  - \"\"
runcmd:
- swapon -L RANCHER_SWAP
- btrfs quota enable /btrfs_top_lvl
- btrfs quota enable /btrfs_top_lvl/state_root
#cloud-config
ssh_authorized_keys:
 - $KEY
" >> cloud-config.yml
ros install --no-reboot -f -t gptsyslinux -c cloud-config.yml -a rancher.state.mdadm_scan -a rancher.state.lvm_scan -d /dev/sda -p /dev/sda4
mkdir /mnt/efipart && mount /dev/sda2 /mnt/efipart
mkdir /mnt/installer && mount /dev/sdb1 /mnt/installer
cp -r /mnt/installer/EFI /mnt/efipart
cat - > /mnt/efipart/EFI/BOOT/grub.cfg <<END
set timeout=1
set gfxmode=1280x1024x16
set gfxpayload=keep
menuentry "Rancher from GPT" {
	set gfxmode=1280x1024
	set gfxpayload=keep
    search --no-floppy --set=root --label RANCHER_BOOT
    linux    /vmlinuz-4.14.138-rancher nomodeset vga=775 video=1280x1024 printk.devkmsg=on rancher.state.mdadm_scan rancher.state.lvm_scan rancher.state.dev=LABEL=RANCHER_STATE rancher.state.wait panic=10 console=tty1 console=ttyS0 root=/dev/sda5 rw rootflags=subvol=/state_root
    initrd   /initrd-v1.5.8
}
END
mount /dev/sda4 /opt
mkfs.btrfs -L RANCHER_STATE -f /dev/sda5
mount /dev/sda5 /mnt
btrfs subvolume create /mnt/state_root
btrfs subvolume set-default \`btrfs subvolume list /mnt|grep state_root|awk '{print \$2}'\` /mnt
mkdir /mnt/state_root/btrfs_top_lvl
cp -av /opt/* /mnt/state_root
umount /opt
mkfs.btrfs -L RANCHER_BOOT -f /dev/sda4
mount /dev/sda4 /opt
cp -av /mnt/state_root/boot/* /opt/
rm -rf /mnt/state_root/boot/*
umount /mnt /opt
reboot
FINAL
ssh_inst chmod +x __install_rancher
ssh_inst -t sudo ./__install_rancher

