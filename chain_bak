# bash source

chain_bak(){
	local argv=()
	local diff
	local help
	local cyclic
	local cyclicPreserved
	local verbose
	local dryrun
	local theFirst
	local force
	local reverse

	dbv "$@"
	while (( "$#" )); do
		if [ "${1:0:1}" = "-" ];then
			if [ "${1:0:2}" = "--" ];then
				case "$1" in
					"--diff")
						diff=1
						;;
					"--help")
						help=1
						;;
					"--exchange")
						cyclic=1
						;;
					"--cyclic")
						cyclic=1
						;;
					"--reverse")
						reverse=1
						;;
					"--force")
						force="-f"
						;;
					*)
						die "not supported option '$1'"
						;;
				esac
			else
				local i
				for (( i=1; i<${#1}; i++ )); do
					local o="${1:$i:1}"
					case "$o" in
						"v")
							verbose="-v"
							;;
						"d")
							diff=1
							;;
						"?")
							help=1
							;;
						"x")
							cyclic=1
							;;
						"r")
							reverse=1
							;;
						"f")
							force="-f"
						;;
						*)
							die "not supported option -'$o'"
							;;
					esac
				done
			fi
		else
			argv+=("$1")
		fi
		shift
	done
	dbv "${argv[@]}"
	local targv=()
	if [ -n "$reverse" ];then
		for ((i = ${#argv[@]} - 1; i >= 0; i--)); do
			a=${argv[$i]}
			dbv $a
			targv+=("$a")
		done
		dbv "${targv[@]}"
		argv=("${targv[@]}")
	fi
	dbv "${argv[@]}"
	
	if [ -n "$help" ];then
		echo "usage: chain_bak [options] SOURCE DEST [ DEST2 DEST3 ... ]
  SOURCE                      : source file name
  DEST(s)                     : destination file name
  (options)
     -d, --diff               : Check difference between SOURCE and DEST
     -f, --force              : Remove file(s) with same content (sould be accompanied by '-d' option)
     -x, --exchange, --cyclic : Exchange name cyclically
     -v, --verbose            : Verbose output
     -r, --reverse            : Reverse all action
     -?, --help               : Show this help messages"
		exit 0
	fi
	if [ -n "$DEBUG" ];then
		verbose="-v"
	fi
	if [ -n "$force" ];then
		if [ -z "$diff" ];then
			force=
		fi
	fi
	
	function _mv_it(){
		dbv /bin/mv $verbose "$@"
		/bin/mv $verbose "$@"
	}
	function _check_identity(){
		if [ "$1" = "$2" ];then
			err "source argument '$1' and destination argument '$2' is same"
			return 1
		fi
		if [ -e "$2" ];then
			local L1="`readlink -f "$1"`"
			local L2="`readlink -f "$2"`"
			if [ -z "$L1" -o -z "$L2" ];then
				return 0
			fi
			if [ "$L1" = "$L2" ];then
				err "source argument '$1' and destination argument '$2' is an identical file, '$L1'"
				return 1
			else
				if [ "`stat -c "%D:%d:%i" "$L1"`" = "`stat -c "%D:%d:%i" "$L2"`" ];then
					err "source argument '$1' and destination argument '$2' is identical file"
					return 1
				fi
			fi
			if [ -n "$diff" ];then
				if [ -f "$1" -a -f "$2" ]; then
					if diff "$1" "$2" >/dev/null; then
						if [ ! -n "$force" ];then
							err "No difference between '$1' '$2'. Stop operation."
							info "You can use force option (-f) to overcome this limitation by deleting '$2'"
							return 1
						else
							info "No difference between '$1' '$2'."
							return 0
						fi
					fi
				fi
			fi
		fi
		return 0
	}

	function _chain_bak(){
		local beyondCenter
		local f
		if [ "$1" = "-" ];then
			beyondCenter=1
			shift
			f="$1"
		else
			if [ "$2" = "-" ];then
				beyondCenter=1
				f="$1"
				shift
			else
				f="$1" # first argument
			fi
		fi
		shift
		if [ ! -e "$f" ];then
			errmsg "File, '$f' does not exist"
			return 1
		else
			if [ "$#" = 0 ];then # only one argument
				local theme
				local center
				local startFile=$f
				if [[ "$f" =~ ^(.*)\.((-|)[0-9]+)$ ]];then
					theme=${BASH_REMATCH[1]}
					center=${BASH_REMATCH[2]}
				else
					theme=$f
					center=0
				fi
				dbv $theme
				dbv $center
				_chain_bak_find_max $center
				dbv $max
				if [ -n "$beyondCenter" ];then
					dbv $beyondCenter
					_chain_bak_find_min $center
					dbv $min
					dbv $theme
					if ! _chain_bak2 $min; then
						return 1
					fi
				else
					dbv $max
					if ! _chain_bak2 $center; then
						return 1
					fi
				fi
			else
				if [ -n "$beyondCenter" ];then
					die "Argument error. '-' with over-two arguments."
				fi
				if ! _check_identity "$f" "$1"; then
					return 1
				fi
				if [ -n "$2" ];then
					if ! _chain_bak "$@"; then
						return 1
					fi
				else
					if [ -n "$cyclic" ];then
						if ! _check_identity "$f" "$1"; then
							return 1
						fi
						cyclicPreserved="$1.$RANDOM$RANDOM$RANDOM"
						if ! _mv_it "$1" "$cyclicPreserved"; then
							return 1
						fi
					fi
				fi
				dbv
				if [ -e "$1" ];then
					dbv "$1"
					if ! _chain_bak "$1"; then
						return 1
					fi
				fi
				if ! _mv_it $force "$f" "$1"; then
					return 1
				fi
			fi
		fi
		return 0
	}
	
	
	function _chain_bak2(){
		local num="$1"
		local f0
		local f1
		local isMax
		dbv $num, $center
		dbv $startFile
		dbv $theme
		f0="$(_chain_bak_set_file $num)"
		f1="$(_chain_bak_set_file $((num + 1)))"
		dbv $f0, $f1
		if [ "$((num + 1))" != "$((max + 1))" ];then
			if ! _check_identity "$f0" "$f1"; then
				return 1
			fi
			if ! _chain_bak2 "$((num + 1))"; then
				return 1
			fi
		fi
		dbv $f0, $f1
		if ! _mv_it $force "$f0" "$f1"; then
			return 1
		fi
	}

	function _chain_bak_find_max(){
		local n=$(($1 + 1))
		local t
		if [ $n = 0 ];then
			t="$theme"
		else
			t="$theme.$n"
		fi
		if [ ! -e "$t" ];then
			max=$1
		else
			_chain_bak_find_max $n
		fi
	}

	function _chain_bak_find_min(){
		local n=$(($1 - 1))
		local t
		if [ $n = 0 ];then
			t="$theme"
		else
			t="$theme.$n"
		fi
		if [ ! -e "$t" ];then
			min=$1
		else
			_chain_bak_find_min $n
		fi
	}

	function _chain_bak_reverse(){
		dbv "$@"
		local beyondCenter
		if [ "$1" = "-" ];then
			beyondCenter=1
			shift
		else
			if [ "$2" = "-" ];then
				beyondCenter=1
			fi
		fi
		local theme
		local center
		if [[ "$1" =~ ^(.*)\.((-|)([0-9]+))$ ]];then
			theme=${BASH_REMATCH[1]}
			center=${BASH_REMATCH[2]}
		else
			theme=$1
			center=0
		fi
		local max
		local min
		_chain_bak_find_max "$center"
		if [ -n "$beyondCenter" ];then
			_chain_bak_find_min "$center"
		else
			min=$center
		fi
		dbv $1
		dbv $theme
		dbv $center
		dbv $max
		dbv $min
		local startFile=$1
		if [ "$max" != "$min" ];then
			_chain_bak_reverse2 $max
		fi
	}
	
	function _chain_bak_set_file(){
		case $1 in
			$center)
				echo "$startFile"
				;;
			0)
				echo "$theme"
				;;
			*)
				echo "$theme.$1"
				;;
		esac
	}
	
	function _chain_bak_reverse2(){
		local num="$1"
		local f0
		local f1
		local isMin
		f1="$(_chain_bak_set_file $((num - 1)))"
		f0="$(_chain_bak_set_file $num)"
		dbv $f0 $((num - 1))
		dbv $f1 $num
		if [ "$((num - 1))" != "$((min - 1))" ];then
			if ! _check_identity "$f0" "$f1"; then
				return 1
			fi
			if ! _chain_bak_reverse2 "$((num - 1))"; then
				return 1
			fi
		fi
		if ! _mv_it $force "$f1" "$f0"; then
			return 1
		fi
	}


	if [ ${#argv[@]} -ge 2 ]; then
		theFirst="${argv[0]}"
		if _chain_bak "${argv[@]}"; then
			if [ -n "$cyclicPreserved" ];then
				_mv_it "$cyclicPreserved" "$theFirst"
			else
				dbv
				_chain_bak_reverse "${argv[0]}"
			fi
		fi
	else
		dbv "${#argv[@]}"
		dbv "$@"
		if [ ! -e "${argv[0]}" ];then
			errmsg "'${argv[0]}' does not exist."
			return 1
		fi
		if [ -z "$reverse" ];then
			_chain_bak - "${argv[0]}"
		else
			_chain_bak_reverse - "${argv[0]}"
		fi
	fi
}



