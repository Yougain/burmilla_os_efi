# bash source

chain_bak(){
	local argv=()
	local diff
	local help
	local cyclic
	local cyclicPreserved
	local verbose
	local dryrun
	local theFirst
	local force
	local reverse
	local limit

	dbv "$@"
	while (( "$#" )); do
		if [ "${1:0:1}" = "-" ];then
			if [ "${1:0:2}" = "--" ];then
				case "$1" in
					"--diff")
						diff=1
						;;
					"--compare")
						diff=1
						;;
					"--help")
						help=1
						;;
					"--exchange")
						cyclic=1
						;;
					"--cyclic")
						cyclic=1
						;;
					"--reverse")
						reverse=1
						;;
					"--force")
						force="-f"
						;;
					*)
						die "not supported option '$1'"
						;;
				esac
			else
				if [[ $1 =~ ^-([0-9]+)$ ]];then
					limit=${BASH_REMATCH[1]}
				else
					local i
					for (( i=1; i<${#1}; i++ )); do
						local o="${1:$i:1}"
						case "$o" in
							"v")
								verbose="-v"
								;;
							"d")
								diff=1
								;;
							"?")
								help=1
								;;
							"x")
								cyclic=1
								;;
							"r")
								reverse=1
								;;
							"f")
								force="-f"
							;;
							*)
								die "not supported option -'$o'"
								;;
						esac
					done
				fi
			fi
		else
			argv+=("$1")
		fi
		shift
	done
	dbv "${argv[@]}"
	local targv=()
	if [ -n "$reverse" ];then
		for ((i = ${#argv[@]} - 1; i >= 0; i--)); do
			a=${argv[$i]}
			dbv $a
			targv+=("$a")
		done
		dbv "${targv[@]}"
		argv=("${targv[@]}")
	fi
	dbv "${argv[@]}"
	
	if [ -n "$help" ];then
		echo "usage: chain_bak [options] SOURCE DEST [ DEST2 DEST3 ... ]
  SOURCE                      : source file name
  DEST(s)                     : destination file name
  (options)
     -d, --diff               : Check difference between SOURCE and DEST
     -f, --force              : Remove file(s) with same content (sould be accompanied by '-d' option)
     -x, --exchange, --cyclic : Exchange name cyclically
     -v, --verbose            : Verbose output
     -r, --reverse            : Reverse all action
     -[LIMIT_NUM]             : Erase clobber over LIMIT_NUM
     -?, --help               : Show this help messages"
		exit 0
	fi
	if [ -n "$DEBUG" ];then
		verbose="-v"
	fi
	if [ -n "$force" ];then
		if [ -z "$diff" ];then
			force=
		fi
	fi
	
	function _mv_it(){
		dbv /bin/mv $verbose "$@"
		/bin/mv $verbose "$@"
	}
	function _check_identity(){
		if [ "$1" = "$2" ];then
			err "source argument '$1' and destination argument '$2' is same"
			return 1
		fi
		if [ -e "$2" ];then
			local L1="`readlink -f "$1"`"
			local L2="`readlink -f "$2"`"
			if [ -z "$L1" -o -z "$L2" ];then
				return 0
			fi
			if [ "$L1" = "$L2" ];then
				err "source argument '$1' and destination argument '$2' is an identical file, '$L1'"
				return 1
			else
				if [ "`stat -c "%D:%d:%i" "$L1"`" = "`stat -c "%D:%d:%i" "$L2"`" ];then
					err "source argument '$1' and destination argument '$2' is identical file"
					return 1
				fi
			fi
			if [ -n "$diff" ];then
				if [ -f "$1" -a -f "$2" ]; then
					if diff "$1" "$2" >/dev/null; then
						if [ ! -n "$force" ];then
							err "No difference between '$1' '$2'. Stop operation."
							info "You can use force option (-f) to overcome this limitation by deleting '$2'"
							return 1
						else
							info "No difference between '$1' '$2'."
							return 0
						fi
					fi
				fi
			fi
		fi
		return 0
	}

	function _chain_bak(){
		local beyondCenter
		local f
		if [ "$1" = "-" ];then
			beyondCenter=1
			shift
			f="$1"
		else
			if [ "$2" = "-" ];then
				beyondCenter=1
				f="$1"
				shift
			else
				f="$1" # first argument
			fi
		fi
		shift
		if [ ! -e "$f" ];then
			errmsg "File, '$f' does not exist"
			return 1
		else
			if [ "$#" = 0 ];then # only one argument
				local theme
				local center
				local startFile=$f
				if [[ "$f" =~ ^(.*)\.((-|)[0-9]+)$ ]];then
					theme=${BASH_REMATCH[1]}
					center=${BASH_REMATCH[2]}
				else
					theme=$f
					center=0
				fi
				dbv $theme
				dbv $center
				dbv $before_order
				local blim
				local lim=$limit
				if [ -n "$before_order" ];then
					dbv
					if ((before_order > center));then
						dbv
						blim=$((before_order - 1))
						dbv $blim
						if [ -z $limit ] || ((blim < limit));then
							lim=blim
							before_to_center_tmp=$theme.$RANDOM$RANDOM$RANDOM
							mv $theme.$before $before_to_center_tmp
						fi
					elif ((before_order < center));then
						while [ -e "$theme.$((before_order - 1))" ] || [ "$before_order" = 1 -a -e "$theme" ];do
							((--before_order))
						done
					else # should be "$theme" vs "$theme.0"
						before_order=
					fi
					before_order_processed=1
				fi
				dbv
				_chain_bak_find_max $center
				dbv $max
				if [ -n "$beyondCenter" ];then
					dbv $beyondCenter
					_chain_bak_find_min $center
					dbv $min
					dbv $theme
					if ! _chain_bak2 $min; then
						return 1
					fi
				else
					dbv $max
					if ! _chain_bak2 $center; then
						return 1
					fi
				fi
			else
				if [ -n "$beyondCenter" ];then
					die "Argument error. '-' with over-two arguments."
				fi
				if ! _check_identity "$f" "$1"; then
					return 1
				fi
				if [ -n "$2" ];then
					if ! _chain_bak "$@"; then
						return 1
					fi
				else
					if [ -n "$cyclic" ];then
						if ! _check_identity "$f" "$1"; then
							return 1
						fi
						cyclicPreserved="$1.$RANDOM$RANDOM$RANDOM"
						if ! _mv_it "$1" "$cyclicPreserved"; then
							return 1
						fi
					fi
				fi
				dbv "$1"
				local before_theme=
				local before_order=
				local before_to_center_tmp=
				before_order_processed=
				dbv $before_order_processed
				if [ -e "$1" ];then
					dbv "$1"
					if [[ "$f" =~ ^(.*)\.((-|)[0-9]+)$ ]];then
						before_theme="${BASH_REMATCH[1]}"
						before_order="${BASH_REMATCH[2]}"
					else
						before_theme="$f"
						before_order=0
					fi
					if [[ "$1" =~ ^(.*)\.((-|)[0-9]+)$ ]];then
						if [ "${BASH_REMATCH[1]}" != "$before_theme" ];then
							before_order=
						fi
					elif [ "$1" != "$before_theme" ];then
						before_order=
					fi
					dbv $before_order
					dbv $before_order_processed
					if ! _chain_bak "$1"; then
						return 1
					fi
					dbv $before_order_processed
				fi
				if ! _mv_it $force "$f" "$1"; then
					return 1
				fi
				if [ -n "$before_order" ];then
					dbv $before_order
					if [ -n "$before_to_center_tmp" ];then
						dbv $before_to_center_tmp
						mv $before_to_center_tmp $f
					fi
					before_to_center_tmp=
					dbv $before_theme.$before_order
					if [ -e "$before_theme.$before_order" ];then
						dbv
						_chain_bak "$before_theme.$before_order"
					elif [ "$before_order" = "0" -a -e "$before_theme" ];then
						dbv
						_chain_bak "$before_theme"
					fi
					before_order_processed=1
				fi
				dbv $before_order_processed
			fi
		fi
		return 0
	}
	
	
	function _chain_rm(){
		local num="$1"
		local f0="$(_chain_bak_set_file $num)"
		local f1="$(_chain_bak_set_file $((num + 1)))"
		dbv rm -rf $f0 $f1
		if [ -e "$f1" ];then
			if ! _chain_rm $((num + 1)); then
				return 1
			fi
		fi
		if ! rm -rf $verbose "$f0"; then
			return 1
		fi
		dbv erased "$f0"
	}
	
	function _chain_bak2(){
		local num="$1"
		local f0
		local f1
		local isMax
		dbv $num, $center
		dbv $startFile
		dbv $theme
		f0="$(_chain_bak_set_file $num)"
		f1="$(_chain_bak_set_file $((num + 1)))"
		dbv $f0, $f1
		if [ "$((num + 1))" != "$((max + 1))" ];then
			if ! _check_identity "$f0" "$f1"; then
				return 1
			fi
			if ! _chain_bak2 "$((num + 1))"; then
				return 1
			fi
		fi
		dbv $f0, $f1
		if [ "$num" != "$limit" ];then
			if ! _mv_it $force "$f0" "$f1"; then
				return 1
			fi
		else
			if ! _chain_rm $num; then
				return 1
			fi
		fi
	}

	function _chain_bak_find_max(){
		local n=$(($1 + 1))
		local t
		if [ $n = 0 ];then
			t="$theme"
		else
			t="$theme.$n"
		fi
		if [ ! -e "$t" -o "$1" = "$lim" ];then
			max=$1
		else
			_chain_bak_find_max $n
		fi
	}

	function _chain_bak_find_min(){
		local n=$(($1 - 1))
		local t
		if [ $n = 0 ];then
			t="$theme"
		else
			t="$theme.$n"
		fi
		if [ ! -e "$t" -o "$1" = "-$limit" ];then
			min=$1
		else
			_chain_bak_find_min $n
		fi
	}

	function _chain_bak_reverse(){
		dbv "$@"
		local beyondCenter
		if [ "$1" = "-" ];then
			beyondCenter=1
			shift
		else
			if [ "$2" = "-" ];then
				beyondCenter=1
			fi
		fi
		local theme
		local center
		if [[ "$1" =~ ^(.*)\.((-|)([0-9]+))$ ]];then
			theme=${BASH_REMATCH[1]}
			center=${BASH_REMATCH[2]}
		else
			theme=$1
			center=0
		fi
		local max
		local min
		_chain_bak_find_max "$center"
		if [ -n "$beyondCenter" ];then
			_chain_bak_find_min "$center"
		else
			min=$center
		fi
		dbv $1
		dbv $theme
		dbv $center
		dbv $max
		dbv $min
		local startFile=$1
		if [ "$max" != "$min" ];then
			_chain_bak_reverse2 $max
		fi
	}
	
	function _chain_bak_set_file(){
		case $1 in
			$center)
				echo "$startFile"
				;;
			0)
				echo "$theme"
				;;
			*)
				echo "$theme.$1"
				;;
		esac
	}
	
	function _chain_bak_reverse2(){
		local num="$1"
		local f0
		local f1
		local isMin
		f1="$(_chain_bak_set_file $((num - 1)))"
		f0="$(_chain_bak_set_file $num)"
		dbv $f0 $((num - 1))
		dbv $f1 $num
		if [ "$((num - 1))" != "$((min - 1))" ];then
			if ! _check_identity "$f0" "$f1"; then
				return 1
			fi
			if ! _mv_it $force "$f0" "$f1"; then
				return 1
			fi
			if ! _chain_bak_reverse2 "$((num - 1))"; then
				return 1
			fi
		fi
	}

	dbv
	local before_order_processed
	if [ ${#argv[@]} -ge 2 ]; then
		dbv
		theFirst="${argv[0]}"
		if _chain_bak "${argv[@]}"; then
			if [ -n "$cyclicPreserved" ];then
				_mv_it "$cyclicPreserved" "$theFirst"
			else
				dbv
				if [ -z "$before_order_processed" ];then
					_chain_bak_reverse "${argv[0]}"
				fi
			fi
		fi
	else
		dbv "${#argv[@]}"
		dbv "$@"
		if [ ! -e "${argv[0]}" ];then
			errmsg "'${argv[0]}' does not exist."
			return 1
		fi
		if [ -z "$reverse" ];then
			_chain_bak - "${argv[0]}"
		else
			_chain_bak_reverse - "${argv[0]}"
		fi
	fi
}


_d_id(){
	echo `stat -c "%d-%i" -L "$1"`
}

do_recursive_files(){
	declare -A dstack
	local dst="$3"
	local src="$2"
	local src_dn="${src##*/}"
	if [ -d "$dst" ];then
		while [ -z "$src_dn" -a "${src: -1:1}" = "/" ];do
			src="${src%?}"
			src_dn="${src##*/}"
		done
		if [ -n "$src" ]; then
			if [ "$src" != "/" -a "$src_dn" != "." -a "$src_dn" != ".." ];then
				dst="$dst/$src_dn"
			fi
		else
			$src="/"
		fi
	fi
	if [ -d "$src" ];then
		_do_recursive_files_dir "$1" "$src" "$dst"
	else
		"$1" "$2" "$dst"
	fi
}


_do_recursive_files_dir(){
	local did=`_d_id "$2"`
	dbv $did
	if [ -z "$did" ];then # missing source
		return
	fi
	if [ "${dstack[$did]}" ];then # cyclic reference
		return
	fi
	"$1" "$2" "$3" # check only dir, but not check files in dir
	local f
	local dirs
	local d
	local IFS=
	for f in "$2"/*; do
		if [ -e "$f" ];then
			if [ -d "$f" ];then
				dirs+=("$f")
			else
				"$1" "$f" "$3/${f##*/}"
			fi
		fi
	done
	dstack[$did]=1
	for d in "${dirs[@]}"; do
		_do_recursive_files_dir "$1" "$d" "$3/${d##*/}"
	done
	dstack[$did]=
}


_same_content_(){
	if [ -f "$1" -a -f "$2" ];then
		if [ -n "$compare" ];then
			diff "$1" "$2" > /dev/null
			return $?
		else
			return 1
		fi
	fi
	local sts=$(stat -c "%F:%T:%t" "$1")
	local std=$(stat -c "%F:%T:%t" "$2")
	if [ "$sts" != "$std" ];then
		return 1
	else
		return 0
	fi
}


_cp_bak(){
	if [ -d "$1" ];then
		if [ -d "$2" ];then
			return
		fi
		if [ -e "$2" -o -L "$2" ];then # file exists or symlink but destination is missing
			chain_bak ${opts[@]} "$2"
		fi
		mkdir "$2"
		local src="`readlink -f "$1"`"
		local ug=$(stat -c '%U:%G' "$src")
		local ac=$(stat -c '%a' "$src")
		chown $ug "$2"
		chmod $ac "$2"
		touch -r "$src" "$2"
	else
		dbv $@
		if [ -e "$2" ]; then
			if _same_content_ "$1" "$2";then
				return
			else
				chain_bak ${opts[@]} "$2"
			fi
		elif [ -L "$2" ]; then # symlink but destination is missing
			chain_bak ${opts[@]} "$2"
		fi
		if [ -e "$1" ]; then
			dbv $1 "`readlink -f "$1"`"
			if ! cp -av "`readlink -f "$1"`" "$2"; then
				:
			fi
			dbv
		elif [ -L "$1" ]; then
			dbv
			if ! cp -av "$1" "$2"; then
				:
			fi
			dbv
		else
			warn "'$1' is missing"
		fi
	fi
}


cp_bak(){
	local opts
	local ag
	local ags
	local compare
	local srcs=("${@:1:$(($#-1))}")
	local dst=${!#}
	local i=0
	for ag in "$@"; do
		if [ "${ag:0:1}" = "-" ];then
			if [ "$ag" == "--compare" ];then
				compare=1
			else
				opts+=("$ag")
			fi
		else
			ags+=("$ag")
		fi
	done
	if [ ${#ags[@]} -lt 2 ];then
		die "missing SOURCE and/or DESTINATION argument(s)"
	fi
	dst=${ags[-1]}
	srcs=("${ags[@]:0:${#ags[@]}-1}")
	if [ -d "$dst" ];then
		for src in "${srcs[@]}"; do
			do_recursive_files _cp_bak $src $dst
		done
	elif [ ${#ags[@]} -gt 2 ];then
		die "last argument is not a directory"
	else
		do_recursive_files _cp_bak $src $dst
	fi
}

